var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { HttpBaseConfig, setHttpBaseConfig } from './base';
import { setHttp } from './http';
import { createAxiosIns } from './axios';
export * from './base';
export * from './api';
export * from './http';
export * from './types';
/**
 * 初始化配置
 * 包括
 * HttpBaseConfig: 基础配置
 * axios 配置(如果使用默认axios实例)
 * http 自定义http请求实例, 需要满足AxiosLike要求
 *
 * @export
 * @param {Config} config
 */
export function init(config) {
    const { API_BASE, UPLOAD_BASE, DEFAULT_PAGE_NO, DEFAULT_PAGE_SIZE, http, throwResInError = true } = config, axiosConfig = __rest(config, ["API_BASE", "UPLOAD_BASE", "DEFAULT_PAGE_NO", "DEFAULT_PAGE_SIZE", "http", "throwResInError"]);
    setHttpBaseConfig({
        API_BASE,
        UPLOAD_BASE,
        DEFAULT_PAGE_NO: DEFAULT_PAGE_NO || HttpBaseConfig.DEFAULT_PAGE_NO,
        DEFAULT_PAGE_SIZE: DEFAULT_PAGE_SIZE || HttpBaseConfig.DEFAULT_PAGE_SIZE,
    });
    if (http) {
        setHttp(http);
    }
    else {
        const ins = createAxiosIns(axiosConfig);
        if (throwResInError) {
            ins.interceptors.response.use(undefined, (error) => {
                let err = error;
                if (err && 'response' in err) {
                    err = err.response;
                }
                return Promise.reject(err);
            });
        }
        setHttp(ins);
    }
}
