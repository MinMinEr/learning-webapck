import { BaseUser, NumberDTO, StringDTO, BaseTime, BooleanDTO, } from '../../define/base';
import { extend, constant, pick, optional } from '../../define/helper';
import { CoterieBase } from '../coteries/baseType';
import { TypeWrapper } from '../../http';
import { UserShortInfo } from '../user/types';
// 比赛基本模型
const ContestBase = extend({
    id: NumberDTO,
    admins: StringDTO,
    title: StringDTO,
    status: constant('block', 'active', 'finish'),
    coterieId: NumberDTO,
    type: constant('ai_innovation', 'programming', 'innovation_app', 'tech_selection'),
    linkUrl: StringDTO,
    organizers: StringDTO,
    organizerLogo: StringDTO,
    organizerRemark: StringDTO,
    attachments: StringDTO,
    teamMemberLimit: NumberDTO,
    description: StringDTO,
    questions: StringDTO,
    questionsMd: StringDTO,
    rules: StringDTO,
    rulesMd: StringDTO,
    reward: constant(0, 1),
    rewardRemark: StringDTO,
    pv: NumberDTO,
    roundCount: NumberDTO,
    userCount: NumberDTO,
    submissionCount: NumberDTO,
    onBoardCount: NumberDTO,
    leaderboard: StringDTO,
    teamCount: NumberDTO,
    startedAt: NumberDTO,
    expiredAt: NumberDTO,
    registerStartedAt: NumberDTO,
    registerExpiredAt: NumberDTO,
    registerTimeFollows: BooleanDTO,
    hasVote: BooleanDTO,
    version: NumberDTO,
}, BaseUser, BaseTime);
// 比赛配置项
const ContestRound = {
    round: NumberDTO,
    roundName: StringDTO,
    contestId: NumberDTO,
    submitType: constant('taiji', 'text', 'attachment', 'git'),
    submitFormat: StringDTO,
    submitPath: StringDTO,
    submitRemark: StringDTO,
    submitRemarkMd: StringDTO,
    submitLimit: NumberDTO,
    rankType: constant(1, 2),
    submissionRankType: constant(1, 2, 3),
    rankLabels: [
        {
            label: StringDTO,
            key: StringDTO,
            showInGrade: BooleanDTO,
            showInLeaderboard: BooleanDTO,
        },
    ],
    showLeaderboard: BooleanDTO,
    submitStartedAt: NumberDTO,
    submitExpiredAt: NumberDTO,
    submitTimeFollows: BooleanDTO,
    createdAt: NumberDTO,
    showSubmitContent: BooleanDTO,
    whitelist: StringDTO,
    curWhitelist: BooleanDTO,
    status: constant('block', 'active'),
    version: NumberDTO,
};
// 比赛模型, 添加圈子和contestLink属性
const Contest = extend(ContestBase, {
    coterie: pick(CoterieBase, ['id', 'name', 'avatar']),
    contestRounds: [ContestRound],
}, optional({
    contestLink: {
        userId: NumberDTO,
        username: StringDTO,
    },
}));
export const ContestHttp = TypeWrapper(Contest);
// 比赛列表简要信息
export const ContestList = pick(ContestBase, [
    'id',
    'title',
    'description',
    'organizerLogo',
    'organizers',
    'userCount',
    'expiredAt',
    'status',
    'createdAt',
    'updatedAt',
    'type',
    'reward',
    'linkUrl',
    'teamMemberLimit',
    'onBoardCount',
]);
export const ContestListHttp = TypeWrapper(ContestList);
const ContestBgStats = {
    curBgNum: NumberDTO,
    curOrgNum: NumberDTO,
    maxBg: StringDTO,
};
const ContestListRank = {
    teamId: NumberDTO,
    teamMembers: {
        user: {
            username: StringDTO,
            name: StringDTO,
            org: StringDTO,
        },
    },
    team: {
        name: StringDTO,
    },
};
export const ContestListWithBgStatsAndRank = extend({
    bgStats: ContestBgStats,
    contestRounds: pick(ContestRound, ['roundName', 'round']),
    ranks: ContestListRank,
}, pick(ContestBase, [
    'id',
    'title',
    'organizers',
    'userCount',
    'status',
    'pv',
    'teamMemberLimit',
]));
export const ContestListWithBgStatsAndRankHttp = TypeWrapper(ContestListWithBgStatsAndRank);
const TeamBase = extend({
    id: NumberDTO,
    name: StringDTO,
    description: StringDTO,
    status: constant('closed', 'open'),
    memberLimit: NumberDTO,
    submitCount: NumberDTO,
}, BaseTime);
export const TeamBaseHttp = TypeWrapper(TeamBase);
const TeamMember = {
    type: constant('leader', 'member'),
    status: constant('full', 'apply'),
    user: UserShortInfo,
};
const Team = extend({
    teamMembers: [TeamMember],
    applyTeamMembers: [TeamMember],
}, TeamBase);
export const TeamHttp = TypeWrapper(Team);
// 用户参与过的比赛, 由于存在团队以及排名信息
// 因此会多一些字段
export const UserJoinedContest = extend(ContestList, {
    team: TeamBase,
    teamRank: NumberDTO,
    // 报名信息
    contestLink: {
        createdAt: NumberDTO,
    },
});
export const UserJoinedContestHttp = TypeWrapper(UserJoinedContest);
// 用户与比赛关联信息, 其实就是报名信息
export const ContestLink = extend({
    id: NumberDTO,
    user: UserShortInfo,
    team: pick(Team, ['id', 'name']),
}, BaseTime);
export const ContestLinkHttp = TypeWrapper(ContestLink);
// 提交
const SubmissionBase = extend({
    id: NumberDTO,
    contestId: NumberDTO,
    round: NumberDTO,
    teamId: NumberDTO,
    teamName: NumberDTO,
    type: constant('default', 'sandbox', 'benchmark'),
    status: constant('processing', 'ok', 'error', 'pending'),
    bestResult: BooleanDTO,
    examType: constant('taiji', 'text', 'attachment', 'git'),
    content: StringDTO,
    score: NumberDTO,
    result: StringDTO,
    errorCode: NumberDTO,
    errorMsg: StringDTO,
    errorMsgMd: StringDTO,
}, BaseUser, BaseTime);
export const SubmissionBaseHttp = TypeWrapper(SubmissionBase);
// 排行榜
const SubmissionRankBase = {
    id: NumberDTO,
    contestId: NumberDTO,
    round: NumberDTO,
    teamId: NumberDTO,
    submissionId: NumberDTO,
    submissionEntry: NumberDTO,
    submissionType: constant('default', 'sandbox', 'benchmark'),
    score: NumberDTO,
    result: StringDTO,
    totalEntry: NumberDTO,
    rank: NumberDTO,
    rankDiff: NumberDTO,
    rankPercentage: NumberDTO,
    submitAt: NumberDTO,
};
const SubmissionRank = extend(SubmissionRankBase, {
    team: TeamBase,
    curStatus: BooleanDTO,
    teamMembers: [TeamMember],
});
export const SubmissionRankHttp = TypeWrapper(SubmissionRank);
// 比赛积分榜排名
const ContestScoreRank = {
    scoreSum: NumberDTO,
    recordSum: NumberDTO,
    user: UserShortInfo,
    userBg: StringDTO,
    curStar: BooleanDTO,
};
export const ContestScoreHttp = TypeWrapper(ContestScoreRank);
// 参赛选手感言
const ContestPlayerFeedback = extend({
    id: NumberDTO,
    title: StringDTO,
    description: StringDTO,
    name: StringDTO,
    avatar: StringDTO,
}, BaseUser, BaseTime);
export const ContestPlayerFeedbackHttp = TypeWrapper(ContestPlayerFeedback);
// 比赛站内信历史
export const ContestNoticeHistory = {
    id: NumberDTO,
    content: StringDTO,
    username: StringDTO,
    pushCount: NumberDTO,
    successCount: NumberDTO,
    readCount: NumberDTO,
    clickCount: NumberDTO,
    actualPushAt: NumberDTO,
};
export const ContestNoticeHistoryHttp = TypeWrapper(ContestNoticeHistory);
