export declare const ContestHttp: import("../../http").TypeHTTP<{
    id: number;
    admins: string;
    title: string;
    status: "active" | "finish" | "block";
    coterieId: number;
    type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
    linkUrl: string;
    organizers: string;
    organizerLogo: string;
    organizerRemark: string;
    attachments: string;
    teamMemberLimit: number;
    description: string;
    questions: string;
    questionsMd: string;
    rules: string;
    rulesMd: string;
    reward: 0 | 1;
    rewardRemark: string;
    pv: number;
    roundCount: number;
    userCount: number;
    submissionCount: number;
    onBoardCount: number;
    leaderboard: string;
    teamCount: number;
    startedAt: number;
    expiredAt: number;
    registerStartedAt: number;
    registerExpiredAt: number;
    registerTimeFollows: boolean;
    hasVote: boolean;
    version: number;
    userId: number;
    username: string;
    createdAt: number;
    updatedAt: number;
    coterie: {
        id: number;
        name: string;
        avatar: string;
    };
    contestRounds: {
        round: number;
        roundName: string;
        contestId: number;
        submitType: "text" | "taiji" | "attachment" | "git";
        submitFormat: string;
        submitPath: string;
        submitRemark: string;
        submitRemarkMd: string;
        submitLimit: number;
        rankType: 2 | 1;
        submissionRankType: 2 | 1 | 3;
        rankLabels: {
            label: string;
            key: string;
            showInGrade: boolean;
            showInLeaderboard: boolean;
        }[];
        showLeaderboard: boolean;
        submitStartedAt: number;
        submitExpiredAt: number;
        submitTimeFollows: boolean;
        createdAt: number;
        showSubmitContent: boolean;
        whitelist: string;
        curWhitelist: boolean;
        status: "active" | "block";
        version: number;
    }[];
    contestLink?: {
        userId: number;
        username: string;
    } | undefined;
}>;
export declare const ContestList: {
    title: string;
    id: number;
    type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
    createdAt: number;
    updatedAt: number;
    description: string;
    status: "active" | "finish" | "block";
    organizers: string;
    reward: 0 | 1;
    expiredAt: number;
    linkUrl: string;
    organizerLogo: string;
    teamMemberLimit: number;
    userCount: number;
    onBoardCount: number;
};
export declare const ContestListHttp: import("../../http").TypeHTTP<{
    title: string;
    id: number;
    type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
    createdAt: number;
    updatedAt: number;
    description: string;
    status: "active" | "finish" | "block";
    organizers: string;
    reward: 0 | 1;
    expiredAt: number;
    linkUrl: string;
    organizerLogo: string;
    teamMemberLimit: number;
    userCount: number;
    onBoardCount: number;
}>;
export declare const ContestListWithBgStatsAndRank: {
    bgStats: {
        curBgNum: number;
        curOrgNum: number;
        maxBg: string;
    };
    contestRounds: {
        round: number;
        roundName: string;
    };
    ranks: {
        teamId: number;
        teamMembers: {
            user: {
                username: string;
                name: string;
                org: string;
            };
        };
        team: {
            name: string;
        };
    };
    title: string;
    id: number;
    pv: number;
    status: "active" | "finish" | "block";
    organizers: string;
    teamMemberLimit: number;
    userCount: number;
};
export declare const ContestListWithBgStatsAndRankHttp: import("../../http").TypeHTTP<{
    bgStats: {
        curBgNum: number;
        curOrgNum: number;
        maxBg: string;
    };
    contestRounds: {
        round: number;
        roundName: string;
    };
    ranks: {
        teamId: number;
        teamMembers: {
            user: {
                username: string;
                name: string;
                org: string;
            };
        };
        team: {
            name: string;
        };
    };
    title: string;
    id: number;
    pv: number;
    status: "active" | "finish" | "block";
    organizers: string;
    teamMemberLimit: number;
    userCount: number;
}>;
export declare const TeamBaseHttp: import("../../http").TypeHTTP<{
    id: number;
    name: string;
    description: string;
    status: ShadowRootMode;
    memberLimit: number;
    submitCount: number;
    createdAt: number;
    updatedAt: number;
}>;
export declare const TeamHttp: import("../../http").TypeHTTP<{
    teamMembers: {
        type: "leader" | "member";
        status: "full" | "apply";
        user: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
    }[];
    applyTeamMembers: {
        type: "leader" | "member";
        status: "full" | "apply";
        user: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
    }[];
    id: number;
    name: string;
    description: string;
    status: ShadowRootMode;
    memberLimit: number;
    submitCount: number;
    createdAt: number;
    updatedAt: number;
}>;
export declare const UserJoinedContest: {
    title: string;
    id: number;
    type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
    createdAt: number;
    updatedAt: number;
    description: string;
    status: "active" | "finish" | "block";
    organizers: string;
    reward: 0 | 1;
    expiredAt: number;
    linkUrl: string;
    organizerLogo: string;
    teamMemberLimit: number;
    userCount: number;
    onBoardCount: number;
    team: {
        id: number;
        name: string;
        description: string;
        status: ShadowRootMode;
        memberLimit: number;
        submitCount: number;
        createdAt: number;
        updatedAt: number;
    };
    teamRank: number;
    contestLink: {
        createdAt: number;
    };
};
export declare const UserJoinedContestHttp: import("../../http").TypeHTTP<{
    title: string;
    id: number;
    type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
    createdAt: number;
    updatedAt: number;
    description: string;
    status: "active" | "finish" | "block";
    organizers: string;
    reward: 0 | 1;
    expiredAt: number;
    linkUrl: string;
    organizerLogo: string;
    teamMemberLimit: number;
    userCount: number;
    onBoardCount: number;
    team: {
        id: number;
        name: string;
        description: string;
        status: ShadowRootMode;
        memberLimit: number;
        submitCount: number;
        createdAt: number;
        updatedAt: number;
    };
    teamRank: number;
    contestLink: {
        createdAt: number;
    };
}>;
export declare const ContestLink: {
    id: number;
    user: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
    team: {
        id: number;
        name: string;
    };
    createdAt: number;
    updatedAt: number;
};
export declare const ContestLinkHttp: import("../../http").TypeHTTP<{
    id: number;
    user: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
    team: {
        id: number;
        name: string;
    };
    createdAt: number;
    updatedAt: number;
}>;
export declare const SubmissionBaseHttp: import("../../http").TypeHTTP<{
    id: number;
    contestId: number;
    round: number;
    teamId: number;
    teamName: number;
    type: "default" | "sandbox" | "benchmark";
    status: "error" | "pending" | "ok" | "processing";
    bestResult: boolean;
    examType: "text" | "taiji" | "attachment" | "git";
    content: string;
    score: number;
    result: string;
    errorCode: number;
    errorMsg: string;
    errorMsgMd: string;
    userId: number;
    username: string;
    createdAt: number;
    updatedAt: number;
}>;
export declare const SubmissionRankHttp: import("../../http").TypeHTTP<{
    id: number;
    contestId: number;
    round: number;
    teamId: number;
    submissionId: number;
    submissionEntry: number;
    submissionType: "default" | "sandbox" | "benchmark";
    score: number;
    result: string;
    totalEntry: number;
    rank: number;
    rankDiff: number;
    rankPercentage: number;
    submitAt: number;
    team: {
        id: number;
        name: string;
        description: string;
        status: ShadowRootMode;
        memberLimit: number;
        submitCount: number;
        createdAt: number;
        updatedAt: number;
    };
    curStatus: boolean;
    teamMembers: {
        type: "leader" | "member";
        status: "full" | "apply";
        user: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
    }[];
}>;
export declare const ContestScoreHttp: import("../../http").TypeHTTP<{
    scoreSum: number;
    recordSum: number;
    user: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
    userBg: string;
    curStar: boolean;
}>;
export declare const ContestPlayerFeedbackHttp: import("../../http").TypeHTTP<{
    id: number;
    title: string;
    description: string;
    name: string;
    avatar: string;
    userId: number;
    username: string;
    createdAt: number;
    updatedAt: number;
}>;
export declare const ContestNoticeHistory: {
    id: number;
    content: string;
    username: string;
    pushCount: number;
    successCount: number;
    readCount: number;
    clickCount: number;
    actualPushAt: number;
};
export declare const ContestNoticeHistoryHttp: import("../../http").TypeHTTP<{
    id: number;
    content: string;
    username: string;
    pushCount: number;
    successCount: number;
    readCount: number;
    clickCount: number;
    actualPushAt: number;
}>;
