import { FullPaginationParams, SortWithPaginationParams, SearchWithPaginationParams, PaginationParams } from '../../types';
import { ContestType, ContestBasicForm, ContestSubmitSettingForm, SubmitForm, ContestVoteForm, ContestVoteSubmitForm, ContestRankType, ContestRankSortType, UserContestScoreStats, SeparatelyNoticeContent } from './interface';
interface ContestVersion {
    version?: number;
    forceUpdate?: boolean;
}
export declare const MkContestApi: {
    get: ((contestId: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }>>;
        };
    };
    updateBasic: ((contestId: number, params: ContestBasicForm & ContestVersion) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params: ContestBasicForm & ContestVersion) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }>>;
        };
    };
    updateRegisterTime: ((contestId: number, params: {
        startAt?: string;
        expiredAt?: string;
        timeFollows?: boolean;
    } & ContestVersion) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params: {
                startAt?: string;
                expiredAt?: string;
                timeFollows?: boolean;
            } & ContestVersion) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }>>;
        };
    };
    updateSubmit: ((contestId: number, round: number, params: ContestSubmitSettingForm & ContestVersion) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, params: ContestSubmitSettingForm & ContestVersion) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }>>;
        };
    };
    updateReward: ((contestId: number, params: {
        reward: 0 | 1;
        remark?: string;
    } & ContestVersion) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params: {
                reward: 0 | 1;
                remark?: string;
            } & ContestVersion) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }>>;
        };
    };
    updateQuestions: ((contestId: number, params: {
        questions: string;
    } & ContestVersion) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params: {
                questions: string;
            } & ContestVersion) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }>>;
        };
    };
    updateAttachment: ((contestId: number, params: {
        attachments: [
            {
                name: string;
                size: string;
                description: string;
                url: string;
            }
        ];
    } & ContestVersion) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params: {
                attachments: [
                    {
                        name: string;
                        size: string;
                        description: string;
                        url: string;
                    }
                ];
            } & ContestVersion) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }>>;
        };
    };
    updateRules: ((contestId: number, params: {
        rules: string;
    } & ContestVersion) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params: {
                rules: string;
            } & ContestVersion) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }>>;
        };
    };
    updateRank: ((contestId: number, round: number, params: {
        type: ContestRankSortType;
        rankLabels: string;
        showLeaderboard: boolean;
        submissionRankType: ContestRankType;
    } & ContestVersion) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, params: {
                type: ContestRankSortType;
                rankLabels: string;
                showLeaderboard: boolean;
                submissionRankType: ContestRankType;
            } & ContestVersion) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }>>;
        };
    };
    setSubmitContentVisible: ((contestId: number, round: number, params: {
        visible: boolean;
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, params: {
                visible: boolean;
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }>>;
        };
    };
    updateStatus: ((contestId: number, params: {
        status: 'block' | 'active' | 'finish';
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params: {
                status: 'block' | 'active' | 'finish';
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }>>;
        };
    };
    updateLeaderboard: ((contestId: number, params: {
        leaderboard: string;
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params: {
                leaderboard: string;
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }>>;
        };
    };
    bindCoterie: ((contestId: number, params: {
        coterieId: number;
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params: {
                coterieId: number;
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }>>;
        };
    };
    register: ((contestId: number) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    unregister: ((contestId: number) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    search: ((params?: (SortWithPaginationParams & {
        statsTotal: boolean;
        type: string;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        admins: string;
        title: string;
        status: "active" | "finish" | "block";
        coterieId: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        linkUrl: string;
        organizers: string;
        organizerLogo: string;
        organizerRemark: string;
        attachments: string;
        teamMemberLimit: number;
        description: string;
        questions: string;
        questionsMd: string;
        rules: string;
        rulesMd: string;
        reward: 0 | 1;
        rewardRemark: string;
        pv: number;
        roundCount: number;
        userCount: number;
        submissionCount: number;
        onBoardCount: number;
        leaderboard: string;
        teamCount: number;
        startedAt: number;
        expiredAt: number;
        registerStartedAt: number;
        registerExpiredAt: number;
        registerTimeFollows: boolean;
        hasVote: boolean;
        version: number;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
            contestId: number;
            submitType: "text" | "taiji" | "attachment" | "git";
            submitFormat: string;
            submitPath: string;
            submitRemark: string;
            submitRemarkMd: string;
            submitLimit: number;
            rankType: 2 | 1;
            submissionRankType: 2 | 1 | 3;
            rankLabels: {
                label: string;
                key: string;
                showInGrade: boolean;
                showInLeaderboard: boolean;
            }[];
            showLeaderboard: boolean;
            submitStartedAt: number;
            submitExpiredAt: number;
            submitTimeFollows: boolean;
            createdAt: number;
            showSubmitContent: boolean;
            whitelist: string;
            curWhitelist: boolean;
            status: "active" | "block";
            version: number;
        }[];
        contestLink?: {
            userId: number;
            username: string;
        } | undefined;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: (SortWithPaginationParams & {
                statsTotal: boolean;
                type: string;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                admins: string;
                title: string;
                status: "active" | "finish" | "block";
                coterieId: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                linkUrl: string;
                organizers: string;
                organizerLogo: string;
                organizerRemark: string;
                attachments: string;
                teamMemberLimit: number;
                description: string;
                questions: string;
                questionsMd: string;
                rules: string;
                rulesMd: string;
                reward: 0 | 1;
                rewardRemark: string;
                pv: number;
                roundCount: number;
                userCount: number;
                submissionCount: number;
                onBoardCount: number;
                leaderboard: string;
                teamCount: number;
                startedAt: number;
                expiredAt: number;
                registerStartedAt: number;
                registerExpiredAt: number;
                registerTimeFollows: boolean;
                hasVote: boolean;
                version: number;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                    contestId: number;
                    submitType: "text" | "taiji" | "attachment" | "git";
                    submitFormat: string;
                    submitPath: string;
                    submitRemark: string;
                    submitRemarkMd: string;
                    submitLimit: number;
                    rankType: 2 | 1;
                    submissionRankType: 2 | 1 | 3;
                    rankLabels: {
                        label: string;
                        key: string;
                        showInGrade: boolean;
                        showInLeaderboard: boolean;
                    }[];
                    showLeaderboard: boolean;
                    submitStartedAt: number;
                    submitExpiredAt: number;
                    submitTimeFollows: boolean;
                    createdAt: number;
                    showSubmitContent: boolean;
                    whitelist: string;
                    curWhitelist: boolean;
                    status: "active" | "block";
                    version: number;
                }[];
                contestLink?: {
                    userId: number;
                    username: string;
                } | undefined;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    searchByUser: (() => never) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => never;
        };
    };
    searchActive: ((params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        createdAt: number;
        updatedAt: number;
        description: string;
        status: "active" | "finish" | "block";
        organizers: string;
        reward: 0 | 1;
        expiredAt: number;
        linkUrl: string;
        organizerLogo: string;
        teamMemberLimit: number;
        userCount: number;
        onBoardCount: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                createdAt: number;
                updatedAt: number;
                description: string;
                status: "active" | "finish" | "block";
                organizers: string;
                reward: 0 | 1;
                expiredAt: number;
                linkUrl: string;
                organizerLogo: string;
                teamMemberLimit: number;
                userCount: number;
                onBoardCount: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    searchByType: ((params?: (FullPaginationParams & {
        type?: "ai_innovation" | "programming" | "innovation_app" | "tech_selection" | undefined;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        createdAt: number;
        updatedAt: number;
        description: string;
        status: "active" | "finish" | "block";
        organizers: string;
        reward: 0 | 1;
        expiredAt: number;
        linkUrl: string;
        organizerLogo: string;
        teamMemberLimit: number;
        userCount: number;
        onBoardCount: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: (FullPaginationParams & {
                type?: "ai_innovation" | "programming" | "innovation_app" | "tech_selection" | undefined;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                createdAt: number;
                updatedAt: number;
                description: string;
                status: "active" | "finish" | "block";
                organizers: string;
                reward: 0 | 1;
                expiredAt: number;
                linkUrl: string;
                organizerLogo: string;
                teamMemberLimit: number;
                userCount: number;
                onBoardCount: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    searchWithBgStats: ((params?: (FullPaginationParams & {
        type?: "ai_innovation" | "programming" | "innovation_app" | "tech_selection" | undefined;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        bgStats: {
            curBgNum: number;
            curOrgNum: number;
            maxBg: string;
        };
        contestRounds: {
            round: number;
            roundName: string;
        };
        ranks: {
            teamId: number;
            teamMembers: {
                user: {
                    username: string;
                    name: string;
                    org: string;
                };
            };
            team: {
                name: string;
            };
        };
        title: string;
        id: number;
        pv: number;
        status: "active" | "finish" | "block";
        organizers: string;
        teamMemberLimit: number;
        userCount: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: (FullPaginationParams & {
                type?: "ai_innovation" | "programming" | "innovation_app" | "tech_selection" | undefined;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                bgStats: {
                    curBgNum: number;
                    curOrgNum: number;
                    maxBg: string;
                };
                contestRounds: {
                    round: number;
                    roundName: string;
                };
                ranks: {
                    teamId: number;
                    teamMembers: {
                        user: {
                            username: string;
                            name: string;
                            org: string;
                        };
                    };
                    team: {
                        name: string;
                    };
                };
                title: string;
                id: number;
                pv: number;
                status: "active" | "finish" | "block";
                organizers: string;
                teamMemberLimit: number;
                userCount: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getJoined: ((username: string, params?: (PaginationParams & {
        type?: "ai_innovation" | "programming" | "innovation_app" | "tech_selection" | undefined;
        status?: ("active" | "finish" | "block")[] | undefined;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        createdAt: number;
        updatedAt: number;
        description: string;
        status: "active" | "finish" | "block";
        organizers: string;
        reward: 0 | 1;
        expiredAt: number;
        linkUrl: string;
        organizerLogo: string;
        teamMemberLimit: number;
        userCount: number;
        onBoardCount: number;
        team: {
            id: number;
            name: string;
            description: string;
            status: ShadowRootMode;
            memberLimit: number;
            submitCount: number;
            createdAt: number;
            updatedAt: number;
        };
        teamRank: number;
        contestLink: {
            createdAt: number;
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: (PaginationParams & {
                type?: "ai_innovation" | "programming" | "innovation_app" | "tech_selection" | undefined;
                status?: ("active" | "finish" | "block")[] | undefined;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                createdAt: number;
                updatedAt: number;
                description: string;
                status: "active" | "finish" | "block";
                organizers: string;
                reward: 0 | 1;
                expiredAt: number;
                linkUrl: string;
                organizerLogo: string;
                teamMemberLimit: number;
                userCount: number;
                onBoardCount: number;
                team: {
                    id: number;
                    name: string;
                    description: string;
                    status: ShadowRootMode;
                    memberLimit: number;
                    submitCount: number;
                    createdAt: number;
                    updatedAt: number;
                };
                teamRank: number;
                contestLink: {
                    createdAt: number;
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getOrganized: ((username: string, params?: (PaginationParams & {
        type?: "ai_innovation" | "programming" | "innovation_app" | "tech_selection" | undefined;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
        createdAt: number;
        updatedAt: number;
        description: string;
        status: "active" | "finish" | "block";
        organizers: string;
        reward: 0 | 1;
        expiredAt: number;
        linkUrl: string;
        organizerLogo: string;
        teamMemberLimit: number;
        userCount: number;
        onBoardCount: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: (PaginationParams & {
                type?: "ai_innovation" | "programming" | "innovation_app" | "tech_selection" | undefined;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                type: "ai_innovation" | "programming" | "innovation_app" | "tech_selection";
                createdAt: number;
                updatedAt: number;
                description: string;
                status: "active" | "finish" | "block";
                organizers: string;
                reward: 0 | 1;
                expiredAt: number;
                linkUrl: string;
                organizerLogo: string;
                teamMemberLimit: number;
                userCount: number;
                onBoardCount: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getResults: ((contestId: number, round: number, params?: (FullPaginationParams & {
        status: 'ok' | 'error' | 'pending' | 'processing';
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        contestId: number;
        round: number;
        teamId: number;
        teamName: number;
        type: "default" | "sandbox" | "benchmark";
        status: "error" | "pending" | "ok" | "processing";
        bestResult: boolean;
        examType: "text" | "taiji" | "attachment" | "git";
        content: string;
        score: number;
        result: string;
        errorCode: number;
        errorMsg: string;
        errorMsgMd: string;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, params?: (FullPaginationParams & {
                status: 'ok' | 'error' | 'pending' | 'processing';
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                contestId: number;
                round: number;
                teamId: number;
                teamName: number;
                type: "default" | "sandbox" | "benchmark";
                status: "error" | "pending" | "ok" | "processing";
                bestResult: boolean;
                examType: "text" | "taiji" | "attachment" | "git";
                content: string;
                score: number;
                result: string;
                errorCode: number;
                errorMsg: string;
                errorMsgMd: string;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getRegisterStats: ((contestId: number) => Promise<import("axios").AxiosResponse<{
        applyCount: number;
        teamCount: number;
        teamMemberTotal: number;
        notTeamMemberTotal: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number) => Promise<import("axios").AxiosResponse<{
                applyCount: number;
                teamCount: number;
                teamMemberTotal: number;
                notTeamMemberTotal: number;
            }>>;
        };
    };
    getSubmissionStats: ((contestId: number, round: number) => Promise<import("axios").AxiosResponse<{
        totalCount: number;
        validCount: number;
        teamCount: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number) => Promise<import("axios").AxiosResponse<{
                totalCount: number;
                validCount: number;
                teamCount: number;
            }>>;
        };
    };
    searchRegister: ((contestId: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        user: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        team: {
            id: number;
            name: string;
        };
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                user: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                team: {
                    id: number;
                    name: string;
                };
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    createTeam: ((contestId: number, params: {
        name: string;
        description?: string;
    }) => Promise<import("axios").AxiosResponse<{
        teamMembers: {
            type: "leader" | "member";
            status: "full" | "apply";
            user: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[];
        applyTeamMembers: {
            type: "leader" | "member";
            status: "full" | "apply";
            user: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[];
        id: number;
        name: string;
        description: string;
        status: ShadowRootMode;
        memberLimit: number;
        submitCount: number;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params: {
                name: string;
                description?: string;
            }) => Promise<import("axios").AxiosResponse<{
                teamMembers: {
                    type: "leader" | "member";
                    status: "full" | "apply";
                    user: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[];
                applyTeamMembers: {
                    type: "leader" | "member";
                    status: "full" | "apply";
                    user: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[];
                id: number;
                name: string;
                description: string;
                status: ShadowRootMode;
                memberLimit: number;
                submitCount: number;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    updateTeam: ((contestId: number, teamId: number, params: {
        name?: string;
        description?: string;
    }) => Promise<import("axios").AxiosResponse<{
        teamMembers: {
            type: "leader" | "member";
            status: "full" | "apply";
            user: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[];
        applyTeamMembers: {
            type: "leader" | "member";
            status: "full" | "apply";
            user: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[];
        id: number;
        name: string;
        description: string;
        status: ShadowRootMode;
        memberLimit: number;
        submitCount: number;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, teamId: number, params: {
                name?: string;
                description?: string;
            }) => Promise<import("axios").AxiosResponse<{
                teamMembers: {
                    type: "leader" | "member";
                    status: "full" | "apply";
                    user: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[];
                applyTeamMembers: {
                    type: "leader" | "member";
                    status: "full" | "apply";
                    user: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[];
                id: number;
                name: string;
                description: string;
                status: ShadowRootMode;
                memberLimit: number;
                submitCount: number;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    searchTeam: ((contestId: number, params?: (FullPaginationParams & {
        status?: "closed" | "open" | undefined;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        teamMembers: {
            type: "leader" | "member";
            status: "full" | "apply";
            user: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[];
        applyTeamMembers: {
            type: "leader" | "member";
            status: "full" | "apply";
            user: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[];
        id: number;
        name: string;
        description: string;
        status: ShadowRootMode;
        memberLimit: number;
        submitCount: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params?: (FullPaginationParams & {
                status?: "closed" | "open" | undefined;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                teamMembers: {
                    type: "leader" | "member";
                    status: "full" | "apply";
                    user: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[];
                applyTeamMembers: {
                    type: "leader" | "member";
                    status: "full" | "apply";
                    user: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[];
                id: number;
                name: string;
                description: string;
                status: ShadowRootMode;
                memberLimit: number;
                submitCount: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getTeamStats: ((id: number) => Promise<import("axios").AxiosResponse<{
        closed: number;
        open: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => Promise<import("axios").AxiosResponse<{
                closed: number;
                open: number;
            }>>;
        };
    };
    getCurrentUserTeam: ((contestId: number) => Promise<import("axios").AxiosResponse<{
        teamMembers: {
            type: "leader" | "member";
            status: "full" | "apply";
            user: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[];
        applyTeamMembers: {
            type: "leader" | "member";
            status: "full" | "apply";
            user: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[];
        id: number;
        name: string;
        description: string;
        status: ShadowRootMode;
        memberLimit: number;
        submitCount: number;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number) => Promise<import("axios").AxiosResponse<{
                teamMembers: {
                    type: "leader" | "member";
                    status: "full" | "apply";
                    user: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[];
                applyTeamMembers: {
                    type: "leader" | "member";
                    status: "full" | "apply";
                    user: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[];
                id: number;
                name: string;
                description: string;
                status: ShadowRootMode;
                memberLimit: number;
                submitCount: number;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    applyTeam: ((contestId: number, teamId: number) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, teamId: number) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    approveMember: ((contestId: number, teamId: number, userId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, teamId: number, userId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    rejectMember: ((contestId: number, teamId: number, userId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, teamId: number, userId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    removeMember: ((contestId: number, teamId: number, userId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, teamId: number, userId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    changeTeamLeader: ((contestId: number, teamId: number, userId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, teamId: number, userId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    exitTeam: ((contestId: number, teamId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, teamId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    deleteTeam: ((contestId: number, teamId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, teamId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    getContestRank: ((id: number, round: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        contestId: number;
        round: number;
        teamId: number;
        submissionId: number;
        submissionEntry: number;
        submissionType: "default" | "sandbox" | "benchmark";
        score: number;
        result: string;
        totalEntry: number;
        rank: number;
        rankDiff: number;
        rankPercentage: number;
        submitAt: number;
        team: {
            id: number;
            name: string;
            description: string;
            status: ShadowRootMode;
            memberLimit: number;
            submitCount: number;
            createdAt: number;
            updatedAt: number;
        };
        curStatus: boolean;
        teamMembers: {
            type: "leader" | "member";
            status: "full" | "apply";
            user: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[];
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, round: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                contestId: number;
                round: number;
                teamId: number;
                submissionId: number;
                submissionEntry: number;
                submissionType: "default" | "sandbox" | "benchmark";
                score: number;
                result: string;
                totalEntry: number;
                rank: number;
                rankDiff: number;
                rankPercentage: number;
                submitAt: number;
                team: {
                    id: number;
                    name: string;
                    description: string;
                    status: ShadowRootMode;
                    memberLimit: number;
                    submitCount: number;
                    createdAt: number;
                    updatedAt: number;
                };
                curStatus: boolean;
                teamMembers: {
                    type: "leader" | "member";
                    status: "full" | "apply";
                    user: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[];
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    exportContestRank: ((id: number, round: number) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, round: number) => void;
        };
    };
    submitResult: ((id: number, round: number, body: SubmitForm) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, round: number, body: SubmitForm) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    rejudgeResult: ((contestId: number, round: number, teamId: number, submitId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, teamId: number, submitId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    getTeamResults: ((contestId: number, round: number, teamId: number, params?: (FullPaginationParams & {
        startAtTime?: number | undefined;
        finishAtTime?: number | undefined;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        contestId: number;
        round: number;
        teamId: number;
        teamName: number;
        type: "default" | "sandbox" | "benchmark";
        status: "error" | "pending" | "ok" | "processing";
        bestResult: boolean;
        examType: "text" | "taiji" | "attachment" | "git";
        content: string;
        score: number;
        result: string;
        errorCode: number;
        errorMsg: string;
        errorMsgMd: string;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, teamId: number, params?: (FullPaginationParams & {
                startAtTime?: number | undefined;
                finishAtTime?: number | undefined;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                contestId: number;
                round: number;
                teamId: number;
                teamName: number;
                type: "default" | "sandbox" | "benchmark";
                status: "error" | "pending" | "ok" | "processing";
                bestResult: boolean;
                examType: "text" | "taiji" | "attachment" | "git";
                content: string;
                score: number;
                result: string;
                errorCode: number;
                errorMsg: string;
                errorMsgMd: string;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getTeamBestResult: ((contestId: number, round: number, teamId: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        contestId: number;
        round: number;
        teamId: number;
        teamName: number;
        type: "default" | "sandbox" | "benchmark";
        status: "error" | "pending" | "ok" | "processing";
        bestResult: boolean;
        examType: "text" | "taiji" | "attachment" | "git";
        content: string;
        score: number;
        result: string;
        errorCode: number;
        errorMsg: string;
        errorMsgMd: string;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, teamId: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                contestId: number;
                round: number;
                teamId: number;
                teamName: number;
                type: "default" | "sandbox" | "benchmark";
                status: "error" | "pending" | "ok" | "processing";
                bestResult: boolean;
                examType: "text" | "taiji" | "attachment" | "git";
                content: string;
                score: number;
                result: string;
                errorCode: number;
                errorMsg: string;
                errorMsgMd: string;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    updateTeamScore: ((contestId: number, round: number, teamId: number, submitId: number, body: {
        errorCode: 0 | -1;
        errorMsg?: string;
        result?: string;
        score: number;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, teamId: number, submitId: number, body: {
                errorCode: 0 | -1;
                errorMsg?: string;
                result?: string;
                score: number;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    getTeamBestRank: ((contestId: number, round: number, teamId: number) => Promise<import("axios").AxiosResponse<number>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, teamId: number) => Promise<import("axios").AxiosResponse<number>>;
        };
    };
    getSubmitCount: ((contestId: number, round: number, teamId: number) => Promise<import("axios").AxiosResponse<number>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, teamId: number) => Promise<import("axios").AxiosResponse<number>>;
        };
    };
    getSandboxResults: ((contestId: number, round: number, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        contestId: number;
        round: number;
        teamId: number;
        teamName: number;
        type: "default" | "sandbox" | "benchmark";
        status: "error" | "pending" | "ok" | "processing";
        bestResult: boolean;
        examType: "text" | "taiji" | "attachment" | "git";
        content: string;
        score: number;
        result: string;
        errorCode: number;
        errorMsg: string;
        errorMsgMd: string;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                contestId: number;
                round: number;
                teamId: number;
                teamName: number;
                type: "default" | "sandbox" | "benchmark";
                status: "error" | "pending" | "ok" | "processing";
                bestResult: boolean;
                examType: "text" | "taiji" | "attachment" | "git";
                content: string;
                score: number;
                result: string;
                errorCode: number;
                errorMsg: string;
                errorMsgMd: string;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    createSandbox: ((contestId: number, round: number, body: SubmitForm) => Promise<import("axios").AxiosResponse<{
        id: number;
        contestId: number;
        round: number;
        teamId: number;
        teamName: number;
        type: "default" | "sandbox" | "benchmark";
        status: "error" | "pending" | "ok" | "processing";
        bestResult: boolean;
        examType: "text" | "taiji" | "attachment" | "git";
        content: string;
        score: number;
        result: string;
        errorCode: number;
        errorMsg: string;
        errorMsgMd: string;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, body: SubmitForm) => Promise<import("axios").AxiosResponse<{
                id: number;
                contestId: number;
                round: number;
                teamId: number;
                teamName: number;
                type: "default" | "sandbox" | "benchmark";
                status: "error" | "pending" | "ok" | "processing";
                bestResult: boolean;
                examType: "text" | "taiji" | "attachment" | "git";
                content: string;
                score: number;
                result: string;
                errorCode: number;
                errorMsg: string;
                errorMsgMd: string;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    setBenchmark: ((contestId: number, round: number, submissionId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, submissionId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    delBenchmark: ((contestId: number, round: number, submissionId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, submissionId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    getBenchmarkRank: ((contestId: number, round: number) => Promise<import("axios").AxiosResponse<number>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number) => Promise<import("axios").AxiosResponse<number>>;
        };
    };
    exportRegisterData: ((contestId: number) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number) => void;
        };
    };
    exportTeamData: ((contestId: number) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number) => void;
        };
    };
    exportResultData: ((contestId: number, round: number) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number) => void;
        };
    };
    createVote: ((contestId: number, body: ContestVoteForm) => Promise<import("axios").AxiosResponse<{
        id: number;
        title: string;
        type: string;
        totalCount: number;
        totalUserCount: number;
        curUserVote: boolean;
        voteItems: {
            id: number;
            voteId: number;
            content: string;
            voteCount: number;
            curUserVote: boolean;
            voteUsernames: string;
        }[];
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, body: ContestVoteForm) => Promise<import("axios").AxiosResponse<{
                id: number;
                title: string;
                type: string;
                totalCount: number;
                totalUserCount: number;
                curUserVote: boolean;
                voteItems: {
                    id: number;
                    voteId: number;
                    content: string;
                    voteCount: number;
                    curUserVote: boolean;
                    voteUsernames: string;
                }[];
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getVote: ((contestId: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        title: string;
        type: string;
        totalCount: number;
        totalUserCount: number;
        curUserVote: boolean;
        voteItems: {
            id: number;
            voteId: number;
            content: string;
            voteCount: number;
            curUserVote: boolean;
            voteUsernames: string;
        }[];
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                title: string;
                type: string;
                totalCount: number;
                totalUserCount: number;
                curUserVote: boolean;
                voteItems: {
                    id: number;
                    voteId: number;
                    content: string;
                    voteCount: number;
                    curUserVote: boolean;
                    voteUsernames: string;
                }[];
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    submitVote: ((contestId: number, body: ContestVoteSubmitForm) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, body: ContestVoteSubmitForm) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    getVoteRecords: ((contestId: number, params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        username: string;
        org: string;
        voteItemRecordList: {
            voteId: number;
            content: string;
        }[];
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                username: string;
                org: string;
                voteItemRecordList: {
                    voteId: number;
                    content: string;
                }[];
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    exportVoteRecordsData: ((contestId: number) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number) => void;
        };
    };
    getArticles: ((contestId: number, params?: (PaginationParams & {
        userIds: number[];
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
        detailMd: string;
        detail: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params?: (PaginationParams & {
                userIds: number[];
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
                detailMd: string;
                detail: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getContestScoreRank: ((params?: (SortWithPaginationParams & {
        contestTypes: ContestType[];
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        scoreSum: number;
        recordSum: number;
        user: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        userBg: string;
        curStar: boolean; /**
         * 更新比赛状态
         *
         * @param {number} contestId
         * @param {({
         *     status: 'block' | 'active' | 'finish'
         *   })} params
         * @returns
         */
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: (SortWithPaginationParams & {
                contestTypes: ContestType[];
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                scoreSum: number;
                recordSum: number;
                user: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                userBg: string;
                curStar: boolean; /**
                 * 更新比赛状态
                 *
                 * @param {number} contestId
                 * @param {({
                 *     status: 'block' | 'active' | 'finish'
                 *   })} params
                 * @returns
                 */
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getContestScoreBgRank: ((params?: {
        sort: String;
        bgs?: string[] | undefined;
    } | undefined) => Promise<import("axios").AxiosResponse<{
        scoreSum: number;
        recordSum: number;
        user: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        userBg: string;
        curStar: boolean; /**
         * 更新比赛状态
         *
         * @param {number} contestId
         * @param {({
         *     status: 'block' | 'active' | 'finish'
         *   })} params
         * @returns
         */
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: {
                sort: String;
                bgs?: string[] | undefined;
            } | undefined) => Promise<import("axios").AxiosResponse<{
                scoreSum: number;
                recordSum: number;
                user: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                userBg: string;
                curStar: boolean; /**
                 * 更新比赛状态
                 *
                 * @param {number} contestId
                 * @param {({
                 *     status: 'block' | 'active' | 'finish'
                 *   })} params
                 * @returns
                 */
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getContestScoreStats: (() => Promise<import("axios").AxiosResponse<{
        contestSum: number;
        userSum: number;
        onBoardSum: number;
        submissionSum: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                contestSum: number;
                userSum: number;
                onBoardSum: number;
                submissionSum: number;
            }>>;
        };
    };
    getUserContestScoreStats: ((username: string) => Promise<import("axios").AxiosResponse<{
        all: UserContestScoreStats;
        security: UserContestScoreStats;
        ai_innovation: UserContestScoreStats;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<{
                all: UserContestScoreStats;
                security: UserContestScoreStats;
                ai_innovation: UserContestScoreStats;
            }>>;
        };
    };
    getPlayerFeedback: ((params: FullPaginationParams) => Promise<import("axios").AxiosResponse<{
        id: number;
        title: string;
        description: string;
        name: string;
        avatar: string;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: FullPaginationParams) => Promise<import("axios").AxiosResponse<{
                id: number;
                title: string;
                description: string;
                name: string;
                avatar: string;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getContestVersion: ((contestId: number) => Promise<import("axios").AxiosResponse<number>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number) => Promise<import("axios").AxiosResponse<number>>;
        };
    };
    getContestRoundVersion: ((contestId: number, round: number) => Promise<import("axios").AxiosResponse<number>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number) => Promise<import("axios").AxiosResponse<number>>;
        };
    };
    sendNotice: ((contestId: number, body: {
        all?: boolean;
        receiver?: string[];
        content: string;
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, body: {
                all?: boolean;
                receiver?: string[];
                content: string;
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    previewSeparatelyNotice: ((contestId: number, file: File) => Promise<import("axios").AxiosResponse<SeparatelyNoticeContent>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, file: File) => Promise<import("axios").AxiosResponse<SeparatelyNoticeContent>>;
        };
    };
    sendSeparatelyNotice: ((contestId: number, body: SeparatelyNoticeContent) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, body: SeparatelyNoticeContent) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    getNoticeHistory: ((contestId: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        content: string;
        username: string;
        pushCount: number;
        successCount: number;
        readCount: number;
        clickCount: number;
        actualPushAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                content: string;
                username: string;
                pushCount: number;
                successCount: number;
                readCount: number;
                clickCount: number;
                actualPushAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    searchUserRankIndex: ((contestId: number, round: number, params: {
        username: string;
    }) => Promise<import("axios").AxiosResponse<{
        benchmarkRank: number;
        userRank: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (contestId: number, round: number, params: {
                username: string;
            }) => Promise<import("axios").AxiosResponse<{
                benchmarkRank: number;
                userRank: number;
            }>>;
        };
    };
};
export {};
