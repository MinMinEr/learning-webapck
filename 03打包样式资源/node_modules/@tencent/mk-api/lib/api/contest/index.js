var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Http } from '../../http';
import { ContestHttp, SubmissionBaseHttp, TeamHttp, ContestLinkHttp, SubmissionRankHttp, ContestListHttp, ContestListWithBgStatsAndRankHttp, UserJoinedContestHttp, ContestScoreHttp, ContestPlayerFeedbackHttp, ContestNoticeHistoryHttp, } from './types';
import { HttpBaseConfig, injectDefaultParams } from '../../base';
import { createDownload } from '../../utils';
import { VoteHttp, VoteRecordHttp } from '../../define/vote';
import { ArticleListWithDetailHTTP } from '../article/types';
import { injectAPIGroup } from '../../inject';
/**
 * 从比赛接口参数中获取version和forceUpdate
 *
 * @param {ContestVersion} arg
 * @returns
 */
function getContestVersionParams(arg) {
    const { version, forceUpdate } = arg, rst = __rest(arg, ["version", "forceUpdate"]);
    return {
        versionCtrl: {
            version,
            force_update: forceUpdate,
        },
        rst,
    };
}
export const MkContestApi = injectAPIGroup({
    get(contestId) {
        return ContestHttp.get(`/contest/${contestId}`);
    },
    /**
     * 更新比赛基础信息
     *
     * @param {number} contestId
     * @param {ContestBasicForm} body
     * @returns
     */
    updateBasic(contestId, params) {
        const { versionCtrl, rst } = getContestVersionParams(params);
        return ContestHttp.put(`/contest/${contestId}`, rst, {
            params: versionCtrl,
        });
    },
    /**
     * 更新比赛报名时间
     * @param {number} contestId
     * @param {{ startAt: string, expiredAt: string }} body
     * @returns
     */
    updateRegisterTime(contestId, params) {
        const { versionCtrl, rst } = getContestVersionParams(params);
        return ContestHttp.put(`/contest/${contestId}/register/time`, {
            registerStartedAt: rst.startAt,
            registerExpiredAt: rst.expiredAt,
            registerTimeFollows: rst.timeFollows,
        }, {
            params: versionCtrl,
        });
    },
    /**
     * 更新比赛提交类型
     *
     * @param {number} contestId
     * @param {ContestSubmitSettingForm} params
     * @returns
     */
    updateSubmit(contestId, round, params) {
        const { versionCtrl, rst } = getContestVersionParams(params);
        const { usernames } = rst, param = __rest(rst, ["usernames"]);
        return ContestHttp.put(`/contest/${contestId}/round/${round}/submit_policy`, {
            usernames,
        }, {
            params: Object.assign(Object.assign({}, versionCtrl), param),
        });
    },
    /**
     * 更新比赛奖品设置
     *
     * @param {number} contestId
     * @param {({
     *       reward: 0 | 1 // 是否有奖励
     *       remark?: string
     *     })} params
     * @returns
     */
    updateReward(contestId, params) {
        const { versionCtrl, rst } = getContestVersionParams(params);
        return ContestHttp.put(`/contest/${contestId}/reward`, null, {
            params: Object.assign({ reward_remark: rst.remark, reward: rst.reward }, versionCtrl),
        });
    },
    /**
     * 更新比赛赛题
     *
     * @param {number} contestId
     * @param {number} contestId
     * @param {{
     *     questions: string
     *   }} body
     * @returns
     */
    updateQuestions(contestId, params) {
        const { versionCtrl, rst: body } = getContestVersionParams(params);
        return ContestHttp.put(`/contest/${contestId}/questions`, body, {
            params: versionCtrl,
        });
    },
    /**
     * 更新比赛数据
     *
     * @param {number} contestId
     * @param {{
     *     attachments: [{ name: string, size: string, description: string, url: string}]
     *   }} body
     * @returns
     */
    updateAttachment(contestId, params) {
        const { versionCtrl, rst: body } = getContestVersionParams(params);
        return ContestHttp.put(`/contest/${contestId}/attachments`, {
            attachments: JSON.stringify(body.attachments),
        }, {
            params: versionCtrl,
        });
    },
    /**
     * 更新比赛赛制
     *
     * @param {number} contestId
     * @param {{
     *     rules: string
     *   }} body
     * @returns
     */
    updateRules(contestId, params) {
        const { versionCtrl, rst: body } = getContestVersionParams(params);
        return ContestHttp.put(`/contest/${contestId}/rules`, body, {
            params: versionCtrl,
        });
    },
    /**
     * 更新比赛排序顺序
     *
     * @param {number} contestId
     * @param {number} round
     * @param {{
     *       type: ContestRankSortType // 1: asc 2: desc,
     *       rankLabels: string
     *       showLeaderboard: boolean
     *       submissionRankType: ContestRankType
     *     }} params
     * @returns
     */
    updateRank(contestId, round, params) {
        const { versionCtrl, rst } = getContestVersionParams(params);
        return ContestHttp.put(`/contest/${contestId}/round/${round}/rank`, null, {
            params: Object.assign({ rank_type: rst.type, rank_labels: rst.rankLabels, show_leaderboard: rst.showLeaderboard, submission_rank_type: rst.submissionRankType }, versionCtrl),
        });
    },
    /**
     * 设置是否展示排行榜中用户提交的内容
     *
     * @param {number} contestId
     * @param {number} round
     * @param {{
     *       visible: boolean
     *     }} params
     * @returns
     */
    setSubmitContentVisible(contestId, round, params) {
        return ContestHttp.put(`/contest/${contestId}/round/${round}/show_submit_content`, null, {
            params: {
                show_submit_content: params.visible,
            },
        });
    },
    /**
     * 更新比赛状态
     *
     * @param {number} contestId
     * @param {({
     *     status: 'block' | 'active' | 'finish'
     *   })} params
     * @returns
     */
    updateStatus(contestId, params) {
        return ContestHttp.put(`/contest/${contestId}/status`, null, {
            params,
        });
    },
    /**
     * 更新自定义比赛榜单
     *
     * @param {number} contestId
     * @param {{
     *       leaderboard: string 比赛榜单图片地址
     *     }} params
     * @returns
     */
    updateLeaderboard(contestId, params) {
        return ContestHttp.put(`/contest/${contestId}/leaderboard`, null, {
            params,
        });
    },
    /**
     * 绑定比赛圈子
     *
     * @param {number} contestId
     * @param {{ coterieId: number }} params
     * @returns
     */
    bindCoterie(contestId, params) {
        return ContestHttp.put(`/contest/${contestId}/coterie/bind`, null, {
            params: {
                coterie_id: params.coterieId,
            },
        });
    },
    /**
     * 报名比赛
     *
     * @param {number} contestId
     * @returns
     */
    register(contestId) {
        return Http.put(`/contest/${contestId}/register`);
    },
    /**
     * 取消报名比赛
     *
     * @param {number} contestId
     * @returns
     */
    unregister(contestId) {
        return Http.put(`/contest/${contestId}/unregister`);
    },
    /**
     * 获取比赛列表
     * @param {(SortWithPaginationParams & {
     *       statsTotal: boolean
     *       type: string
     *     })} [params]
     * @returns
     */
    search(params) {
        return ContestHttp.list().get('/contests/search', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取用户参加的比赛
     *
     * @param {FullPaginationParams} [params]
     * @returns
     */
    searchByUser() {
        throw new Error('已废弃, 请使用MkContestApi.getJoined和MkContestApi.getOrganized');
        // return UserJoinedContestHttp.get('/contests/search/user');
    },
    /**
     * 获取正在进行中的比赛, 但过滤掉用户参加的
     *
     * @param {FullPaginationParams} [params]
     * @returns
     */
    searchActive(params) {
        return ContestListHttp.list().get('/contests/search/active', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 根据分类获取比赛列表, 不过滤用户参加的
     *
     * @param {(FullPaginationParams & { type?: string })} [params]
     * @returns
     */
    searchByType(params) {
        return ContestListHttp.list().get('/contests/search/type', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取移动端比赛列表（附带组织架构参赛信息）
     *
     * @param {(FullPaginationParams & { type?: ContestType })} [params]
     * @returns
     */
    searchWithBgStats(params) {
        return ContestListWithBgStatsAndRankHttp.list().get('/contests/mobile/search', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 仅获取我加入的比赛
     *
     * @param {(FullPaginationParams & { type?: ContestType, status?: ContestStatus[] })} [params]
     * @returns
     */
    getJoined(username, params) {
        return UserJoinedContestHttp.list().get(`/contests/search/${username}/joined`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取我组织的比赛
     *
     * @param {(PaginationParams & { type?: ContestType })} [params]
     * @returns
     */
    getOrganized(username, params) {
        return ContestListHttp.list().get(`/contests/search/${username}/organized`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取所有提交结果
     *
     * @param {number} contestId
     * @param {(FullPaginationParams & {
     *     status: 'ok' | 'error' | 'pending' | 'processing' // 结果状态
     *   })} [params]
     * @returns
     */
    getResults(contestId, round, params) {
        return SubmissionBaseHttp.list().get(`/contest/${contestId}/round/${round}/submissions`, {
            params,
        });
    },
    /**
     * 获取比赛人员报名统计信息
     *
     * @param {number} contestId
     * @returns
     */
    getRegisterStats(contestId) {
        return Http.get(`/contest/${contestId}/register/stats`);
    },
    /**
     * 获取提交统计信息
     *
     * @param {number} contestId
     * @param {number} round
     * @returns
     */
    getSubmissionStats(contestId, round) {
        return Http.get(`/contest/${contestId}/round/${round}/submissions/stats`);
    },
    /**
     * 获取报名人员信息
     *
     * @param {number} contestId
     * @param {FullPaginationParams} [params]
     * @returns
     */
    searchRegister(contestId, params) {
        return ContestLinkHttp.list().get(`/contest/${contestId}/register/information`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 创建比赛队伍
     * @param {number} contestId
     * @param {{
     *       name: string,
     *       description?: string
     *     }} params
     * @returns
     */
    createTeam(contestId, params) {
        return TeamHttp.post(`/contest/${contestId}/team/create`, null, {
            params,
        });
    },
    /**
     * 修改队伍信息
     * 不传name说明不修改队伍名
     * @param {number} contestId
     * @param {number} teamId
     * @param {{
     *       name?: string,
     *       description?: string
     *     }} params
     * @returns
     */
    updateTeam(contestId, teamId, params) {
        return TeamHttp.post(`/contest/${contestId}/team/${teamId}/name`, null, {
            params,
        });
    },
    /**
     * 搜索已报名团队列表
     *
     * @param {number} contestId
     * @param {(FullPaginationParams & {
     *     status?: 'open' | 'closed'
     *   })} [params]
     * @returns
     */
    searchTeam(contestId, params) {
        return TeamHttp.list().get(`/contest/${contestId}/teams`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取当前组队信息
     * closed为已完成组队数量
     * open为未完成组队数量
     *
     * @param {number} id
     * @returns
     */
    getTeamStats(id) {
        return Http.get(`/contest/${id}/teams/stats`);
    },
    /**
     * 当前用户团队信息
     *
     * @param {number} contestId
     * @returns
     */
    getCurrentUserTeam(contestId) {
        return TeamHttp.get(`/contest/${contestId}/team/user_join`);
    },
    /**
     * 申请加入比赛队伍
     *
     * @param {number} contestId
     * @param {number} teamId
     * @returns
     */
    applyTeam(contestId, teamId) {
        return Http.post(`/contest/${contestId}/team/${teamId}/member/apply`);
    },
    /**
     * 同意队伍加入申请
     *
     * @param {number} contestId
     * @param {number} teamId
     * @param {number} userId
     * @returns
     */
    approveMember(contestId, teamId, userId) {
        return Http.post(`/contest/${contestId}/team/${teamId}/member/${userId}/approve`);
    },
    /**
     * 拒绝队伍加入申请
     *
     * @param {number} contestId
     * @param {number} teamId
     * @param {number} userId
     * @returns
     */
    rejectMember(contestId, teamId, userId) {
        return Http.post(`/contest/${contestId}/team/${teamId}/member/${userId}/reject`);
    },
    /**
     * 移除成员
     *
     * @param {number} contestId
     * @param {number} teamId
     * @param {number} userId
     * @returns
     */
    removeMember(contestId, teamId, userId) {
        return Http.post(`/contest/${contestId}/team/${teamId}/member/${userId}/remove`);
    },
    /**
     * 移交队长
     *
     * @param {number} contestId
     * @param {number} teamId
     * @param {number} userId
     * @returns
     */
    changeTeamLeader(contestId, teamId, userId) {
        return Http.post(`/contest/${contestId}/team/${teamId}/member/${userId}/handover`);
    },
    /**
     * 退出比赛队伍
     *
     * @param {number} contestId
     * @param {number} teamId
     * @returns
     */
    exitTeam(contestId, teamId) {
        return Http.post(`/contest/${contestId}/team/${teamId}/member/exit`);
    },
    /**
     * 解散队伍
     *
     * @param {number} contestId
     * @param {number} teamId
     * @returns
     */
    deleteTeam(contestId, teamId) {
        return Http.delete(`/contest/${contestId}/team/${teamId}`);
    },
    /**
     * 获取比赛排行榜
     *
     * @param {number} id
     * @param {number} round
     * @param {FullPaginationParams} [params]
     * @returns
     */
    getContestRank(id, round, params) {
        return SubmissionRankHttp.list().get(`/contest/${id}/round/${round}/leaderboard`, { params });
    },
    /**
     * 导出比赛排行榜
     *
     * @param {number} id
     * @param {number} round
     * @returns
     */
    exportContestRank(id, round) {
        return createDownload(`${HttpBaseConfig.API_BASE}/contest/${id}/round/${round}/leaderboard/excel`);
    },
    /**
     * 提交参赛结果
     * @param {number} id
     * @param {number} round
     * @param {SubmitForm} body
     * @returns
     */
    submitResult(id, round, body) {
        return Http.post(`/contest/${id}/round/${round}/submission`, body);
    },
    /**
     * 重新评测提交结果
     *
     * @param {number} contestId 比赛id
     * @param {number} round 比赛场次
     * @param {number} teamId 队伍id
     * @param {number} submitId 提交id
     * @returns
     */
    rejudgeResult(contestId, round, teamId, submitId) {
        return Http.post(`/contest/${contestId}/round/${round}/team/${teamId}/submission/${submitId}/rejudge`);
    },
    /**
     *
     * 获取团队的提交历史
     * @param {number} contestId 比赛ID
     * @param {number} round
     * @param {number} teamId 团队ID
     * @param {FullPaginationParams} params
     * @returns
     */
    getTeamResults(contestId, round, teamId, params) {
        return SubmissionBaseHttp.list().get(`/contest/${contestId}/round/${round}/team/${teamId}/submissions`, { params });
    },
    /**
     * 获取团队最佳成绩对应的结果
     *
     * @param {number} contestId
     * @param {number} round
     * @param {number} teamId
     * @returns
     */
    getTeamBestResult(contestId, round, teamId) {
        return SubmissionBaseHttp.get(`/contest/${contestId}/round/${round}/team/${teamId}/best_submission`);
    },
    /**
     * 更新比赛结果分数
     *
     * @param {number} contestId
     * @param {number} round
     * @param {number} teamId
     * @param {number} submitId
     * @param {({
     *     errorCode: 0 | -1,
     *     errorMsg?: string,
     *     result?: string,
     *     score: number
     *   })} body
     * @returns
     */
    updateTeamScore(contestId, round, teamId, submitId, body) {
        return Http.post(`/contest/${contestId}/round/${round}/team/${teamId}/submission/${submitId}/score`, body);
    },
    /**
     * 获取团队最佳排行
     *
     * @description
     * @param {number} contestId
     * @param {number} teamId
     * @returns
     */
    getTeamBestRank(contestId, round, teamId) {
        console.warn('[MkApi] MkContestApi.getTeamBestRank 即将废弃');
        return Http.get(`/contest/${contestId}/round/${round}/team/${teamId}/submissions/rank`);
    },
    /**
     * 获单当日提交总次数
     *
     * @param {number} contestId
     * @param {number} round
     * @param {number} teamId
     * @returns
     */
    getSubmitCount(contestId, round, teamId) {
        return Http.get(`/contest/${contestId}/round/${round}/team/${teamId}/submissions/submit_times`);
    },
    /**
     * 获取sandbox列表
     *
     * @param {number} contestId
     * @param {number} round
     * @param {SortWithPaginationParams} [params]
     * @returns
     */
    getSandboxResults(contestId, round, params) {
        return SubmissionBaseHttp.list().get(`/contest/${contestId}/round/${round}/sandbox/submissions`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 创建sandbox测试
     *
     * @param {number} contestId
     * @param {number} round
     * @param {SubmitForm} body
     * @returns
     */
    createSandbox(contestId, round, body) {
        return SubmissionBaseHttp.post(`/contest/${contestId}/round/${round}/sandbox/submission`, body);
    },
    /**
     * 将sandbox设为基准
     *
     * @param {number} contestId
     * @param {number} round
     * @param {number} submissionId
     * @returns
     */
    setBenchmark(contestId, round, submissionId) {
        return Http.post(`/contest/${contestId}/round/${round}/sandbox/submission/${submissionId}/benchmark`);
    },
    /**
     * 需求基准设置
     *
     * @param {number} contestId
     * @param {number} round
     * @param {number} submissionId
     * @returns
     */
    delBenchmark(contestId, round, submissionId) {
        return Http.delete(`/contest/${contestId}/round/${round}/sandbox/submission/${submissionId}/benchmark`);
    },
    /**
     * 获取benchmark的排行
     * @deprecated
     * @param {number} contestId
     * @param {number} round
     * @returns
     */
    getBenchmarkRank(contestId, round) {
        console.warn('[MKApi] MkContestApi.getBenchmarkRank 即将废弃');
        return Http.get(`/contest/${contestId}/round/${round}/benchmark/rank`);
    },
    /**
     * 导出报名信息数据
     *
     * @param {number} contestId
     * @returns
     */
    exportRegisterData(contestId) {
        return createDownload(`${HttpBaseConfig.API_BASE}/contest/${contestId}/register/information/excel`);
    },
    /**
     * 导出报名信息数据
     *
     * @param {number} contestId
     * @returns
     */
    exportTeamData(contestId) {
        return createDownload(`${HttpBaseConfig.API_BASE}/contest/${contestId}/teams/excel`);
    },
    /**
     * 导出全部结果数据
     *
     * @param {number} contestId
     * @param {number} round
     * @returns
     */
    exportResultData(contestId, round) {
        return createDownload(`${HttpBaseConfig.API_BASE}/contest/${contestId}/round/${round}/submissions/excel`);
    },
    /**
     * 创建投票
     *
     * @param {number} contestId
     * @param {ContestVoteForm} body
     * @returns
     */
    createVote(contestId, body) {
        return VoteHttp.list().post(`/contest/${contestId}/register/vote`, {
            voteCreateFormList: body.voteFormList,
        });
    },
    /**
     * 获取投票
     *
     * @param {number} contestId
     * @returns
     */
    getVote(contestId) {
        return VoteHttp.list().get(`/contest/${contestId}/register/vote`);
    },
    /**
     * 提交问卷投票
     */
    submitVote(contestId, body) {
        return Http.post(`/contest/${contestId}/vote`, body);
    },
    /**
     * 获取问卷数据
     *
     * @param {number} contestId
     * @param {SearchWithPaginationParams} [params]
     * @returns
     */
    getVoteRecords(contestId, params) {
        return VoteRecordHttp.list().get(`/contest/${contestId}/register/vote/records`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 导出问卷数据
     *
     * @param {number} contestId
     * @returns
     */
    exportVoteRecordsData(contestId) {
        return createDownload(`${HttpBaseConfig.API_BASE}/contest/${contestId}/register/vote/records/excel`);
    },
    /**
     * 获取比赛解题报告
     *
     * @param {number} contestId
     * @returns
     */
    getArticles(contestId, params) {
        const _a = params || {}, { userIds } = _a, rst = __rest(_a, ["userIds"]);
        return ArticleListWithDetailHTTP.list().get(`/articles/contest/${contestId}`, {
            params: injectDefaultParams(Object.assign(Object.assign({}, rst), { user_ids: userIds })),
        });
    },
    /**
     * 比赛积分榜查询接口
     *
     * @param {(SortWithPaginationParams & { contestType: ContestType })} [params]
     * @returns
     */
    getContestScoreRank(params) {
        const _a = params || {}, { contestTypes } = _a, rst = __rest(_a, ["contestTypes"]);
        return ContestScoreHttp.list().get('/contests/points/leaderboard/contest_type', {
            params: injectDefaultParams(Object.assign(Object.assign({}, rst), { contest_types: contestTypes })),
        });
    },
    /**
     * 比赛积分榜bg排行
     *
     * @param {{ sort: String, bgs?: string[]}} [params]
     * @returns
     */
    getContestScoreBgRank(params) {
        return ContestScoreHttp.list().get('/contests/points/leaderboard/bg', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取比赛统计信息
     *
     * @returns
     */
    getContestScoreStats() {
        return Http.get('/contests/stats');
    },
    /**
     * 获取用户在比赛积分榜中的各榜单排名和积分
     *
     * @param {string} username
     * @returns
     */
    getUserContestScoreStats(username) {
        return Http.get(`/contests/points/leaderboard/${username}`);
    },
    /**
     * 获取获奖感言
     * 随机排序
     *
     * @param {FullPaginationParams} params
     * @returns
     */
    getPlayerFeedback(params) {
        return ContestPlayerFeedbackHttp.list().get('/acceptance/speech/search/random_sort', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取比赛最新版本号
     *
     * @param {number} contestId
     * @returns
     */
    getContestVersion(contestId) {
        return Http.get(`/contest/${contestId}/version`);
    },
    /**
     * 获取比赛场次最新版本号
     *
     * @param {number} contestId
     * @param {number} round
     * @returns
     */
    getContestRoundVersion(contestId, round) {
        return Http.get(`/contest/${contestId}/round/${round}/version`);
    },
    /**
     * 发送比赛站内信
     *
     * @param {number} contestId
     * @param {{
      * all?: boolean, 是否所有人
      * receiver?: string[], 指定收件人
      * content: string 内容
     * }} body
     * @returns
     */
    sendNotice(contestId, body) {
        const { all, receiver, content } = body;
        return Http.post(`/contest/${contestId}/msg_records/send`, {
            sendAll: all || false,
            receiverList: receiver || [],
            content,
        });
    },
    /**
     * 预览自定义内容excel文件
     *
     * @param {number} contestId
     * @param {File} file
     * @returns
     */
    previewSeparatelyNotice(contestId, file) {
        const formData = new FormData();
        formData.append('file', file);
        return Http.post(`/contest/${contestId}/msg_records/send/separately/excel_md`, formData, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
        });
    },
    /**
     * 发送自定义内容
     *
     * @param {number} contestId
     * @param {File} file
     * @returns
     */
    sendSeparatelyNotice(contestId, body) {
        return Http.post(`/contest/${contestId}/msg_records/send/separately`, body);
    },
    /**
     * 获取发送历史
     *
     * @param {number} contestId
     * @param {FullPaginationParams} [params]
     * @returns
     */
    getNoticeHistory(contestId, params) {
        return ContestNoticeHistoryHttp.list().get(`/contest/${contestId}/msg_records/search`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 查询用户排名以及benchmark排名
     * 用于计算用户在排行榜中的顺序
     * @param {number} contestId
     * @param {number} round
     * @param {{ username: string }} params
     * @returns
     */
    searchUserRankIndex(contestId, round, params) {
        return Http.get(`/contest/${contestId}/round/${round}/rank/search`, {
            params,
        });
    },
});
