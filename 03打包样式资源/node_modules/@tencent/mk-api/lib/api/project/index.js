var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Http } from '../../http';
import { injectDefaultParams } from '../../base';
import { ProjectHttp, IssuesHttp, ProjectShortHttp } from './types';
import { injectAPIGroup } from '../../inject';
export const MkProjectsApi = injectAPIGroup({
    /**
     * 项目搜索
     * tagId: -1为根据已订阅标签搜索, 空为全部搜索
     * @deprecated
     * @param {({ tagId: number } & FullPaginationParams)} [params]
     * @returns
     */
    search(params) {
        const _a = params || {}, { tagIds } = _a, rst = __rest(_a, ["tagIds"]);
        console.error('开源广场即将下线, 如有调用相关API请尽快删除');
        return ProjectHttp.list().get('/projects', {
            params: injectDefaultParams(Object.assign(Object.assign({ sort: 'last_activity_at desc' }, rst), { tag_id: tagIds })),
        });
    },
    /**
     * 获取项目详情
     * @deprecated
     * @param {number} projectId
     * @returns
     */
    getById(projectId) {
        console.error('开源广场即将下线, 如有调用相关API请尽快删除');
        return ProjectHttp.get(`/project/${projectId}`);
    },
    /**
     * 根据ids获取项目列表
     * @deprecated
     * @param {{projectIds: string[]}} {projectIds}
     * @returns
     */
    getByIdList({ projectIds }) {
        console.error('开源广场即将下线, 如有调用相关API请尽快删除');
        return ProjectHttp.list().get('/projects/list', {
            params: {
                project_ids: projectIds,
            },
        });
    },
    /**
     * 获取可能感兴趣项目
     * @deprecated
     * @returns
     */
    getMayInterest() {
        console.error('开源广场即将下线, 如有调用相关API请尽快删除');
        return ProjectShortHttp.list().get('/projects/may_interest');
    },
    /**
     * 获取用户关注项目, 带搜索
     * @deprecated
     * @param {FullPaginationParams} [params]
     * @returns
     */
    getUserStar(params) {
        console.error('开源广场即将下线, 如有调用相关API请尽快删除');
        return ProjectHttp.list().get('/projects/user_star', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 关注项目
     * @deprecated
     * @param {number} projectId
     * @returns
     */
    starProject(projectId) {
        console.error('开源广场即将下线, 如有调用相关API请尽快删除');
        return Http.post(`/project/${projectId}/star`);
    },
    /**
     * 取消关注项目
     * @deprecated
     * @param {number} projectId
     * @returns
     */
    unstarProject(projectId) {
        console.error('开源广场即将下线, 如有调用相关API请尽快删除');
        return Http.delete(`/project/${projectId}/star`);
    },
    /**
     * 获取用户issues, 包括参与和关注的
     * @deprecated
     * @param {SearchWithPaginationParams} [params]
     * @returns
     */
    getUserIssues(params) {
        console.error('开源广场即将下线, 如有调用相关API请尽快删除');
        return IssuesHttp.list().get('/projects/issues/user', {
            params: injectDefaultParams(Object.assign({ sort: 'updated_at desc' }, params)),
        });
    },
    /**
     * 搜索项目issue列表
     * @deprecated
     * @param {({ sourceType: string; sourceId: number[] } & SearchWithPaginationParams)} params
     * @returns
     */
    getIssues(params) {
        const { sourceId } = params, rst = __rest(params, ["sourceId"]);
        console.error('开源广场即将下线, 如有调用相关API请尽快删除');
        return IssuesHttp.list().get('/projects/issues', {
            params: injectDefaultParams(Object.assign(Object.assign({ sort: 'updated_at desc' }, rst), { source_id: sourceId || [] })),
        });
    },
});
