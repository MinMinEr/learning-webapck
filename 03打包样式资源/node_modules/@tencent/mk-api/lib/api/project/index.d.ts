import { SearchWithPaginationParams, FullPaginationParams } from '../../types';
export declare const MkProjectsApi: {
    search: ((params?: ({
        tagIds?: number[] | undefined;
    } & FullPaginationParams) | undefined) => Promise<import("axios").AxiosResponse<{
        curStar: boolean;
        id: number;
        sourceId: number;
        sourceType: string;
        name: string;
        path: string;
        namespaceName: string;
        namespacePath: string;
        avatar: string;
        tags: {
            id: number;
            name: string;
        }[];
        description: string;
        starCount: number;
        mkStarCount: number;
        viewCount: number;
        lastActivityAt: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: ({
                tagIds?: number[] | undefined;
            } & FullPaginationParams) | undefined) => Promise<import("axios").AxiosResponse<{
                curStar: boolean;
                id: number;
                sourceId: number;
                sourceType: string;
                name: string;
                path: string;
                namespaceName: string;
                namespacePath: string;
                avatar: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                description: string;
                starCount: number;
                mkStarCount: number;
                viewCount: number;
                lastActivityAt: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getById: ((projectId: number) => Promise<import("axios").AxiosResponse<{
        curStar: boolean;
        id: number;
        sourceId: number;
        sourceType: string;
        name: string;
        path: string;
        namespaceName: string;
        namespacePath: string;
        avatar: string;
        tags: {
            id: number;
            name: string;
        }[];
        description: string;
        starCount: number;
        mkStarCount: number;
        viewCount: number;
        lastActivityAt: number;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (projectId: number) => Promise<import("axios").AxiosResponse<{
                curStar: boolean;
                id: number;
                sourceId: number;
                sourceType: string;
                name: string;
                path: string;
                namespaceName: string;
                namespacePath: string;
                avatar: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                description: string;
                starCount: number;
                mkStarCount: number;
                viewCount: number;
                lastActivityAt: number;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    getByIdList: (({ projectIds }: {
        projectIds: string[];
    }) => Promise<import("axios").AxiosResponse<{
        curStar: boolean;
        id: number;
        sourceId: number;
        sourceType: string;
        name: string;
        path: string;
        namespaceName: string;
        namespacePath: string;
        avatar: string;
        tags: {
            id: number;
            name: string;
        }[];
        description: string;
        starCount: number;
        mkStarCount: number;
        viewCount: number;
        lastActivityAt: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: ({ projectIds }: {
                projectIds: string[];
            }) => Promise<import("axios").AxiosResponse<{
                curStar: boolean;
                id: number;
                sourceId: number;
                sourceType: string;
                name: string;
                path: string;
                namespaceName: string;
                namespacePath: string;
                avatar: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                description: string;
                starCount: number;
                mkStarCount: number;
                viewCount: number;
                lastActivityAt: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getMayInterest: (() => Promise<import("axios").AxiosResponse<{
        path: string;
        id: number;
        name: string;
        avatar: string;
        description: string;
        sourceId: number;
        namespacePath: string;
        tags: {
            id: number;
            name: string;
        }[];
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                path: string;
                id: number;
                name: string;
                avatar: string;
                description: string;
                sourceId: number;
                namespacePath: string;
                tags: {
                    id: number;
                    name: string;
                }[];
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getUserStar: ((params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        curStar: boolean;
        id: number;
        sourceId: number;
        sourceType: string;
        name: string;
        path: string;
        namespaceName: string;
        namespacePath: string;
        avatar: string;
        tags: {
            id: number;
            name: string;
        }[];
        description: string;
        starCount: number;
        mkStarCount: number;
        viewCount: number;
        lastActivityAt: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                curStar: boolean;
                id: number;
                sourceId: number;
                sourceType: string;
                name: string;
                path: string;
                namespaceName: string;
                namespacePath: string;
                avatar: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                description: string;
                starCount: number;
                mkStarCount: number;
                viewCount: number;
                lastActivityAt: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    starProject: ((projectId: number) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (projectId: number) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    unstarProject: ((projectId: number) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (projectId: number) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    getUserIssues: ((params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        project: {
            path: string;
            id: number;
            name: string;
            avatar: string;
            description: string;
            sourceId: number;
            namespacePath: string;
            tags: {
                id: number;
                name: string;
            }[];
        };
        title: string;
        iid: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                project: {
                    path: string;
                    id: number;
                    name: string;
                    avatar: string;
                    description: string;
                    sourceId: number;
                    namespacePath: string;
                    tags: {
                        id: number;
                        name: string;
                    }[];
                };
                title: string;
                iid: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getIssues: ((params: {
        sourceType: string;
        sourceId: number[];
    } & SearchWithPaginationParams) => Promise<import("axios").AxiosResponse<{
        project: {
            path: string;
            id: number;
            name: string;
            avatar: string;
            description: string;
            sourceId: number;
            namespacePath: string;
            tags: {
                id: number;
                name: string;
            }[];
        };
        title: string;
        iid: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                sourceType: string;
                sourceId: number[];
            } & SearchWithPaginationParams) => Promise<import("axios").AxiosResponse<{
                project: {
                    path: string;
                    id: number;
                    name: string;
                    avatar: string;
                    description: string;
                    sourceId: number;
                    namespacePath: string;
                    tags: {
                        id: number;
                        name: string;
                    }[];
                };
                title: string;
                iid: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
};
