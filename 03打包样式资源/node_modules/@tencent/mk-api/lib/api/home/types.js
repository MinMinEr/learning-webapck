import { StringDTO, NumberDTO, BooleanDTO, } from '../../define/base';
import { TypeWrapper } from '../../http';
import { OutboxBase } from '../../define/outbox';
import { Question } from '../question/types';
import { Idea } from '../idea/types';
import { UserOutboxBase, UserShortInfo } from '../user/types';
import { ShortAnswer } from '../answer/types';
import { union, extend, pick, omit, constant } from '../../define/helper';
import { CoteriesListItem } from '../coteries/baseType';
import { ShareLink } from '../tool/types';
import { Vote } from '../../define/vote';
import { Article } from '../article/types';
/**
 * 首页feed流
 */
export const HomeOutbox = union(
// 纯问题
{
    rootableType: constant('problem'),
    linkableType: constant('problem'),
    related: pick(Question, [
        'agreeCount',
        'agreeUsernames',
        'answerCount',
        'titleMd',
        'author',
        'imageField',
        'videoField',
        'coteries',
        'readCount',
        'createdAt',
        'replyType',
    ]),
}, 
// 问题+回答
{
    rootableType: constant('problem'),
    linkableType: constant('answer'),
    related: extend(pick(Question, [
        'agreeUsernames',
        'id',
        'titleMd',
        'coteries',
        'readCount',
        'imageField',
        'videoField',
        'createdAt',
        'replyType',
    ]), {
        answers: [
            extend(ShortAnswer, {
                contentMd: StringDTO,
            }),
        ],
    }),
}, 
// 动态
{
    rootableType: constant('idea'),
    linkableType: constant('idea'),
    related: pick(Idea, [
        'agreeCount',
        'noteCount',
        'contentMd',
        'readCount',
        'linkContent',
        'linkUrl',
        'imageUrls',
        'id',
        'coteries',
        'agreeUsernames',
        'createdAt',
        'vote',
    ]),
}, 
// 代码笔记
{
    rootableType: constant('article'),
    linkableType: constant('article'),
    related: pick(Article, [
        'id',
        'title',
        'likeUsers',
        'noteCount',
        'coteries',
    ]),
});
export const HomeOutboxHttp = TypeWrapper(HomeOutbox);
/**
 * 首页24小时feed
 */
export const Home24Outbox = extend(omit(OutboxBase, ['updatedAt']), {
    user: pick(UserShortInfo, ['username', 'bg', 'avatar']),
    title: StringDTO,
    data: StringDTO,
    // 新增的层级, 评论回答用到
    entryType: StringDTO,
    entryId: NumberDTO,
});
export const Home24OutboxHttp = TypeWrapper(Home24Outbox);
// 首页我的圈子list
export const HomeCoteriesListItem = extend({
    weekContentCount: NumberDTO,
}, pick(CoteriesListItem, ['id', 'name', 'avatar']));
export const HomeCoteriesListHttp = TypeWrapper(HomeCoteriesListItem);
const HomeStarBase = {
    id: StringDTO,
    opType: NumberDTO,
    linkableId: NumberDTO,
    rootableId: NumberDTO,
    createdAt: NumberDTO,
    coterieId: NumberDTO,
    coterieName: StringDTO,
    curLiked: BooleanDTO,
    likeCount: NumberDTO,
    likeUsers: StringDTO,
    // 仅在标签来源（opType === 400 || opType === 500）时存在
    tagId: NumberDTO,
    tagName: StringDTO,
    // 仅在标签为问答（opType !== 400/500/600/700）时存在
    userId: NumberDTO,
    username: StringDTO,
    imageField: StringDTO,
    videoField: StringDTO,
};
const HomeStarIdea = extend({
    rootableType: constant('idea'),
    linkableType: constant('idea'),
    ideaData: ShareLink,
    ideaImgUris: StringDTO,
    ideaType: StringDTO,
    vote: Vote,
    contentPlain: StringDTO,
    noteCount: NumberDTO,
    videoState: constant(0, 1, 2),
    videoUrl: StringDTO,
}, HomeStarBase);
const HomeStarProblem = extend({
    rootableType: constant('problem'),
    linkableType: constant('problem'),
    titleMd: StringDTO,
    answerCount: NumberDTO,
    problemReplyType: StringDTO,
}, HomeStarBase);
const HomeStarAnswer = extend({
    rootableType: constant('problem'),
    linkableType: constant('answer'),
    titleMd: StringDTO,
    content: StringDTO,
    contentPlain: StringDTO,
    noteCount: NumberDTO,
    problemReplyType: StringDTO,
}, HomeStarBase);
// 首页关注流中的文章数据
const HomeStarArticle = extend({
    rootableType: constant('article'),
    linkableType: constant('article'),
    title: StringDTO,
    content: StringDTO,
    contentPlain: StringDTO,
    noteCount: NumberDTO,
}, HomeStarBase);
const HomeStarOutBox = union(HomeStarIdea, HomeStarProblem, HomeStarAnswer, HomeStarArticle);
export const HomeStarOutBoxHttp = TypeWrapper(HomeStarOutBox);
const HomeRecommendUser = {
    user: UserShortInfo,
    userOutbox: UserOutboxBase,
    recommendReason: constant('coterie_v', // 圈内大v
    'coterie_active', //  圈内活跃哟用户
    'most_agreed_under_tag', // 标签名下高赞用户
    'score_l5_or_higher', // 码力值L5以上用户
    'top_score_in_position'),
    reasonTargetName: StringDTO,
    reasonTargetId: NumberDTO,
};
export const HomeRecommendUserHttp = TypeWrapper(HomeRecommendUser);
