import { SortWithPaginationParams } from '../../types';
declare type RankType = 'daily' | 'weekly' | 'monthly' | 'total';
export declare const MkRankApi: {
    getScoreRank: ((type: RankType, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        userId: number;
        total: number;
        rank: number;
        score: number;
        scoreLevel: number;
        name: string;
        avatar: string;
        username: string;
        bg: string;
        org: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            /**
             * 获取码力值排行
             *
             * @param {RankType} type
             * @param {SortWithPaginationParams} [params]
             * @returns
             */
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (type: RankType, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                userId: number;
                total: number;
                rank: number;
                score: number;
                scoreLevel: number;
                name: string;
                avatar: string;
                username: string;
                bg: string;
                org: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    /**
                     * 获取码力值排行
                     *
                     * @param {RankType} type
                     * @param {SortWithPaginationParams} [params]
                     * @returns
                     */
                    perPage: number;
                };
            }>;
        };
    };
    getMostAnswerUser: (() => Promise<import("axios").AxiosResponse<{
        userId: number;
        total: number;
        rank: number;
        score: number;
        scoreLevel: number;
        name: string;
        avatar: string;
        username: string;
        bg: string;
        org: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            /**
             * 获取码力值排行
             *
             * @param {RankType} type
             * @param {SortWithPaginationParams} [params]
             * @returns
             */
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                userId: number;
                total: number;
                rank: number;
                score: number;
                scoreLevel: number;
                name: string;
                avatar: string;
                username: string;
                bg: string;
                org: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    /**
                     * 获取码力值排行
                     *
                     * @param {RankType} type
                     * @param {SortWithPaginationParams} [params]
                     * @returns
                     */
                    perPage: number;
                };
            }>;
        };
    };
};
export {};
