var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Http } from '../../http';
import { ActivityBaseHttp, ActivityHttp, ActivityAdminQuestionListHttp, ActivityAdminArticleListHttp } from './types';
import { HttpBaseConfig, injectDefaultParams } from '../../base';
import { NewNoteHTTP, NoteWithReplyHTTP } from '../../define/note';
import { QuestionListWithStickedHttp } from '../question/types';
import { ArticleListWithDetailHTTP } from '../article/types';
import { createDownload } from '../../utils';
import { injectAPIGroup } from '../../inject';
export const MkActivityApi = injectAPIGroup({
    /**
     * 获取活动详情
     *
     * @param {number} activityId
     * @returns
     */
    get(activityId) {
        return ActivityHttp.get(`/activity/${activityId}`);
    },
    /**
     * 创建活动
     *
     * @param {ActivityForm} params
     * @returns
     */
    create(params) {
        return ActivityBaseHttp.post('/activity', params);
    },
    /**
     * 搜索/获取活动列表
     *
     * @param {ActivitySearchParams} params
     */
    search(params) {
        const _a = params || {}, { coterieId } = _a, rest = __rest(_a, ["coterieId"]);
        return ActivityBaseHttp.list().get('/activity/search', {
            params: injectDefaultParams(Object.assign(Object.assign({}, rest), { coterie_id: coterieId })),
        });
    },
    /**
     * 通过ID批量获取活动
     *
     * @param {{ ids: number[] }} params
     * @returns
     */
    getByIds(params) {
        const { ids } = params;
        return ActivityBaseHttp.list().get('/activity/get_by_ids', {
            params: {
                activity_ids: ids,
            },
        });
    },
    /**
     * 搜索/获取活动草稿
     *
     * @param {ActivitySearchParams} params
     */
    getDrafts(params) {
        const _a = params || {}, { coterieId } = _a, rest = __rest(_a, ["coterieId"]);
        return ActivityBaseHttp.list().get('/activity/drafts', {
            params: injectDefaultParams(Object.assign(Object.assign({}, rest), { coterie_id: coterieId })),
        });
    },
    /**
     * 删除活动
     *
     * @param {number} activityId
     */
    delete(activityId) {
        return Http.delete(`/activity/${activityId}`);
    },
    /**
     * 更新活动
     *
     * @param {number} activityId
     * @param {ActivityForm} activityForm
     */
    update(activityId, activityForm) {
        return ActivityBaseHttp.put(`/activity/${activityId}`, activityForm);
    },
    /**
     * 创建评论
     *
     * @param {number} id
     * @param {NoteForm} body
     * @returns
     */
    createNote(id, body) {
        return NewNoteHTTP.post(`/activity/${id}/note`, body);
    },
    /**
     * 更新评论
     *
     * @param {number} activityId
     * @param {number} noteId
     * @param {NoteForm} body
     * @returns
     */
    updateNote(activityId, noteId, body) {
        return NewNoteHTTP.put(`/activity/${activityId}/note/${noteId}`, body);
    },
    /**
     * 删除评论
     *
     * @param {number} activityId
     * @param {number} noteId
     * @returns
     */
    delNote(activityId, noteId) {
        return NewNoteHTTP.delete(`/activity/${activityId}/note/${noteId}`);
    },
    /**
     * 获取活动评论
     *
     * @param {number} id
     * @returns
     */
    getActivityNotes(id) {
        return NoteWithReplyHTTP.list().get(`/activity/${id}/notes`);
    },
    /**
     * 点赞评论
     *
     * @param {number} id
     * @returns
     */
    likeNote(id, noteId) {
        return Http.post(`/activity/${id}/note/${noteId}/like`);
    },
    /**
     * 取消点赞评论
     *
     * @param {number} id
     * @returns
     */
    unlikeNote(id, noteId) {
        return Http.delete(`/activity/${id}/note/${noteId}/like`);
    },
    /**
     * 获取活动相关问答
     *
     * @param {number} id
     * @returns
     */
    getQuestions(id, params) {
        return QuestionListWithStickedHttp.list().get(`/activity/${id}/problems`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取活动相关问答（管理员权限验证）
     *
     * @param {number} id
     * @param params
     * @returns
     */
    getAdminQuestions(id, params) {
        return ActivityAdminQuestionListHttp.list().get(`/activity/${id}/problems_activity_admin`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取活动相关代码笔记
     *
     * @param {number} id
     * @param {FullPaginationParams} [params]
     */
    getArticles(id, params) {
        return ArticleListWithDetailHTTP.list().get(`/activity/${id}/articles`, {
            params,
        });
    },
    /**
     * 获取活动相关代码笔记（管理员权限验证）
     *
     * @param {number} id
     * @param {FullPaginationParams} [params]
     */
    getAdminArticles(id, params) {
        return ActivityAdminArticleListHttp.list().get(`/activity/${id}/articles_activity_admin`, {
            params,
        });
    },
    /**
     * 置顶活动问答
     *
     * @param {number} activityId
     * @param {number} questionId
     * @param {{ stick: boolean }} params
     * @returns
     */
    stickQuestion(activityId, questionId, params) {
        return Http.post(`/activity/${activityId}/problem/stick/${questionId}`, null, {
            params,
        });
    },
    /**
     * 隐藏活动问答
     *
     * @param {number} activityId
     * @param {number} questionId
     * @param {{ couple: boolean }} params
     * @returns
     */
    hideQuestion(activityId, questionId, params) {
        return Http.post(`/activity/${activityId}/problem/couple/${questionId}`, null, {
            params,
        });
    },
    /**
     * 置顶活动笔记
     *
     * @param {number} activityId
     * @param {number} articleId
     * @param {{ stick: boolean }} params
     * @returns
     */
    stickArticle(activityId, articleId, params) {
        return Http.post(`/activity/${activityId}/article/stick/${articleId}`, null, {
            params,
        });
    },
    /**
     * 隐藏活动笔记
     *
     * @param {number} activityId
     * @param {number} articleId
     * @param {{ couple: boolean }} params
     * @returns
     */
    hideArticle(activityId, articleId, params) {
        return Http.post(`/activity/${activityId}/article/couple/${articleId}`, null, {
            params,
        });
    },
    /**
     * 活动后台表格excel导出
     *
     * @param {number} id
     * @returns
     */
    exportContentExcel(id) {
        return createDownload(`${HttpBaseConfig.API_BASE}/activity/${id}/excel`);
    },
    /**
     * 活动访问记录表格excel导出
     *
     * @param {number} id
     * @returns
     */
    exportRecordExcel(id) {
        return createDownload(`${HttpBaseConfig.API_BASE}/activity/${id}/pv_record/excel`);
    },
});
