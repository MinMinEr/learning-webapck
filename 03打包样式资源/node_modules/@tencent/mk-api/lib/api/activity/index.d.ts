import { ActivityForm, ActivitySearchParams, ActivityDraftParams } from './interface';
import { NoteForm } from '../../define/note';
import { PaginationParams, FullPaginationParams } from '../../types';
export declare const MkActivityApi: {
    get: ((activityId: number) => Promise<import("axios").AxiosResponse<{
        detailMd: string;
        guests: string;
        template: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        answerCount: number;
        noteCount: number;
        id: number;
        userId: number;
        username: string;
        type: "in" | "out";
        coterieId: number;
        coterieName: string;
        category: number;
        name: string;
        status: "running" | "finish" | "init";
        summary: string;
        banner: string;
        detail: string;
        organizers: string;
        reward: boolean;
        subjectId: number;
        subjectName: string;
        pv: number;
        startedAt: number;
        expiredAt: number;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (activityId: number) => Promise<import("axios").AxiosResponse<{
                detailMd: string;
                guests: string;
                template: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                answerCount: number;
                noteCount: number;
                id: number;
                userId: number;
                username: string;
                type: "in" | "out";
                coterieId: number;
                coterieName: string;
                category: number;
                name: string;
                status: "running" | "finish" | "init";
                summary: string;
                banner: string;
                detail: string;
                organizers: string;
                reward: boolean;
                subjectId: number;
                subjectName: string;
                pv: number;
                startedAt: number;
                expiredAt: number;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    create: ((params: ActivityForm) => Promise<import("axios").AxiosResponse<{
        id: number;
        userId: number;
        username: string;
        type: "in" | "out";
        coterieId: number;
        coterieName: string;
        category: number;
        name: string;
        status: "running" | "finish" | "init";
        summary: string;
        banner: string;
        detail: string;
        organizers: string;
        reward: boolean;
        subjectId: number;
        subjectName: string;
        pv: number;
        startedAt: number;
        expiredAt: number;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: ActivityForm) => Promise<import("axios").AxiosResponse<{
                id: number;
                userId: number;
                username: string;
                type: "in" | "out";
                coterieId: number;
                coterieName: string;
                category: number;
                name: string;
                status: "running" | "finish" | "init";
                summary: string;
                banner: string;
                detail: string;
                organizers: string;
                reward: boolean;
                subjectId: number;
                subjectName: string;
                pv: number;
                startedAt: number;
                expiredAt: number;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    search: ((params?: ActivitySearchParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        userId: number;
        username: string;
        type: "in" | "out";
        coterieId: number;
        coterieName: string;
        category: number;
        name: string;
        status: "running" | "finish" | "init";
        summary: string;
        banner: string;
        detail: string;
        organizers: string;
        reward: boolean;
        subjectId: number;
        subjectName: string;
        pv: number;
        startedAt: number;
        expiredAt: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: ActivitySearchParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                userId: number;
                username: string;
                type: "in" | "out";
                coterieId: number;
                coterieName: string;
                category: number;
                name: string;
                status: "running" | "finish" | "init";
                summary: string;
                banner: string;
                detail: string;
                organizers: string;
                reward: boolean;
                subjectId: number;
                subjectName: string;
                pv: number;
                startedAt: number;
                expiredAt: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getByIds: ((params: {
        ids: number[];
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        userId: number;
        username: string;
        type: "in" | "out";
        coterieId: number;
        coterieName: string;
        category: number;
        name: string;
        status: "running" | "finish" | "init";
        summary: string;
        banner: string;
        detail: string;
        organizers: string;
        reward: boolean;
        subjectId: number;
        subjectName: string;
        pv: number;
        startedAt: number;
        expiredAt: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                ids: number[];
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                userId: number;
                username: string;
                type: "in" | "out";
                coterieId: number;
                coterieName: string;
                category: number;
                name: string;
                status: "running" | "finish" | "init";
                summary: string;
                banner: string;
                detail: string;
                organizers: string;
                reward: boolean;
                subjectId: number;
                subjectName: string;
                pv: number;
                startedAt: number;
                expiredAt: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getDrafts: ((params?: ActivityDraftParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        userId: number;
        username: string;
        type: "in" | "out";
        coterieId: number;
        coterieName: string;
        category: number;
        name: string;
        status: "running" | "finish" | "init";
        summary: string;
        banner: string;
        detail: string;
        organizers: string;
        reward: boolean;
        subjectId: number;
        subjectName: string;
        pv: number;
        startedAt: number;
        expiredAt: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: ActivityDraftParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                userId: number;
                username: string;
                type: "in" | "out";
                coterieId: number;
                coterieName: string;
                category: number;
                name: string;
                status: "running" | "finish" | "init";
                summary: string;
                banner: string;
                detail: string;
                organizers: string;
                reward: boolean;
                subjectId: number;
                subjectName: string;
                pv: number;
                startedAt: number;
                expiredAt: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    delete: ((activityId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (activityId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    update: ((activityId: number, activityForm: ActivityForm) => Promise<import("axios").AxiosResponse<{
        id: number;
        userId: number;
        username: string;
        type: "in" | "out";
        coterieId: number;
        coterieName: string;
        category: number;
        name: string;
        status: "running" | "finish" | "init";
        summary: string;
        banner: string;
        detail: string;
        organizers: string;
        reward: boolean;
        subjectId: number;
        subjectName: string;
        pv: number;
        startedAt: number;
        expiredAt: number;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (activityId: number, activityForm: ActivityForm) => Promise<import("axios").AxiosResponse<{
                id: number;
                userId: number;
                username: string;
                type: "in" | "out";
                coterieId: number;
                coterieName: string;
                category: number;
                name: string;
                status: "running" | "finish" | "init";
                summary: string;
                banner: string;
                detail: string;
                organizers: string;
                reward: boolean;
                subjectId: number;
                subjectName: string;
                pv: number;
                startedAt: number;
                expiredAt: number;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    createNote: ((id: number, body: NoteForm) => Promise<import("axios").AxiosResponse<{
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        id: number;
        username: string;
        createdAt: number;
        rootableId: number;
        rootableType: string;
        linkableId: number;
        linkableType: string;
        updatedAt: number;
        userId: number;
        parentId: number;
        content: string;
        contentMd: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, body: NoteForm) => Promise<import("axios").AxiosResponse<{
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                id: number;
                username: string;
                createdAt: number;
                rootableId: number;
                rootableType: string;
                linkableId: number;
                linkableType: string;
                updatedAt: number;
                userId: number;
                parentId: number;
                content: string;
                contentMd: string;
            }>>;
        };
    };
    updateNote: ((activityId: number, noteId: number, body: NoteForm) => Promise<import("axios").AxiosResponse<{
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        id: number;
        username: string;
        createdAt: number;
        rootableId: number;
        rootableType: string;
        linkableId: number;
        linkableType: string;
        updatedAt: number;
        userId: number;
        parentId: number;
        content: string;
        contentMd: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (activityId: number, noteId: number, body: NoteForm) => Promise<import("axios").AxiosResponse<{
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                id: number;
                username: string;
                createdAt: number;
                rootableId: number;
                rootableType: string;
                linkableId: number;
                linkableType: string;
                updatedAt: number;
                userId: number;
                parentId: number;
                content: string;
                contentMd: string;
            }>>;
        };
    };
    delNote: ((activityId: number, noteId: number) => Promise<import("axios").AxiosResponse<{
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        id: number;
        username: string;
        createdAt: number;
        rootableId: number;
        rootableType: string;
        linkableId: number;
        linkableType: string;
        updatedAt: number;
        userId: number;
        parentId: number;
        content: string;
        contentMd: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (activityId: number, noteId: number) => Promise<import("axios").AxiosResponse<{
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                id: number;
                username: string;
                createdAt: number;
                rootableId: number;
                rootableType: string;
                linkableId: number;
                linkableType: string;
                updatedAt: number;
                userId: number;
                parentId: number;
                content: string;
                contentMd: string;
            }>>;
        };
    };
    getActivityNotes: ((id: number) => Promise<import("axios").AxiosResponse<{
        note: {
            likeCount: number;
            likeUsers: string;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            id: number;
            username: string;
            createdAt: number;
            rootableId: number;
            rootableType: string;
            linkableId: number;
            linkableType: string;
            updatedAt: number;
            userId: number;
            parentId: number;
            content: string;
            contentMd: string;
        };
        children: {
            likeCount: number;
            likeUsers: string;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            id: number;
            username: string;
            createdAt: number;
            rootableId: number;
            rootableType: string;
            linkableId: number;
            linkableType: string;
            updatedAt: number;
            userId: number;
            parentId: number;
            content: string;
            contentMd: string;
        }[];
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => Promise<import("axios").AxiosResponse<{
                note: {
                    likeCount: number;
                    likeUsers: string;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    id: number;
                    username: string;
                    createdAt: number;
                    rootableId: number;
                    rootableType: string;
                    linkableId: number;
                    linkableType: string;
                    updatedAt: number;
                    userId: number;
                    parentId: number;
                    content: string;
                    contentMd: string;
                };
                children: {
                    likeCount: number;
                    likeUsers: string;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    id: number;
                    username: string;
                    createdAt: number;
                    rootableId: number;
                    rootableType: string;
                    linkableId: number;
                    linkableType: string;
                    updatedAt: number;
                    userId: number;
                    parentId: number;
                    content: string;
                    contentMd: string;
                }[];
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    likeNote: ((id: number, noteId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, noteId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    unlikeNote: ((id: number, noteId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, noteId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    getQuestions: ((id: number, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        sticked: boolean;
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                sticked: boolean;
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getAdminQuestions: ((id: number, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        hidden: boolean;
        sticked: boolean;
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                hidden: boolean;
                sticked: boolean;
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getArticles: ((id: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
        detailMd: string;
        detail: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
                detailMd: string;
                detail: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getAdminArticles: ((id: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        hidden: boolean;
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                hidden: boolean;
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    stickQuestion: ((activityId: number, questionId: number, params: {
        stick: boolean;
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (activityId: number, questionId: number, params: {
                stick: boolean;
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    hideQuestion: ((activityId: number, questionId: number, params: {
        couple: boolean;
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (activityId: number, questionId: number, params: {
                couple: boolean;
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    stickArticle: ((activityId: number, articleId: number, params: {
        stick: boolean;
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (activityId: number, articleId: number, params: {
                stick: boolean;
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    hideArticle: ((activityId: number, articleId: number, params: {
        couple: boolean;
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (activityId: number, articleId: number, params: {
                couple: boolean;
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    exportContentExcel: ((id: number) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => void;
        };
    };
    exportRecordExcel: ((id: number) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => void;
        };
    };
};
