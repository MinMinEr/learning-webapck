import { BooleanDTO, NumberDTO, StringDTO, BaseTime, BaseUser, Title, Content, Agree, DisAgree, ShortKV, Like, Dislike, } from '../../define/base';
import { UserShortInfo } from '../user/types';
import { CoterieBase } from '../coteries/baseType';
import { ShortAnswer } from '../answer/types';
import { TypeWrapper } from '../../http';
import { extend, pick, optional, omit } from '../../define/helper';
import { ActivityBase } from '../activity/baseType';
export const Invitation = extend({
    id: NumberDTO,
    username: StringDTO,
    inviteUsername: StringDTO,
    description: StringDTO,
    status: NumberDTO,
}, BaseTime);
export const QuestionBase = extend({
    id: NumberDTO,
    type: StringDTO,
    tags: [ShortKV],
    sticked: BooleanDTO,
    resolved: BooleanDTO,
    readCount: NumberDTO,
    starCount: NumberDTO,
    answerCount: NumberDTO,
    answeredAt: NumberDTO,
    imageField: StringDTO,
    videoField: StringDTO,
    source: StringDTO,
    invitations: [Invitation],
    urgent: BooleanDTO,
    replyType: StringDTO,
}, BaseTime, Title, Content, Agree, DisAgree, Like, Dislike);
export const QuestionFeedBase = extend({
    coterieId: NumberDTO,
    coterieName: StringDTO,
    answerId: NumberDTO,
    noteCount: NumberDTO,
    accepted: BooleanDTO,
    authorId: NumberDTO,
    author: StringDTO,
    contentPlain: StringDTO,
}, QuestionBase, BaseUser, Agree, DisAgree);
// 最新问答（包含回答）列表
export const QuestionFeedHttp = TypeWrapper(QuestionFeedBase);
const problemLink = {
    linkableId: NumberDTO,
    problemLinkType: StringDTO,
};
export const Question = extend({
    curStar: BooleanDTO,
    urgentAt: NumberDTO,
    canUrgent: BooleanDTO,
    author: UserShortInfo,
    coteries: [pick(CoterieBase, ['name', 'id', 'avatar', 'stats'])],
    showInHomePage: BooleanDTO,
    problemLinks: [problemLink],
    activity: pick(ActivityBase, ['id', 'name', 'status']),
    watermarked: BooleanDTO,
}, QuestionBase);
// 获取问题详细信息
export const QuestionHttp = TypeWrapper(Question);
// 问题列表数据类型, 从Question中提取了相关类型
export const QuestionListItem = pick(Question, [
    'id',
    // 目前likeCount和agreeCount都存在不同问答列表
    'agreeCount',
    'likeCount',
    'answerCount',
    'resolved',
    'type',
    'readCount',
    'starCount',
    'updatedAt',
    'createdAt',
    'imageField',
    'videoField',
    'agreeUsernames',
    'tags',
    'title',
    'titleMd',
    'coteries',
    'author',
    'replyType',
]);
// 问题列表中使用的类型
export const QuestionListHttp = TypeWrapper(QuestionListItem);
// 仅最新问答列表需要sticked字段
export const QuestionListItemWithSticked = extend({
    sticked: BooleanDTO,
}, QuestionListItem);
// 最新问答列表
export const QuestionListWithStickedHttp = TypeWrapper(QuestionListItemWithSticked);
// 问题列表(带回答)
export const QuestionWithAnswerListItem = extend(QuestionListItem, optional({
    answers: [ShortAnswer],
}));
export const QuestionWithAnswerListHttp = TypeWrapper(QuestionWithAnswerListItem);
export const QuestionRelated = extend({
    id: NumberDTO,
}, Title);
// 相关问题, 属性比较少
export const QuestionRelatedHttp = TypeWrapper(QuestionRelated);
export const QuestionWithInvite = extend(pick(QuestionBase, [
    'id',
    'agreeCount',
    'answerCount',
    'resolved',
    'readCount',
    'updatedAt',
    'createdAt',
    'imageField',
    'videoField',
    'tags',
    'titleMd',
    'invitations',
]), {
    author: UserShortInfo,
});
export const QuestionWithInviteHttp = TypeWrapper(QuestionWithInvite);
export const QuestionRecommendUser = extend(omit(UserShortInfo, ['anonymous']), {
    reason: StringDTO,
});
export const QuestionRecommendUserHttp = TypeWrapper(QuestionRecommendUser);
// 【等你回答】问答列表（加急状态）
export const QuestionWaitAnsweredListItem = extend(pick(QuestionBase, [
    'id',
    'titleMd',
    'tags',
    'readCount',
    'answerCount',
    'resolved',
    'urgent',
    'createdAt',
    'invitations',
    'replyType',
]), {
    author: UserShortInfo,
});
export const QuestionWaitAnsweredListHttp = TypeWrapper(QuestionWaitAnsweredListItem);
