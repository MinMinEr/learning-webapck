var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Http, TypeWrapper } from '../../http';
import { HttpBaseConfig, injectDefaultParams } from '../../base';
import { QuestionBase, QuestionHttp, QuestionRelatedHttp, QuestionListWithStickedHttp, QuestionWithAnswerListHttp, QuestionFeedHttp, QuestionRecommendUserHttp, QuestionListHttp, QuestionWaitAnsweredListHttp, } from './types';
import { injectAPIGroup } from '../../inject';
import { createDownload } from '../../utils';
export const MkQuestionApi = injectAPIGroup({
    /**
     * 获取问答详情
     *
     * @param {number} questionId
     * @returns
     */
    get(questionId) {
        return QuestionHttp.get(`/problem/${questionId}`);
    },
    /**
     * 获取相关提问
     *
     * @param {number} questionId
     * @returns
     */
    getRelatedByTag(questionId) {
        return QuestionRelatedHttp.list().get(`/problem/${questionId}/tags_related`);
    },
    /**
     * 获取提问作者相关问答
     *
     * @param {number} questionId
     * @returns
     */
    getRelatedByAuthor(questionId) {
        return QuestionRelatedHttp.list().get(`/problem/${questionId}/author_related`);
    },
    /**
     * 精选问答
     *
     * @param {number} questionId
     * @returns
     */
    getRelatedBySelected(questionId) {
        return QuestionRelatedHttp.list().get(`/problem/${questionId}/selected_related`);
    },
    /**
     * 将问题收录到圈子
     * @param {number} questionId
     * @param {{ linkIds: number[]; unlinkIds: number[] }} { linkIds, unlinkIds }
     * @returns
     */
    linkCoteries(questionId, { linkIds, unlinkIds }) {
        return Http.post(`/problem/${questionId}/coteries`, null, {
            params: {
                link_coteries: linkIds,
                unlink_coteries: unlinkIds,
            },
        });
    },
    /**
     * 获取最新问答列表
     *
     * @param {(PaginationParams & {
     *       stick?: boolean
     *     })} [params]
     * @returns
     */
    getNewestQuestion(params) {
        return QuestionListWithStickedHttp.list().get('/problems/newest', {
            params: injectDefaultParams(Object.assign({ stick: false }, params)),
        });
    },
    /**
     * 获取最新问答列表
     *
     * @param {(PaginationParams & {
     *       coterieId: StrOrNum
     *     })} [params]
     * @returns
     */
    getNewestQuestionAndAnswer(params) {
        const _a = params || {}, { coterieId } = _a, rst = __rest(_a, ["coterieId"]);
        return QuestionFeedHttp.list().get('/problems/newest/feeds_1', {
            params: injectDefaultParams(Object.assign({ stick: false, coterie_id: coterieId }, rst)),
        });
    },
    /**
     * 获取问答排行榜
     *
     * @param {PaginationParams} [params]
     *
     * @returns
     */
    getQuestionHotRank(params) {
        return QuestionFeedHttp.list().get('/problems/hot_rank', {
            params: injectDefaultParams(Object.assign({}, params)),
        });
    },
    /**
     * 移动端精选回答列表
     *
     * @param {PaginationParams} [params]
     *
     * @returns
     */
    getSelectedAnswers(params) {
        return QuestionWithAnswerListHttp.list().get('/answers/selected', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取精选问答
     *
     * @param {PaginationParams} [params]
     * @returns
     */
    getHotQuestion(params) {
        return QuestionWithAnswerListHttp.list().get('/problems/hot', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取运营精选问答
     *
     * @param {PaginationParams} [params]
     * @returns
     */
    getExcellentQuestion(params) {
        return QuestionWithAnswerListHttp.list().get('/problems/excellent', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 根据通道获取问答列表
     *
     * @param {PaginationParams} [params]
     * @returns
     */
    getPositionQuestion(params) {
        return QuestionWithAnswerListHttp.list().get('/problems/position_name', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 创建问题
     *
     * @param {QuestionFormParams} questionForm
     * @returns
     */
    create(questionForm) {
        return TypeWrapper(QuestionBase).post('/problem', questionForm);
    },
    /**
     * 更新问题
     *
     * @param {number} questionId
     * @param {QuestionFormParams} body
     * @returns
     */
    update(questionId, body) {
        return Http.put(`/problem/${questionId}`, body);
    },
    /**
     * 删除问题
     *
     * @param {number} questionId
     * @returns
     */
    delete(questionId) {
        return Http.delete(`/problem/${questionId}`);
    },
    /**
     * 点赞回答
     *7
     * @param {number} questionId
     * @returns
     */
    agree(questionId) {
        return Http.post(`/problem/${questionId}/agree`);
    },
    /**
     * 取消点赞
     *
     * @param {number} questionId
     * @returns
     */
    unAgree(questionId) {
        return Http.delete(`/problem/${questionId}/agree`);
    },
    /**
     * 不赞同回答
     *
     * @param {number} questionId
     * @returns
     */
    disagree(questionId) {
        return Http.post(`/problem/${questionId}/disagree`);
    },
    /**
     * 取消不赞同回答
     *
     * @param {number} questionId
     * @returns
     */
    unDisagree(questionId) {
        return Http.delete(`/problem/${questionId}/disagree`);
    },
    /**
     * 关注问题
     *
     * @param {number} questionId
     * @returns
     */
    star(questionId) {
        return Http.post(`/problem/${questionId}/star`);
    },
    /**
     * 取消关注问题
     *
     * @param {number} questionId
     * @returns
     */
    unStar(questionId) {
        return Http.delete(`/problem/${questionId}/star`);
    },
    /**
     * 获取推荐邀请有用户列表
     *
     * @param {number} questionId
     * @returns
     */
    getInviteRecommendUsers(questionId) {
        return QuestionRecommendUserHttp.list().get(`/problem/${questionId}/invite/recommend`);
    },
    /**
     * 邀请回答
     * @param {number} questionId
     * @param {{ userIds: number[] }} { userIds }
     * @returns
     */
    invite(questionId, { userIds }) {
        return Http.post(`/problem/${questionId}/invite`, null, {
            params: {
                user: userIds || [],
            },
        });
    },
    /**
     * 取消问答邀请
     *
     * @param {number} questionId
     * @returns
     */
    deleteInvite(questionId) {
        return Http.delete(`/problem/${questionId}/invitation`);
    },
    /**
     * 获取等你来答问题列表
     *
     * @param {FullPaginationParams} [params]
     * @returns
     */
    waitToAnswer(params) {
        return QuestionWaitAnsweredListHttp.list().get('/problems/user_may_answer', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取当天等你来答问题新增数量
     * 加急 + 被邀请 + 0回答
     *
     * @returns
     */
    waitToAnswerCount() {
        return QuestionListHttp.list().get('/problems/user_may_answer/total');
    },
    /**
     * 加急问题
     *
     * @param {number} id
     * @returns
     */
    urgent(id) {
        return Http.post(`/problem/${id}/urgent`);
    },
    /**
     * 导出问题PV记录
     * @param {number} id
     */
    exportQuestionPv(id) {
        const url = `${HttpBaseConfig.API_BASE}/user/pv/record/export/problem?problem_id=${id}`;
        createDownload(url);
    },
    /**
     * 导出回答
     * @param {number} id
     */
    exportAnswer(id) {
        const url = `${HttpBaseConfig.API_BASE}/problem/${id}/answer/export`;
        createDownload(url);
    },
});
