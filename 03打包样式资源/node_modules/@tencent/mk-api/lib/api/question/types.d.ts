export declare const Invitation: {
    id: number;
    username: string;
    inviteUsername: string;
    description: string;
    status: number;
    createdAt: number;
    updatedAt: number;
};
export declare const QuestionBase: {
    id: number;
    type: string;
    tags: {
        id: number;
        name: string;
    }[];
    sticked: boolean;
    resolved: boolean;
    readCount: number;
    starCount: number;
    answerCount: number;
    answeredAt: number;
    imageField: string;
    videoField: string;
    source: string;
    invitations: {
        id: number;
        username: string;
        inviteUsername: string;
        description: string;
        status: number;
        createdAt: number;
        updatedAt: number;
    }[];
    urgent: boolean;
    replyType: string;
    createdAt: number;
    updatedAt: number;
    title: string;
    titleMd: string;
    content: string;
    contentMd: string;
    agreeCount: number;
    agreeUsernames: string;
    disagreeCount: number;
    disagreeUsernames: string;
    likeCount: number;
    likeUsers: string;
    dislikeCount: number;
    dislikeUsers: string;
};
export declare const QuestionFeedBase: {
    coterieId: number;
    coterieName: string;
    answerId: number;
    noteCount: number;
    accepted: boolean;
    authorId: number;
    author: string;
    contentPlain: string;
    id: number;
    type: string;
    tags: {
        id: number;
        name: string;
    }[];
    sticked: boolean;
    resolved: boolean;
    readCount: number;
    starCount: number;
    answerCount: number;
    answeredAt: number;
    imageField: string;
    videoField: string;
    source: string;
    invitations: {
        id: number;
        username: string;
        inviteUsername: string;
        description: string;
        status: number;
        createdAt: number;
        updatedAt: number;
    }[];
    urgent: boolean;
    replyType: string;
    createdAt: number;
    updatedAt: number;
    title: string;
    titleMd: string;
    content: string;
    contentMd: string;
    agreeCount: number;
    agreeUsernames: string;
    disagreeCount: number;
    disagreeUsernames: string;
    likeCount: number;
    likeUsers: string;
    dislikeCount: number;
    dislikeUsers: string;
    userId: number;
    username: string;
};
export declare const QuestionFeedHttp: import("../../http").TypeHTTP<{
    coterieId: number;
    coterieName: string;
    answerId: number;
    noteCount: number;
    accepted: boolean;
    authorId: number;
    author: string;
    contentPlain: string;
    id: number;
    type: string;
    tags: {
        id: number;
        name: string;
    }[];
    sticked: boolean;
    resolved: boolean;
    readCount: number;
    starCount: number;
    answerCount: number;
    answeredAt: number;
    imageField: string;
    videoField: string;
    source: string;
    invitations: {
        id: number;
        username: string;
        inviteUsername: string;
        description: string;
        status: number;
        createdAt: number;
        updatedAt: number;
    }[];
    urgent: boolean;
    replyType: string;
    createdAt: number;
    updatedAt: number;
    title: string;
    titleMd: string;
    content: string;
    contentMd: string;
    agreeCount: number;
    agreeUsernames: string;
    disagreeCount: number;
    disagreeUsernames: string;
    likeCount: number;
    likeUsers: string;
    dislikeCount: number;
    dislikeUsers: string;
    userId: number;
    username: string;
}>;
export declare const Question: {
    curStar: boolean;
    urgentAt: number;
    canUrgent: boolean;
    author: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
    coteries: {
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
        };
        avatar: string;
    }[];
    showInHomePage: boolean;
    problemLinks: {
        linkableId: number;
        problemLinkType: string;
    }[];
    activity: {
        id: number;
        name: string;
        status: "running" | "finish" | "init";
    };
    watermarked: boolean;
    id: number;
    type: string;
    tags: {
        id: number;
        name: string;
    }[];
    sticked: boolean;
    resolved: boolean;
    readCount: number;
    starCount: number;
    answerCount: number;
    answeredAt: number;
    imageField: string;
    videoField: string;
    source: string;
    invitations: {
        id: number;
        username: string;
        inviteUsername: string;
        description: string;
        status: number;
        createdAt: number;
        updatedAt: number;
    }[];
    urgent: boolean;
    replyType: string;
    createdAt: number;
    updatedAt: number;
    title: string;
    titleMd: string;
    content: string;
    contentMd: string;
    agreeCount: number;
    agreeUsernames: string;
    disagreeCount: number;
    disagreeUsernames: string;
    likeCount: number;
    likeUsers: string;
    dislikeCount: number;
    dislikeUsers: string;
};
export declare const QuestionHttp: import("../../http").TypeHTTP<{
    curStar: boolean;
    urgentAt: number;
    canUrgent: boolean;
    author: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
    coteries: {
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
        };
        avatar: string;
    }[];
    showInHomePage: boolean;
    problemLinks: {
        linkableId: number;
        problemLinkType: string;
    }[];
    activity: {
        id: number;
        name: string;
        status: "running" | "finish" | "init";
    };
    watermarked: boolean;
    id: number;
    type: string;
    tags: {
        id: number;
        name: string;
    }[];
    sticked: boolean;
    resolved: boolean;
    readCount: number;
    starCount: number;
    answerCount: number;
    answeredAt: number;
    imageField: string;
    videoField: string;
    source: string;
    invitations: {
        id: number;
        username: string;
        inviteUsername: string;
        description: string;
        status: number;
        createdAt: number;
        updatedAt: number;
    }[];
    urgent: boolean;
    replyType: string;
    createdAt: number;
    updatedAt: number;
    title: string;
    titleMd: string;
    content: string;
    contentMd: string;
    agreeCount: number;
    agreeUsernames: string;
    disagreeCount: number;
    disagreeUsernames: string;
    likeCount: number;
    likeUsers: string;
    dislikeCount: number;
    dislikeUsers: string;
}>;
export declare const QuestionListItem: {
    title: string;
    id: number;
    coteries: {
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
        };
        avatar: string;
    }[];
    type: string;
    createdAt: number;
    answerCount: number;
    agreeCount: number;
    updatedAt: number;
    titleMd: string;
    agreeUsernames: string;
    likeCount: number;
    author: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
    readCount: number;
    imageField: string;
    videoField: string;
    tags: {
        id: number;
        name: string;
    }[];
    starCount: number;
    resolved: boolean;
    replyType: string;
};
export declare const QuestionListHttp: import("../../http").TypeHTTP<{
    title: string;
    id: number;
    coteries: {
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
        };
        avatar: string;
    }[];
    type: string;
    createdAt: number;
    answerCount: number;
    agreeCount: number;
    updatedAt: number;
    titleMd: string;
    agreeUsernames: string;
    likeCount: number;
    author: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
    readCount: number;
    imageField: string;
    videoField: string;
    tags: {
        id: number;
        name: string;
    }[];
    starCount: number;
    resolved: boolean;
    replyType: string;
}>;
export declare const QuestionListItemWithSticked: {
    sticked: boolean;
    title: string;
    id: number;
    coteries: {
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
        };
        avatar: string;
    }[];
    type: string;
    createdAt: number;
    answerCount: number;
    agreeCount: number;
    updatedAt: number;
    titleMd: string;
    agreeUsernames: string;
    likeCount: number;
    author: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
    readCount: number;
    imageField: string;
    videoField: string;
    tags: {
        id: number;
        name: string;
    }[];
    starCount: number;
    resolved: boolean;
    replyType: string;
};
export declare const QuestionListWithStickedHttp: import("../../http").TypeHTTP<{
    sticked: boolean;
    title: string;
    id: number;
    coteries: {
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
        };
        avatar: string;
    }[];
    type: string;
    createdAt: number;
    answerCount: number;
    agreeCount: number;
    updatedAt: number;
    titleMd: string;
    agreeUsernames: string;
    likeCount: number;
    author: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
    readCount: number;
    imageField: string;
    videoField: string;
    tags: {
        id: number;
        name: string;
    }[];
    starCount: number;
    resolved: boolean;
    replyType: string;
}>;
export declare const QuestionWithAnswerListItem: {
    title: string;
    id: number;
    coteries: {
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
        };
        avatar: string;
    }[];
    type: string;
    createdAt: number;
    answerCount: number;
    agreeCount: number;
    updatedAt: number;
    titleMd: string;
    agreeUsernames: string;
    likeCount: number;
    author: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
    readCount: number;
    imageField: string;
    videoField: string;
    tags: {
        id: number;
        name: string;
    }[];
    starCount: number;
    resolved: boolean;
    replyType: string;
    answers?: {
        id: number;
        createdAt: number;
        agreeCount: number;
        updatedAt: number;
        contentMd: string;
        agreeUsernames: string;
        problemId: number;
        accepted: boolean;
        noteCount: number;
        imageField: string;
        videoField: string;
        contentPlain: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
    }[] | undefined;
};
export declare const QuestionWithAnswerListHttp: import("../../http").TypeHTTP<{
    title: string;
    id: number;
    coteries: {
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
        };
        avatar: string;
    }[];
    type: string;
    createdAt: number;
    answerCount: number;
    agreeCount: number;
    updatedAt: number;
    titleMd: string;
    agreeUsernames: string;
    likeCount: number;
    author: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
    readCount: number;
    imageField: string;
    videoField: string;
    tags: {
        id: number;
        name: string;
    }[];
    starCount: number;
    resolved: boolean;
    replyType: string;
    answers?: {
        id: number;
        createdAt: number;
        agreeCount: number;
        updatedAt: number;
        contentMd: string;
        agreeUsernames: string;
        problemId: number;
        accepted: boolean;
        noteCount: number;
        imageField: string;
        videoField: string;
        contentPlain: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
    }[] | undefined;
}>;
export declare const QuestionRelated: {
    id: number;
    title: string;
    titleMd: string;
};
export declare const QuestionRelatedHttp: import("../../http").TypeHTTP<{
    id: number;
    title: string;
    titleMd: string;
}>;
export declare const QuestionWithInvite: {
    id: number;
    createdAt: number;
    answerCount: number;
    agreeCount: number;
    updatedAt: number;
    titleMd: string;
    readCount: number;
    imageField: string;
    videoField: string;
    tags: {
        id: number;
        name: string;
    }[];
    resolved: boolean;
    invitations: {
        id: number;
        username: string;
        inviteUsername: string;
        description: string;
        status: number;
        createdAt: number;
        updatedAt: number;
    }[];
    author: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
};
export declare const QuestionWithInviteHttp: import("../../http").TypeHTTP<{
    id: number;
    createdAt: number;
    answerCount: number;
    agreeCount: number;
    updatedAt: number;
    titleMd: string;
    readCount: number;
    imageField: string;
    videoField: string;
    tags: {
        id: number;
        name: string;
    }[];
    resolved: boolean;
    invitations: {
        id: number;
        username: string;
        inviteUsername: string;
        description: string;
        status: number;
        createdAt: number;
        updatedAt: number;
    }[];
    author: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
}>;
export declare const QuestionRecommendUser: {
    title: string;
    post: string;
    id: number;
    name: string;
    stats: {
        score: number;
        scoreLevel: string;
    };
    curStar: boolean;
    avatar: string;
    username: string;
    sex: string;
    bg: string;
    org: string;
    createdAt: string;
    reason: string;
};
export declare const QuestionRecommendUserHttp: import("../../http").TypeHTTP<{
    title: string;
    post: string;
    id: number;
    name: string;
    stats: {
        score: number;
        scoreLevel: string;
    };
    curStar: boolean;
    avatar: string;
    username: string;
    sex: string;
    bg: string;
    org: string;
    createdAt: string;
    reason: string;
}>;
export declare const QuestionWaitAnsweredListItem: {
    id: number;
    createdAt: number;
    answerCount: number;
    titleMd: string;
    readCount: number;
    tags: {
        id: number;
        name: string;
    }[];
    resolved: boolean;
    invitations: {
        id: number;
        username: string;
        inviteUsername: string;
        description: string;
        status: number;
        createdAt: number;
        updatedAt: number;
    }[];
    urgent: boolean;
    replyType: string;
    author: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
};
export declare const QuestionWaitAnsweredListHttp: import("../../http").TypeHTTP<{
    id: number;
    createdAt: number;
    answerCount: number;
    titleMd: string;
    readCount: number;
    tags: {
        id: number;
        name: string;
    }[];
    resolved: boolean;
    invitations: {
        id: number;
        username: string;
        inviteUsername: string;
        description: string;
        status: number;
        createdAt: number;
        updatedAt: number;
    }[];
    urgent: boolean;
    replyType: string;
    author: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    };
}>;
