import { PaginationParams, StrOrNum, FullPaginationParams } from '../../types';
interface QuestionFormParams {
    coterieId?: number;
    description: string;
    expertId?: number;
    showInHomePage?: boolean;
    source?: string;
    sourceId?: number;
    sourceType?: string;
    tags: string[];
    title: string;
    replyType?: 'default' | 'answer' | 'discussion';
    watermarked?: boolean;
}
export declare const MkQuestionApi: {
    get: ((questionId: number) => Promise<import("axios").AxiosResponse<{
        curStar: boolean;
        urgentAt: number;
        canUrgent: boolean;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        showInHomePage: boolean;
        problemLinks: {
            linkableId: number;
            problemLinkType: string;
        }[];
        activity: {
            id: number;
            name: string;
            status: "running" | "finish" | "init";
        };
        watermarked: boolean;
        id: number;
        type: string;
        tags: {
            id: number;
            name: string;
        }[];
        sticked: boolean;
        resolved: boolean;
        readCount: number;
        starCount: number;
        answerCount: number;
        answeredAt: number;
        imageField: string;
        videoField: string;
        source: string;
        invitations: {
            id: number;
            username: string;
            inviteUsername: string;
            description: string;
            status: number;
            createdAt: number;
            updatedAt: number;
        }[];
        urgent: boolean;
        replyType: string;
        createdAt: number;
        updatedAt: number;
        title: string;
        titleMd: string;
        content: string;
        contentMd: string;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        disagreeUsernames: string;
        likeCount: number;
        likeUsers: string;
        dislikeCount: number;
        dislikeUsers: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<{
                curStar: boolean;
                urgentAt: number;
                canUrgent: boolean;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                showInHomePage: boolean;
                problemLinks: {
                    linkableId: number;
                    problemLinkType: string;
                }[];
                activity: {
                    id: number;
                    name: string;
                    status: "running" | "finish" | "init";
                };
                watermarked: boolean;
                id: number;
                type: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                sticked: boolean;
                resolved: boolean;
                readCount: number;
                starCount: number;
                answerCount: number;
                answeredAt: number;
                imageField: string;
                videoField: string;
                source: string;
                invitations: {
                    id: number;
                    username: string;
                    inviteUsername: string;
                    description: string;
                    status: number;
                    createdAt: number;
                    updatedAt: number;
                }[];
                urgent: boolean;
                replyType: string;
                createdAt: number;
                updatedAt: number;
                title: string;
                titleMd: string;
                content: string;
                contentMd: string;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                disagreeUsernames: string;
                likeCount: number;
                likeUsers: string;
                dislikeCount: number;
                dislikeUsers: string;
            }>>;
        };
    };
    getRelatedByTag: ((questionId: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        title: string;
        titleMd: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                title: string;
                titleMd: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getRelatedByAuthor: ((questionId: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        title: string;
        titleMd: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                title: string;
                titleMd: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getRelatedBySelected: ((questionId: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        title: string;
        titleMd: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                title: string;
                titleMd: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    linkCoteries: ((questionId: number, { linkIds, unlinkIds }: {
        linkIds?: number[] | undefined;
        unlinkIds?: number[] | undefined;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, { linkIds, unlinkIds }: {
                linkIds?: number[] | undefined;
                unlinkIds?: number[] | undefined;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    getNewestQuestion: ((params?: (PaginationParams & {
        stick?: boolean | undefined;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        sticked: boolean;
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: (PaginationParams & {
                stick?: boolean | undefined;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                sticked: boolean;
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getNewestQuestionAndAnswer: ((params?: (PaginationParams & {
        coterieId: StrOrNum;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        coterieId: number;
        coterieName: string;
        answerId: number;
        noteCount: number;
        accepted: boolean;
        authorId: number;
        author: string;
        contentPlain: string;
        id: number;
        type: string;
        tags: {
            id: number;
            name: string;
        }[];
        sticked: boolean;
        resolved: boolean;
        readCount: number;
        starCount: number;
        answerCount: number;
        answeredAt: number;
        imageField: string;
        videoField: string;
        source: string;
        invitations: {
            id: number;
            username: string;
            inviteUsername: string;
            description: string;
            status: number;
            createdAt: number;
            updatedAt: number;
        }[];
        urgent: boolean;
        replyType: string;
        createdAt: number;
        updatedAt: number;
        title: string;
        titleMd: string;
        content: string;
        contentMd: string;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        disagreeUsernames: string;
        likeCount: number;
        likeUsers: string;
        dislikeCount: number;
        dislikeUsers: string;
        userId: number;
        username: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: (PaginationParams & {
                coterieId: StrOrNum;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                coterieId: number;
                coterieName: string;
                answerId: number;
                noteCount: number;
                accepted: boolean;
                authorId: number;
                author: string;
                contentPlain: string;
                id: number;
                type: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                sticked: boolean;
                resolved: boolean;
                readCount: number;
                starCount: number;
                answerCount: number;
                answeredAt: number;
                imageField: string;
                videoField: string;
                source: string;
                invitations: {
                    id: number;
                    username: string;
                    inviteUsername: string;
                    description: string;
                    status: number;
                    createdAt: number;
                    updatedAt: number;
                }[];
                urgent: boolean;
                replyType: string;
                createdAt: number;
                updatedAt: number;
                title: string;
                titleMd: string;
                content: string;
                contentMd: string;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                disagreeUsernames: string;
                likeCount: number;
                likeUsers: string;
                dislikeCount: number;
                dislikeUsers: string;
                userId: number;
                username: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getQuestionHotRank: ((params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        coterieId: number;
        coterieName: string;
        answerId: number;
        noteCount: number;
        accepted: boolean;
        authorId: number;
        author: string;
        contentPlain: string;
        id: number;
        type: string;
        tags: {
            id: number;
            name: string;
        }[];
        sticked: boolean;
        resolved: boolean;
        readCount: number;
        starCount: number;
        answerCount: number;
        answeredAt: number;
        imageField: string;
        videoField: string;
        source: string;
        invitations: {
            id: number;
            username: string;
            inviteUsername: string;
            description: string;
            status: number;
            createdAt: number;
            updatedAt: number;
        }[];
        urgent: boolean;
        replyType: string;
        createdAt: number;
        updatedAt: number;
        title: string;
        titleMd: string;
        content: string;
        contentMd: string;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        disagreeUsernames: string;
        likeCount: number;
        likeUsers: string;
        dislikeCount: number;
        dislikeUsers: string;
        userId: number;
        username: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                coterieId: number;
                coterieName: string;
                answerId: number;
                noteCount: number;
                accepted: boolean;
                authorId: number;
                author: string;
                contentPlain: string;
                id: number;
                type: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                sticked: boolean;
                resolved: boolean;
                readCount: number;
                starCount: number;
                answerCount: number;
                answeredAt: number;
                imageField: string;
                videoField: string;
                source: string;
                invitations: {
                    id: number;
                    username: string;
                    inviteUsername: string;
                    description: string;
                    status: number;
                    createdAt: number;
                    updatedAt: number;
                }[];
                urgent: boolean;
                replyType: string;
                createdAt: number;
                updatedAt: number;
                title: string;
                titleMd: string;
                content: string;
                contentMd: string;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                disagreeUsernames: string;
                likeCount: number;
                likeUsers: string;
                dislikeCount: number;
                dislikeUsers: string;
                userId: number;
                username: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getSelectedAnswers: ((params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
        answers?: {
            id: number;
            createdAt: number;
            agreeCount: number;
            updatedAt: number;
            contentMd: string;
            agreeUsernames: string;
            problemId: number;
            accepted: boolean;
            noteCount: number;
            imageField: string;
            videoField: string;
            contentPlain: string;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[] | undefined;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
                answers?: {
                    id: number;
                    createdAt: number;
                    agreeCount: number;
                    updatedAt: number;
                    contentMd: string;
                    agreeUsernames: string;
                    problemId: number;
                    accepted: boolean;
                    noteCount: number;
                    imageField: string;
                    videoField: string;
                    contentPlain: string;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[] | undefined;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getHotQuestion: ((params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
        answers?: {
            id: number;
            createdAt: number;
            agreeCount: number;
            updatedAt: number;
            contentMd: string;
            agreeUsernames: string;
            problemId: number;
            accepted: boolean;
            noteCount: number;
            imageField: string;
            videoField: string;
            contentPlain: string;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[] | undefined;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
                answers?: {
                    id: number;
                    createdAt: number;
                    agreeCount: number;
                    updatedAt: number;
                    contentMd: string;
                    agreeUsernames: string;
                    problemId: number;
                    accepted: boolean;
                    noteCount: number;
                    imageField: string;
                    videoField: string;
                    contentPlain: string;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[] | undefined;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getExcellentQuestion: ((params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
        answers?: {
            id: number;
            createdAt: number;
            agreeCount: number;
            updatedAt: number;
            contentMd: string;
            agreeUsernames: string;
            problemId: number;
            accepted: boolean;
            noteCount: number;
            imageField: string;
            videoField: string;
            contentPlain: string;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[] | undefined;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
                answers?: {
                    id: number;
                    createdAt: number;
                    agreeCount: number;
                    updatedAt: number;
                    contentMd: string;
                    agreeUsernames: string;
                    problemId: number;
                    accepted: boolean;
                    noteCount: number;
                    imageField: string;
                    videoField: string;
                    contentPlain: string;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[] | undefined;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getPositionQuestion: ((params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
        answers?: {
            id: number;
            createdAt: number;
            agreeCount: number;
            updatedAt: number;
            contentMd: string;
            agreeUsernames: string;
            problemId: number;
            accepted: boolean;
            noteCount: number;
            imageField: string;
            videoField: string;
            contentPlain: string;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[] | undefined;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
                answers?: {
                    id: number;
                    createdAt: number;
                    agreeCount: number;
                    updatedAt: number;
                    contentMd: string;
                    agreeUsernames: string;
                    problemId: number;
                    accepted: boolean;
                    noteCount: number;
                    imageField: string;
                    videoField: string;
                    contentPlain: string;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[] | undefined;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    create: ((questionForm: QuestionFormParams) => Promise<import("axios").AxiosResponse<{
        id: number;
        type: string;
        tags: {
            id: number;
            name: string;
        }[];
        sticked: boolean;
        resolved: boolean;
        readCount: number;
        starCount: number;
        answerCount: number;
        answeredAt: number;
        imageField: string;
        videoField: string;
        source: string;
        invitations: {
            id: number;
            username: string;
            inviteUsername: string;
            description: string;
            status: number;
            createdAt: number;
            updatedAt: number;
        }[];
        urgent: boolean;
        replyType: string;
        createdAt: number;
        updatedAt: number;
        title: string;
        titleMd: string;
        content: string;
        contentMd: string;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        disagreeUsernames: string;
        likeCount: number;
        likeUsers: string;
        dislikeCount: number;
        dislikeUsers: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionForm: QuestionFormParams) => Promise<import("axios").AxiosResponse<{
                id: number;
                type: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                sticked: boolean;
                resolved: boolean;
                readCount: number;
                starCount: number;
                answerCount: number;
                answeredAt: number;
                imageField: string;
                videoField: string;
                source: string;
                invitations: {
                    id: number;
                    username: string;
                    inviteUsername: string;
                    description: string;
                    status: number;
                    createdAt: number;
                    updatedAt: number;
                }[];
                urgent: boolean;
                replyType: string;
                createdAt: number;
                updatedAt: number;
                title: string;
                titleMd: string;
                content: string;
                contentMd: string;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                disagreeUsernames: string;
                likeCount: number;
                likeUsers: string;
                dislikeCount: number;
                dislikeUsers: string;
            }>>;
        };
    };
    update: ((questionId: number, body: QuestionFormParams) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, body: QuestionFormParams) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    delete: ((questionId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    agree: ((questionId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    unAgree: ((questionId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    disagree: ((questionId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    unDisagree: ((questionId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    star: ((questionId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    unStar: ((questionId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    getInviteRecommendUsers: ((questionId: number) => Promise<import("axios").AxiosResponse<{
        title: string;
        post: string;
        id: number;
        name: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        createdAt: string;
        reason: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<{
                title: string;
                post: string;
                id: number;
                name: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                createdAt: string;
                reason: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    invite: ((questionId: number, { userIds }: {
        userIds: number[];
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, { userIds }: {
                userIds: number[];
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    deleteInvite: ((questionId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    waitToAnswer: ((params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        createdAt: number;
        answerCount: number;
        titleMd: string;
        readCount: number;
        tags: {
            id: number;
            name: string;
        }[];
        resolved: boolean;
        invitations: {
            id: number;
            username: string;
            inviteUsername: string;
            description: string;
            status: number;
            createdAt: number;
            updatedAt: number;
        }[];
        urgent: boolean;
        replyType: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                createdAt: number;
                answerCount: number;
                titleMd: string;
                readCount: number;
                tags: {
                    id: number;
                    name: string;
                }[];
                resolved: boolean;
                invitations: {
                    id: number;
                    username: string;
                    inviteUsername: string;
                    description: string;
                    status: number;
                    createdAt: number;
                    updatedAt: number;
                }[];
                urgent: boolean;
                replyType: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    waitToAnswerCount: (() => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    urgent: ((id: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    exportQuestionPv: ((id: number) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => void;
        };
    };
    exportAnswer: ((id: number) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => void;
        };
    };
};
export {};
