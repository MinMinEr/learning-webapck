import { SortWithPaginationParams, PaginationParams, FullPaginationParams, SearchWithPaginationParams } from '../../types';
import { UserReport } from './types';
import { ArticleForm } from '../article/interface';
declare type UserQuestionType = 'user_create' | 'user_join_coteries' | 'user_star' | 'user_star_tags';
declare type AccessLevelType = 10 | 100;
interface UserArticleSort {
    sort?: 'created_at_desc' | 'like_count_desc';
}
interface UserCoterieParams extends PaginationParams {
    accessLevel?: AccessLevelType;
}
interface UserCustomConfig {
    blogs?: string;
    githubs?: string;
    projects2?: string;
    books?: string;
    prizes?: string;
    cards?: string;
}
export declare const MkUserApi: {
    getCurrentUser: (() => Promise<import("axios").AxiosResponse<{
        current: {
            stats: {
                score: number;
                scoreLevel: string;
                ideaCount: number;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                coterieCount: number;
                projectStarCount: number;
                followerCount: number;
                followingCount: number;
                lastVisitAt: number;
                userPagePvCount: number;
                articleCount: number;
            };
            config: {
                contestRanks: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                mobileSectionShow: boolean;
                mobileSections: string;
                switches: {
                    colleaguesIgnore: boolean;
                    surveyVoted88: boolean;
                };
            };
            curStar: boolean;
            admin: boolean;
            id: number;
            avatar: string;
            username: string;
            type: string;
            nickname: string;
            name: string;
            title: string;
            sex: string;
            bg: string;
            org: string;
            post: string;
            levelType: string;
            scoreRank: number;
            positionName: string;
            organization: string;
            anonymous: boolean;
            createdAt: string;
            state: string;
            noviceTask: boolean;
        };
        children: {
            admin: boolean;
            id: number;
            avatar: string;
            username: string;
            type: string;
            nickname: string;
            name: string;
            title: string;
            sex: string;
            bg: string;
            org: string;
            post: string;
            levelType: string;
            scoreRank: number;
            positionName: string;
            organization: string;
            anonymous: boolean;
            createdAt: string;
            state: string;
        }[];
        source: {
            admin: boolean;
            id: number;
            avatar: string;
            username: string;
            type: string;
            nickname: string;
            name: string;
            title: string;
            sex: string;
            bg: string;
            org: string;
            post: string;
            levelType: string;
            scoreRank: number;
            positionName: string;
            organization: string;
            anonymous: boolean;
            createdAt: string;
            state: string;
        };
        posts: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
            extend: string;
        }[];
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                current: {
                    stats: {
                        score: number;
                        scoreLevel: string;
                        ideaCount: number;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        coterieCount: number;
                        projectStarCount: number;
                        followerCount: number;
                        followingCount: number;
                        lastVisitAt: number;
                        userPagePvCount: number;
                        articleCount: number;
                    };
                    config: {
                        contestRanks: {
                            id: number;
                            name: string;
                            value: string;
                            orderBy: number;
                        }[];
                        mobileSectionShow: boolean;
                        mobileSections: string;
                        switches: {
                            colleaguesIgnore: boolean;
                            surveyVoted88: boolean;
                        };
                    };
                    curStar: boolean;
                    admin: boolean;
                    id: number;
                    avatar: string;
                    username: string;
                    type: string;
                    nickname: string;
                    name: string;
                    title: string;
                    sex: string;
                    bg: string;
                    org: string;
                    post: string;
                    levelType: string;
                    scoreRank: number;
                    positionName: string;
                    organization: string;
                    anonymous: boolean;
                    createdAt: string;
                    state: string;
                    noviceTask: boolean;
                };
                children: {
                    admin: boolean;
                    id: number;
                    avatar: string;
                    username: string;
                    type: string;
                    nickname: string;
                    name: string;
                    title: string;
                    sex: string;
                    bg: string;
                    org: string;
                    post: string;
                    levelType: string;
                    scoreRank: number;
                    positionName: string;
                    organization: string;
                    anonymous: boolean;
                    createdAt: string;
                    state: string;
                }[];
                source: {
                    admin: boolean;
                    id: number;
                    avatar: string;
                    username: string;
                    type: string;
                    nickname: string;
                    name: string;
                    title: string;
                    sex: string;
                    bg: string;
                    org: string;
                    post: string;
                    levelType: string;
                    scoreRank: number;
                    positionName: string;
                    organization: string;
                    anonymous: boolean;
                    createdAt: string;
                    state: string;
                };
                posts: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                    extend: string;
                }[];
            }>>;
        };
    };
    get: ((username: string) => Promise<import("axios").AxiosResponse<{
        stats: {
            score: number;
            scoreLevel: string;
            ideaCount: number;
            answerCount: number;
            problemCount: number;
            agreeCount: number;
            coterieCount: number;
            projectStarCount: number;
            followerCount: number;
            followingCount: number;
            lastVisitAt: number;
            userPagePvCount: number;
            articleCount: number;
        };
        config: {
            contestRanks: {
                id: number;
                name: string;
                value: string;
                orderBy: number;
            }[];
            mobileSectionShow: boolean;
            mobileSections: string;
            switches: {
                colleaguesIgnore: boolean;
                surveyVoted88: boolean;
            };
        };
        curStar: boolean;
        admin: boolean;
        id: number;
        avatar: string;
        username: string;
        type: string;
        nickname: string;
        name: string;
        title: string;
        sex: string;
        bg: string;
        org: string;
        post: string;
        levelType: string;
        scoreRank: number;
        positionName: string;
        organization: string;
        anonymous: boolean;
        createdAt: string;
        state: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<{
                stats: {
                    score: number;
                    scoreLevel: string;
                    ideaCount: number;
                    answerCount: number;
                    problemCount: number;
                    agreeCount: number;
                    coterieCount: number;
                    projectStarCount: number;
                    followerCount: number;
                    followingCount: number;
                    lastVisitAt: number;
                    userPagePvCount: number;
                    articleCount: number;
                };
                config: {
                    contestRanks: {
                        id: number;
                        name: string;
                        value: string;
                        orderBy: number;
                    }[];
                    mobileSectionShow: boolean;
                    mobileSections: string;
                    switches: {
                        colleaguesIgnore: boolean;
                        surveyVoted88: boolean;
                    };
                };
                curStar: boolean;
                admin: boolean;
                id: number;
                avatar: string;
                username: string;
                type: string;
                nickname: string;
                name: string;
                title: string;
                sex: string;
                bg: string;
                org: string;
                post: string;
                levelType: string;
                scoreRank: number;
                positionName: string;
                organization: string;
                anonymous: boolean;
                createdAt: string;
                state: string;
            }>>;
        };
    };
    exitsCurrentUser: (() => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    switchUserAccount: (({ username }: {
        username: string;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: ({ username }: {
                username: string;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    getSubscribeTags: ((username: string) => Promise<import("axios").AxiosResponse<{
        tagId: number;
        tagName: number;
        notifications: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<{
                tagId: number;
                tagName: number;
                notifications: string;
            }>>;
        };
    };
    isSubscribedTag: ((tagId: number) => Promise<import("axios").AxiosResponse<boolean>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (tagId: number) => Promise<import("axios").AxiosResponse<boolean>>;
        };
    };
    getQuestions: ((username: string, type: UserQuestionType, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, type: UserQuestionType, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getUserAnswerQuestion: ((username: string, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
        answers?: {
            id: number;
            createdAt: number;
            agreeCount: number;
            updatedAt: number;
            contentMd: string;
            agreeUsernames: string;
            problemId: number;
            accepted: boolean;
            noteCount: number;
            imageField: string;
            videoField: string;
            contentPlain: string;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        }[] | undefined;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
                answers?: {
                    id: number;
                    createdAt: number;
                    agreeCount: number;
                    updatedAt: number;
                    contentMd: string;
                    agreeUsernames: string;
                    problemId: number;
                    accepted: boolean;
                    noteCount: number;
                    imageField: string;
                    videoField: string;
                    contentPlain: string;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                }[] | undefined;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getProjectStared: ((username: string, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        curStar: boolean;
        id: number;
        sourceId: number;
        sourceType: string;
        name: string;
        path: string;
        namespaceName: string;
        namespacePath: string;
        avatar: string;
        tags: {
            id: number;
            name: string;
        }[];
        description: string;
        starCount: number;
        mkStarCount: number;
        viewCount: number;
        lastActivityAt: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                curStar: boolean;
                id: number;
                sourceId: number;
                sourceType: string;
                name: string;
                path: string;
                namespaceName: string;
                namespacePath: string;
                avatar: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                description: string;
                starCount: number;
                mkStarCount: number;
                viewCount: number;
                lastActivityAt: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    setCoterieOrder: ((username: string, { order }: {
        order: {
            id: number;
            orderBy: number;
        }[];
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, { order }: {
                order: {
                    id: number;
                    orderBy: number;
                }[];
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    getCoteries: ((username: string) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            articleCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
            answeredProblemCount: number;
        };
        curStar: boolean;
        avatar: string;
        createdAt: number;
        description: string;
        v: string;
        curJoin: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    articleCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                    answeredProblemCount: number;
                };
                curStar: boolean;
                avatar: string;
                createdAt: number;
                description: string;
                v: string;
                curJoin: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getCoteriesByPaging: ((username: string, params?: UserCoterieParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            articleCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
            answeredProblemCount: number;
        };
        curStar: boolean;
        avatar: string;
        createdAt: number;
        description: string;
        v: string;
        curJoin: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: UserCoterieParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    articleCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                    answeredProblemCount: number;
                };
                curStar: boolean;
                avatar: string;
                createdAt: number;
                description: string;
                v: string;
                curJoin: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getReputations: ((username: string, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        human: string;
        score: number;
        title: string;
        titleMd: string;
        createdAt: string;
        userId: number;
        username: string;
        rootableId: number;
        rootableType: string;
        linkableId: number;
        linkableType: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                human: string;
                score: number;
                title: string;
                titleMd: string;
                createdAt: string;
                userId: number;
                username: string;
                rootableId: number;
                rootableType: string;
                linkableId: number;
                linkableType: string;
            }>>;
        };
    };
    getUserInvitations: ((username: string, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        resolved: boolean;
        invitations: {
            id: number;
            username: string;
            inviteUsername: string;
            description: string;
            status: number;
            createdAt: number;
            updatedAt: number;
        }[];
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                resolved: boolean;
                invitations: {
                    id: number;
                    username: string;
                    inviteUsername: string;
                    description: string;
                    status: number;
                    createdAt: number;
                    updatedAt: number;
                }[];
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
            }>>;
        };
    };
    search: ((params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        stats: {
            score: number;
            scoreLevel: string;
            ideaCount: number;
            answerCount: number;
            problemCount: number;
            agreeCount: number;
            coterieCount: number;
            projectStarCount: number;
            followerCount: number;
            followingCount: number;
            lastVisitAt: number;
            userPagePvCount: number;
            articleCount: number;
        };
        config: {
            contestRanks: {
                id: number;
                name: string;
                value: string;
                orderBy: number;
            }[];
            mobileSectionShow: boolean;
            mobileSections: string;
            switches: {
                colleaguesIgnore: boolean;
                surveyVoted88: boolean;
            };
        };
        curStar: boolean;
        admin: boolean;
        id: number;
        avatar: string;
        username: string;
        type: string;
        nickname: string;
        name: string;
        title: string;
        sex: string;
        bg: string;
        org: string;
        post: string;
        levelType: string;
        scoreRank: number;
        positionName: string;
        organization: string;
        anonymous: boolean;
        createdAt: string;
        state: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                stats: {
                    score: number;
                    scoreLevel: string;
                    ideaCount: number;
                    answerCount: number;
                    problemCount: number;
                    agreeCount: number;
                    coterieCount: number;
                    projectStarCount: number;
                    followerCount: number;
                    followingCount: number;
                    lastVisitAt: number;
                    userPagePvCount: number;
                    articleCount: number;
                };
                config: {
                    contestRanks: {
                        id: number;
                        name: string;
                        value: string;
                        orderBy: number;
                    }[];
                    mobileSectionShow: boolean;
                    mobileSections: string;
                    switches: {
                        colleaguesIgnore: boolean;
                        surveyVoted88: boolean;
                    };
                };
                curStar: boolean;
                admin: boolean;
                id: number;
                avatar: string;
                username: string;
                type: string;
                nickname: string;
                name: string;
                title: string;
                sex: string;
                bg: string;
                org: string;
                post: string;
                levelType: string;
                scoreRank: number;
                positionName: string;
                organization: string;
                anonymous: boolean;
                createdAt: string;
                state: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getUserIdeas: ((username: string, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        type: "link" | "video" | "image" | "text" | "vote";
        readCount: number;
        starCount: number;
        noteCount: number;
        shareCount: number;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        linkUrl: string;
        videoUrl: string;
        videoState: 0 | 2 | 1;
        linkContent: {
            url: string;
            title: string;
            description: string;
            logo: string;
        };
        imageUrls: string;
        source: string;
        sourceType: string;
        sourceId: number;
        sourceName: string;
        sourceSubType: string;
        sourceSubId: number;
        sourceSubName: string;
        coteries: {
            id: number;
            name: string;
            avatar: string;
        }[];
        userId: number;
        username: string;
        content: string;
        contentMd: string;
        createdAt: number;
        updatedAt: number;
        curStar: boolean;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        vote: {
            id: number;
            title: string;
            type: string;
            totalCount: number;
            totalUserCount: number;
            curUserVote: boolean;
            voteItems: {
                id: number;
                voteId: number;
                content: string;
                voteCount: number;
                curUserVote: boolean;
                voteUsernames: string;
            }[];
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                type: "link" | "video" | "image" | "text" | "vote";
                readCount: number;
                starCount: number;
                noteCount: number;
                shareCount: number;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                linkUrl: string;
                videoUrl: string;
                videoState: 0 | 2 | 1;
                linkContent: {
                    url: string;
                    title: string;
                    description: string;
                    logo: string;
                };
                imageUrls: string;
                source: string;
                sourceType: string;
                sourceId: number;
                sourceName: string;
                sourceSubType: string;
                sourceSubId: number;
                sourceSubName: string;
                coteries: {
                    id: number;
                    name: string;
                    avatar: string;
                }[];
                userId: number;
                username: string;
                content: string;
                contentMd: string;
                createdAt: number;
                updatedAt: number;
                curStar: boolean;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                vote: {
                    id: number;
                    title: string;
                    type: string;
                    totalCount: number;
                    totalUserCount: number;
                    curUserVote: boolean;
                    voteItems: {
                        id: number;
                        voteId: number;
                        content: string;
                        voteCount: number;
                        curUserVote: boolean;
                        voteUsernames: string;
                    }[];
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getUserStarIdeas: ((username: string, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        type: "link" | "video" | "image" | "text" | "vote";
        readCount: number;
        starCount: number;
        noteCount: number;
        shareCount: number;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        linkUrl: string;
        videoUrl: string;
        videoState: 0 | 2 | 1;
        linkContent: {
            url: string;
            title: string;
            description: string;
            logo: string;
        };
        imageUrls: string;
        source: string;
        sourceType: string;
        sourceId: number;
        sourceName: string;
        sourceSubType: string;
        sourceSubId: number;
        sourceSubName: string;
        coteries: {
            id: number;
            name: string;
            avatar: string;
        }[];
        userId: number;
        username: string;
        content: string;
        contentMd: string;
        createdAt: number;
        updatedAt: number;
        curStar: boolean;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        vote: {
            id: number;
            title: string;
            type: string;
            totalCount: number;
            totalUserCount: number;
            curUserVote: boolean;
            voteItems: {
                id: number;
                voteId: number;
                content: string;
                voteCount: number;
                curUserVote: boolean;
                voteUsernames: string;
            }[];
        };
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                type: "link" | "video" | "image" | "text" | "vote";
                readCount: number;
                starCount: number;
                noteCount: number;
                shareCount: number;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                linkUrl: string;
                videoUrl: string;
                videoState: 0 | 2 | 1;
                linkContent: {
                    url: string;
                    title: string;
                    description: string;
                    logo: string;
                };
                imageUrls: string;
                source: string;
                sourceType: string;
                sourceId: number;
                sourceName: string;
                sourceSubType: string;
                sourceSubId: number;
                sourceSubName: string;
                coteries: {
                    id: number;
                    name: string;
                    avatar: string;
                }[];
                userId: number;
                username: string;
                content: string;
                contentMd: string;
                createdAt: number;
                updatedAt: number;
                curStar: boolean;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                vote: {
                    id: number;
                    title: string;
                    type: string;
                    totalCount: number;
                    totalUserCount: number;
                    curUserVote: boolean;
                    voteItems: {
                        id: number;
                        voteId: number;
                        content: string;
                        voteCount: number;
                        curUserVote: boolean;
                        voteUsernames: string;
                    }[];
                };
            }>>;
        };
    };
    getUserRecentActivities: ((username: string, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        user: {
            username: string;
        };
        title: string;
        data: string;
        createdAt: number;
        opType: string;
        rootableId: number;
        rootableType: string;
        linkableId: number;
        linkableType: string;
        entryType: string;
        entryId: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                user: {
                    username: string;
                };
                title: string;
                data: string;
                createdAt: number;
                opType: string;
                rootableId: number;
                rootableType: string;
                linkableId: number;
                linkableType: string;
                entryType: string;
                entryId: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    bindProject: ((username: string, params: {
        gitUrl: string;
        orderBy: number;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params: {
                gitUrl: string;
                orderBy: number;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    unbindProject: ((username: string, params: {
        gitUrl: string;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params: {
                gitUrl: string;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    updateUserConfig: ((username: string, params: UserCustomConfig) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params: UserCustomConfig) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    getConfig: ((username: string) => Promise<import("axios").AxiosResponse<{
        useTags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        projects: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        coteries: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        blogs: string;
        githubs: string;
        projects2: string;
        books: string;
        prizes: string;
        cards: string;
        contestRanks: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        mobileSectionShow: boolean;
        mobileSections: string;
        switches: {
            colleaguesIgnore: boolean;
            surveyVoted88: boolean;
        };
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<{
                useTags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                projects: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                coteries: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                blogs: string;
                githubs: string;
                projects2: string;
                books: string;
                prizes: string;
                cards: string;
                contestRanks: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                mobileSectionShow: boolean;
                mobileSections: string;
                switches: {
                    colleaguesIgnore: boolean;
                    surveyVoted88: boolean;
                };
            }>>;
        };
    };
    getTopQuestionAndAnswer: ((username: string) => Promise<import("axios").AxiosResponse<({
        type: "problem";
        problemId: number;
        problemTitle: string;
        problemTitleMd: string;
        problemAgreeCount: number;
    } | {
        type: "answer";
        answerId: number;
        answerContent: string;
        answerAgreeCount: string;
    })[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<({
                type: "problem";
                problemId: number;
                problemTitle: string;
                problemTitleMd: string;
                problemAgreeCount: number;
            } | {
                type: "answer";
                answerId: number;
                answerContent: string;
                answerAgreeCount: string;
            })[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getCodeReport: ((username: string) => Promise<import("axios").AxiosResponse<UserReport>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<UserReport>>;
        };
    };
    followUser: ((username: string) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    batchFollowUser: ((params: {
        username: string[];
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                username: string[];
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    unfollowUser: ((username: string) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    getFollowing: ((username: string, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        curStar: boolean;
        starer: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        } | undefined;
        starInfo: {
            createdAt: number;
        };
        latest: {
            user: {
                username: string;
            };
            title: string;
            data: string;
            createdAt: number;
            opType: string;
            rootableId: number;
            rootableType: string;
            linkableId: number;
            linkableType: string;
            entryType: string;
            entryId: number;
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                curStar: boolean;
                starer: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                } | undefined;
                starInfo: {
                    createdAt: number;
                };
                latest: {
                    user: {
                        username: string;
                    };
                    title: string;
                    data: string;
                    createdAt: number;
                    opType: string;
                    rootableId: number;
                    rootableType: string;
                    linkableId: number;
                    linkableType: string;
                    entryType: string;
                    entryId: number;
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getFollower: ((username: string, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        curStar: boolean;
        follower: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        } | undefined;
        starInfo: {
            createdAt: number;
        };
        latest: {
            user: {
                username: string;
            };
            title: string;
            data: string;
            createdAt: number;
            opType: string;
            rootableId: number;
            rootableType: string;
            linkableId: number;
            linkableType: string;
            entryType: string;
            entryId: number;
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: SortWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                curStar: boolean;
                follower: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                } | undefined;
                starInfo: {
                    createdAt: number;
                };
                latest: {
                    user: {
                        username: string;
                    };
                    title: string;
                    data: string;
                    createdAt: number;
                    opType: string;
                    rootableId: number;
                    rootableType: string;
                    linkableId: number;
                    linkableType: string;
                    entryType: string;
                    entryId: number;
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getColleagues: (() => Promise<import("axios").AxiosResponse<{
        curStar: boolean;
        starer?: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        } | undefined;
        follower?: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        } | undefined;
        starInfo: {
            createdAt: number;
        };
        latest: {
            user: {
                username: string;
            };
            title: string;
            data: string;
            createdAt: number;
            opType: string;
            rootableId: number;
            rootableType: string;
            linkableId: number;
            linkableType: string;
            entryType: string;
            entryId: number;
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                curStar: boolean;
                starer?: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                } | undefined;
                follower?: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                } | undefined;
                starInfo: {
                    createdAt: number;
                };
                latest: {
                    user: {
                        username: string;
                    };
                    title: string;
                    data: string;
                    createdAt: number;
                    opType: string;
                    rootableId: number;
                    rootableType: string;
                    linkableId: number;
                    linkableType: string;
                    entryType: string;
                    entryId: number;
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    setTitle: ((params: {
        title: string;
    }) => Promise<import("axios").AxiosResponse<{
        stats: {
            score: number;
            scoreLevel: string;
            ideaCount: number;
            answerCount: number;
            problemCount: number;
            agreeCount: number;
            coterieCount: number;
            projectStarCount: number;
            followerCount: number;
            followingCount: number;
            lastVisitAt: number;
            userPagePvCount: number;
            articleCount: number;
        };
        config: {
            contestRanks: {
                id: number;
                name: string;
                value: string;
                orderBy: number;
            }[];
            mobileSectionShow: boolean;
            mobileSections: string;
            switches: {
                colleaguesIgnore: boolean;
                surveyVoted88: boolean;
            };
        };
        curStar: boolean;
        admin: boolean;
        id: number;
        avatar: string;
        username: string;
        type: string;
        nickname: string;
        name: string;
        title: string;
        sex: string;
        bg: string;
        org: string;
        post: string;
        levelType: string;
        scoreRank: number;
        positionName: string;
        organization: string;
        anonymous: boolean;
        createdAt: string;
        state: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                title: string;
            }) => Promise<import("axios").AxiosResponse<{
                stats: {
                    score: number;
                    scoreLevel: string;
                    ideaCount: number;
                    answerCount: number;
                    problemCount: number;
                    agreeCount: number;
                    coterieCount: number;
                    projectStarCount: number;
                    followerCount: number;
                    followingCount: number;
                    lastVisitAt: number;
                    userPagePvCount: number;
                    articleCount: number;
                };
                config: {
                    contestRanks: {
                        id: number;
                        name: string;
                        value: string;
                        orderBy: number;
                    }[];
                    mobileSectionShow: boolean;
                    mobileSections: string;
                    switches: {
                        colleaguesIgnore: boolean;
                        surveyVoted88: boolean;
                    };
                };
                curStar: boolean;
                admin: boolean;
                id: number;
                avatar: string;
                username: string;
                type: string;
                nickname: string;
                name: string;
                title: string;
                sex: string;
                bg: string;
                org: string;
                post: string;
                levelType: string;
                scoreRank: number;
                positionName: string;
                organization: string;
                anonymous: boolean;
                createdAt: string;
                state: string;
            }>>;
        };
    };
    searchByGroup: ((params: {
        selected: string[];
    } & FullPaginationParams) => Promise<import("axios").AxiosResponse<{
        [k: string]: [{
            admin: boolean;
            id: number;
            avatar: string;
            username: string;
            type: string;
            nickname: string;
            name: string;
            title: string;
            sex: string;
            bg: string;
            org: string;
            post: string;
            levelType: string;
            scoreRank: number;
            positionName: string;
            organization: string;
            anonymous: boolean;
            createdAt: string;
            state: string;
        }];
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                selected: string[];
            } & FullPaginationParams) => Promise<import("axios").AxiosResponse<{
                [k: string]: [{
                    admin: boolean;
                    id: number;
                    avatar: string;
                    username: string;
                    type: string;
                    nickname: string;
                    name: string;
                    title: string;
                    sex: string;
                    bg: string;
                    org: string;
                    post: string;
                    levelType: string;
                    scoreRank: number;
                    positionName: string;
                    organization: string;
                    anonymous: boolean;
                    createdAt: string;
                    state: string;
                }];
            }>>;
        };
    };
    subscribeTag: ((params: {
        tag: string;
        subscribeByRtx?: string;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                tag: string;
                subscribeByRtx?: string;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    multiSubscribeTag: (({ tags }: {
        tags: number[];
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: ({ tags }: {
                tags: number[];
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    multiSubscribeTagsByTagname: (({ tags, subscribeByRtx, }: {
        tags: string[];
        subscribeByRtx?: string | undefined;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: ({ tags, subscribeByRtx, }: {
                tags: string[];
                subscribeByRtx?: string | undefined;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    unsubscribeTag: ((tagId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (tagId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    updateNotifications: ((tagId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (tagId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    updateSubscribeTag: (() => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => void;
        };
    };
    getSubscribedCoterieCount: ((username: string) => Promise<import("axios").AxiosResponse<number>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<number>>;
        };
    };
    getUserStarSubjects: ((username: string, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        subject: {
            curStar: boolean;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            subjectLink?: {
                linkableId: number;
            } | undefined;
            id: number;
            title: string;
            description: string;
            referCount: number;
            starCount: number;
            pv: number;
            source: string;
            sticked: boolean;
            userId: number;
            username: string;
            createdAt: number;
            updatedAt: number;
        }[];
        ideas: {
            id: number;
            contentMd: string;
        }[];
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                subject: {
                    curStar: boolean;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    subjectLink?: {
                        linkableId: number;
                    } | undefined;
                    id: number;
                    title: string;
                    description: string;
                    referCount: number;
                    starCount: number;
                    pv: number;
                    source: string;
                    sticked: boolean;
                    userId: number;
                    username: string;
                    createdAt: number;
                    updatedAt: number;
                }[];
                ideas: {
                    id: number;
                    contentMd: string;
                }[];
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getInvitedCount: ((username: string) => Promise<import("axios").AxiosResponse<number>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<number>>;
        };
    };
    getUserRecommendCoteries: ((username: string, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            articleCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
            answeredProblemCount: number;
        };
        curStar: boolean;
        avatar: string;
        createdAt: number;
        description: string;
        v: string;
        curJoin: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    articleCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                    answeredProblemCount: number;
                };
                curStar: boolean;
                avatar: string;
                createdAt: number;
                description: string;
                v: string;
                curJoin: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getArticleDrafts: ((username: string, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getUserArticles: ((username: string, params?: (SearchWithPaginationParams & UserArticleSort & {
        visibility?: ArticleForm['visibility'];
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
        detailMd: string;
        detail: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: (SearchWithPaginationParams & UserArticleSort & {
                visibility?: ArticleForm['visibility'];
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
                detailMd: string;
                detail: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getUserArticleNote: ((username: string, params?: (SearchWithPaginationParams & UserArticleSort) | undefined) => Promise<import("axios").AxiosResponse<{
        article: {
            title: string;
            id: number;
            visibility: 10 | 5;
        };
        note: {
            id: number;
            username: string;
            createdAt: number;
            rootableId: number;
            rootableType: string;
            linkableId: number;
            linkableType: string;
            updatedAt: number;
            userId: number;
            parentId: number;
            content: string;
            contentMd: string;
            likeCount: number;
            likeUsers: string;
            contentPlain: string;
        };
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: (SearchWithPaginationParams & UserArticleSort) | undefined) => Promise<import("axios").AxiosResponse<{
                article: {
                    title: string;
                    id: number;
                    visibility: 10 | 5;
                };
                note: {
                    id: number;
                    username: string;
                    createdAt: number;
                    rootableId: number;
                    rootableType: string;
                    linkableId: number;
                    linkableType: string;
                    updatedAt: number;
                    userId: number;
                    parentId: number;
                    content: string;
                    contentMd: string;
                    likeCount: number;
                    likeUsers: string;
                    contentPlain: string;
                };
            }>>;
        };
    };
    getUserStarArticle: ((username: string, params?: (SearchWithPaginationParams & UserArticleSort) | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
        detailMd: string;
        detail: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: (SearchWithPaginationParams & UserArticleSort) | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
                detailMd: string;
                detail: string;
            }>>;
        };
    };
    setSectionsConfig: ((sections: string) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (sections: string) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    setSectionRead: ((show: boolean) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (show: boolean) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    setUserConfigSwitches: ((params: {
        key: 'colleaguesIgnore';
        value: boolean;
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                key: 'colleaguesIgnore';
                value: boolean;
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
};
export {};
