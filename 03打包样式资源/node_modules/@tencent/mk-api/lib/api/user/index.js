var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Http } from '../../http';
import { injectDefaultParams } from '../../base';
import { CurrentUserHttp, UserHttp, UserTagStarHttp, UserConfigHttp, UserProjectConfigHttp, UserScoreRecordHttp, UserOutboxHttp, UserTopHttp, UserFollowingHttp, UserFollowerHttp, UserColleaguesHttp, } from './types';
import { QuestionListHttp, QuestionWithAnswerListHttp, QuestionWithInviteHttp, } from '../question/types';
import { CoteriesListHttp } from '../coteries/types';
import { IdeaHttp } from '../idea/types';
import { ProjectHttp } from '../project/types';
import { SubjectWithIdeaHttp } from '../subject/types';
import { ArticleDraftHTTP, ArticleListWithDetailHTTP, ArticleWithNoteHttp } from '../article/types';
import { injectAPIGroup } from '../../inject';
export const MkUserApi = injectAPIGroup({
    /**
     * 获取当前用户信息
     * 包括子账号和主账号
     *
     * @returns
     */
    getCurrentUser() {
        return CurrentUserHttp.get('/user/');
    },
    /**
     * 获取用户信息
     *
     * @param {string} [username]
     * @returns
     */
    get(username) {
        return UserHttp.get(`/user/${username}`);
    },
    /**
     * 登出用户子账号
     * 一定是处于子账号情况下才能登出
     *
     * @returns
     */
    exitsCurrentUser() {
        return Http.get('/user/exit');
    },
    /**
     * 切换子账号
     *
     * @param {{ username: string}} {username}
     * @returns
     */
    switchUserAccount({ username }) {
        return Http.get('/user/switch', {
            params: {
                username,
            },
        });
    },
    /**
     * 获取用户订阅tag
     *
     * @param {string} username
     * @returns
     */
    getSubscribeTags(username) {
        return UserTagStarHttp.get(`/user/${username}/tags/user_star`);
    },
    /**
     * 是否已订阅标签
     *
     * @param {number} tagId
     * @returns
     */
    isSubscribedTag(tagId) {
        return Http.get(`/user/tag/${tagId}/star`);
    },
    /**
     * 获取用户不同类型的问题列表
     *  user_create 用户创建
     *  user_join_coteries 用户所加入的圈子的问答
     *  user_star 用户关注
     *  user_star_tags 用户订阅标签的问答
     * @param {string} username
     * @param {UserQuestionType} type
     * @param {SortWithPaginationParams} [params]
     * @returns
     */
    getQuestions(username, type, params) {
        return QuestionListHttp.list().get(`/user/${username}/problems/${type}`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取用户回答过的问题列表
     *
     * @param {string} username
     * @param {SortWithPaginationParams} [params]
     * @returns
     */
    getUserAnswerQuestion(username, params) {
        return QuestionWithAnswerListHttp.list().get(`/user/${username}/problems/user_answer`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取用户已关注项目列表
     * @deprecated
     * @param {string} username
     * @param {SortWithPaginationParams} [params]
     * @returns
     */
    getProjectStared(username, params) {
        console.error('开源广场即将下线, 如有调用相关API请尽快删除');
        return ProjectHttp.list().get(`/user/${username}/projects/user_star`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 个人圈子顺序配置
     *
     * @param {string} username
     * @param {{ order: { id: number; orderBy: number }[] }} { order }
     * @returns
     */
    setCoterieOrder(username, { order }) {
        return Http.post(`/user/${username}/coteries/order`, {
            coterieOrders: order,
        });
    },
    /**
     * 获取用户加入的圈子列表
     *
     * @param {string} username
     * @returns
     */
    getCoteries(username) {
        return CoteriesListHttp.list().get(`/user/${username}/coteries/user_join`);
    },
    /**
     * 获取用户的圈子(加入/管理 & 带分页)
     *
     * @param {string} username
     * @param {UserCoterieParams} [params]
     * @returns
     */
    getCoteriesByPaging(username, params) {
        const _a = params || {}, { accessLevel } = _a, rst = __rest(_a, ["accessLevel"]);
        return CoteriesListHttp.list().get(`/user/${username}/coteries/user_join/search`, {
            params: injectDefaultParams(Object.assign(Object.assign({}, rst), { access_level: accessLevel })),
        });
    },
    /**
     * 更改调用
     * 获取用户码力值记录
     *
     * @param {string} username
     * @param {PaginationParams} [params]
     * @returns
     */
    getReputations(username, params) {
        return UserScoreRecordHttp.get(`/user/${username}/score_records`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取用户等你回答的问题列表
     *
     * @param {string} username
     * @param {PaginationParams} [params]
     * @returns
     */
    getUserInvitations(username, params) {
        return QuestionWithInviteHttp.get(`/user/${username}/problems/invite_or_star_tags`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 搜索用户
     *
     * @param {FullPaginationParams} [params]
     * @returns
     */
    search(params) {
        return UserHttp.list().get('/users/search', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取用户想法列表, 带source相关信息(供图谱使用)
     *
     * @param {string} username
     * @param {FullPaginationParams} [params]
     * @returns
     */
    getUserIdeas(username, params) {
        return IdeaHttp.list().get(`/user/${username}/ideas/user_create`, {
            params: injectDefaultParams(Object.assign({ sort: 'created_at desc' }, params)),
        });
    },
    /**
     * 获取用户关注的想法
     *
     * @param {string} username
     * @param {FullPaginationParams} [params]
     * @returns
     */
    getUserStarIdeas(username, params) {
        return IdeaHttp.get(`/user/${username}/ideas/user_star`, {
            params: injectDefaultParams(Object.assign({ sort: 'created_at desc' }, params)),
        });
    },
    /**
     * 获取用户活动列表
     *
     * @param {string} username
     * @param {SortWithPaginationParams} [params]
     * @returns
     */
    getUserRecentActivities(username, params) {
        return UserOutboxHttp.list().get(`/user/${username}/outboxs`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 个人关联内部开源项目
     * @deprecated
     * @param {string} username
     * @param {{ gitUrl: string; orderBy: number }} params
     * @returns
     */
    bindProject(username, params) {
        console.error('开源广场即将下线, 如有调用相关API请尽快删除');
        return UserProjectConfigHttp.post(`/user/${username}/config/projects/bind`, null, {
            params,
        });
    },
    /**
     * 个人解绑开源项目
     * @deprecated
     * @param {string} username
     * @param {{ gitUrl: string }} params
     * @returns
     */
    unbindProject(username, params) {
        console.error('开源广场即将下线, 如有调用相关API请尽快删除');
        return UserProjectConfigHttp.delete(`/user/${username}/config/projects/unbind`, {
            params,
        });
    },
    /**
     * 更新user/config信息，不包coteries、tags、projects
     *
     * @param {string} username
     * @param {UserCustomConfig} params
     */
    updateUserConfig(username, params) {
        return Http.post(`/user/${username}/config/update`, null, {
            params,
        });
    },
    /**
     * 获取用户个人配置
     *
     * @param {string} username
     * @returns
     */
    getConfig(username) {
        return UserConfigHttp.get(`/user/${username}/config`);
    },
    /**
     * 获取用户最佳问答Top5
     *
     * @param {string} username
     * @returns
     */
    getTopQuestionAndAnswer(username) {
        return UserTopHttp.list().get(`/user/${username}/problems/top`);
    },
    /**
     * 获取用户个人代码报告以及提交预言
     *
     * @param {string} username
     * @returns
     */
    getCodeReport(username) {
        return Http.get(`/user/${username}/code/reports`);
    },
    /**
     * 关注用户
     *
     * @param {string} username
     * @returns
     */
    followUser(username) {
        return Http.post(`/user/${username}/user_star`);
    },
    /**
     * 批量关注用户
     *
     * @param {{ username: string[]}} params
     * @returns
     */
    batchFollowUser(params) {
        return Http.post('/user/user_stars', null, { params });
    },
    /**
     * 取消关注用户
     *
     * @param {string} username
     * @returns
     */
    unfollowUser(username) {
        return Http.delete(`/user/${username}/user_star`);
    },
    /**
     * 获取用户关注列表
     *
     * @param {string} username
     * @param {SortWithPaginationParams} [params]
     * @returns
     */
    getFollowing(username, params) {
        return UserFollowingHttp.list().get(`/user/${username}/stars/starers`, {
            params: injectDefaultParams(Object.assign({ sort: 'created_at desc' }, params)),
        });
    },
    /**
     * 获取用户的关注者,
     *
     * @param {string} username
     * @param {SortWithPaginationParams} [params]
     * @returns
     */
    getFollower(username, params) {
        return UserFollowerHttp.list().get(`/user/${username}/stars/followers`, {
            params: injectDefaultParams(Object.assign({ sort: 'created_at desc' }, params)),
        });
    },
    /**
     * 获取用户的同组同事
     *
     * @returns
     */
    getColleagues() {
        return UserColleaguesHttp.list().get('/user/colleagues');
    },
    /**
     * 设置用户的title
     *
     * @param {{ title: string }} params
     * @returns
     */
    setTitle(params) {
        return UserHttp.put('/user/config/title', null, {
            params,
        });
    },
    /**
     * 根据分组搜索用户
     * @param {({ selected: string[]} & FullPaginationParams)} params
     * @returns
     */
    searchByGroup(params) {
        return UserHttp.get('/users/group_search', {
            params: injectDefaultParams(Object.assign({ sort: 'username asc' }, params)),
        });
    },
    subscribeTag(params) {
        const { subscribeByRtx } = params, rst = __rest(params, ["subscribeByRtx"]);
        return Http.post('/user/tag/star_name', null, {
            params: Object.assign({ rtx: subscribeByRtx || 'rtx' }, rst),
        });
    },
    /**
     * 通过id批量订阅标签
     *
     * @param {{ tags: number[] }} { tags }
     * @returns
     */
    multiSubscribeTag({ tags }) {
        return Http.post('/user/tags/star_ids', null, {
            params: {
                tag: tags,
            },
        });
    },
    /**
     * 根据标签名称批量订阅
     *
     * @param {{
     *     tags: string[]
     *     subscribeByRtx?: string
     *   }} {
     *     tags,
     *     subscribeByRtx,
     *   }
     * @returns
     */
    multiSubscribeTagsByTagname({ tags, subscribeByRtx, }) {
        return Http.post('/user/tags/star_names', null, {
            params: {
                tags: tags.join(),
                rtx: subscribeByRtx || 'rtx',
            },
        });
    },
    /**
     * 取消订阅标签
     *
     * @param {number} tagId
     * @returns
     */
    unsubscribeTag(tagId) {
        return Http.delete(`/user/tag/${tagId}/unstar`);
    },
    /**
     * 修改标签通知方式
     *
     * @param {number} tagId
     * @returns
     */
    updateNotifications(tagId) {
        return Http.put(`/user/tag/${tagId}/star/notify/rtx`);
    },
    updateSubscribeTag() {
        console.error('SubscribeApi.updateSubscribeTag is unused');
    },
    getSubscribedCoterieCount(username) {
        return Http.get(`/user/${username}/coteries/weekly/subscribed`);
    },
    // 话题相关
    /**
     * 获取用户关注的话题列表
     *
     * @param {string} username
     * @param {FullPaginationParams} params
     * @returns
     */
    getUserStarSubjects(username, params) {
        return SubjectWithIdeaHttp.list().get(`/user/${username}/subjects/user_star`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取用户受邀回答的数量
     *
     * @param {string} username
     * @returns
     */
    getInvitedCount(username) {
        return Http.get(`/user/${username}/problems/invited_count`);
    },
    /**
     * 获取给用户推荐的圈子（首页弹窗）
     *
     * @param {string} username
     * @param {FullPaginationParams} params
     * @returns
     */
    getUserRecommendCoteries(username, params) {
        return CoteriesListHttp.list().get(`/user/${username}/coteries/hot/recommend`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取用户文章草稿
     *
     * @param {string} username
     * @param {PaginationParams} [params]
     * @returns
     */
    getArticleDrafts(username, params) {
        return ArticleDraftHTTP.list().get(`/user/${username}/articles/drafts`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取用户创建的笔记
     * 排序:
     * created_at_desc: 创建时间倒序 默认
     * like_count_desc: 点赞数倒序
     * @param {string} username
     * @param {(SearchWithPaginationParams & UserArticleSort & { visibility?: ArticleForm['visibility'] })} [params]
     * @returns
     */
    getUserArticles(username, params) {
        return ArticleListWithDetailHTTP.list().get(`/user/${username}/articles/user_create`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取用户评论过的文章列表
     * 排序:
     * created_at_desc: 创建时间倒序 默认
     * like_count_desc: 点赞数倒序
     * @param {string} username
     * @param {(SearchWithPaginationParams & UserArticleSort)} [params]
     * @returns
     */
    getUserArticleNote(username, params) {
        return ArticleWithNoteHttp.get(`/user/${username}/articles/user_note`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取用户关注的文章列表
     * 排序:
     * created_at_desc: 创建时间倒序 默认
     * like_count_desc: 点赞数倒序
     * @param {string} username
     * @param {(SearchWithPaginationParams & UserArticleSort)} [params]
     * @returns
     */
    getUserStarArticle(username, params) {
        return ArticleListWithDetailHTTP.get(`/user/${username}/articles/user_star`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 用户自定义栏目
     *
     * @param {string} sections
     * @returns
     */
    setSectionsConfig(sections) {
        return Http.put('/user/config/mobile/sections', null, {
            params: {
                mobileSections: sections,
            },
        });
    },
    /**
     * 用户自定义栏目
     *
     * @param {string} show
     * @returns
     */
    setSectionRead(show) {
        return Http.put('/user/config/mobile/section_read', null, {
            params: {
                mobileSectionShow: show,
            },
        });
    },
    /**
     * 更新用户配置中的switch开关
     *
     * @param {{ [k: string]: boolean }} params
     * @returns
     */
    setUserConfigSwitches(params) {
        return Http.post('/user/switches', null, { params });
    },
});
