export declare const UserInfo: {
    admin: boolean;
    id: number;
    avatar: string;
    username: string;
    type: string;
    nickname: string;
    name: string;
    title: string;
    sex: string;
    bg: string;
    org: string;
    post: string;
    levelType: string;
    scoreRank: number;
    positionName: string;
    organization: string;
    anonymous: boolean;
    createdAt: string;
    state: string;
};
export declare const UserStats: {
    score: number;
    scoreLevel: string;
    ideaCount: number;
    answerCount: number;
    problemCount: number;
    agreeCount: number;
    coterieCount: number;
    projectStarCount: number;
    followerCount: number;
    followingCount: number;
    lastVisitAt: number;
    userPagePvCount: number;
    articleCount: number;
};
export declare const UserConfig: {
    useTags: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
    }[];
    projects: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
    }[];
    coteries: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
    }[];
    blogs: string;
    githubs: string;
    projects2: string;
    books: string;
    prizes: string;
    cards: string;
    contestRanks: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
    }[];
    mobileSectionShow: boolean;
    mobileSections: string;
    switches: {
        colleaguesIgnore: boolean;
        surveyVoted88: boolean;
    };
};
export declare const UserConfigHttp: import("../../http").TypeHTTP<{
    useTags: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
    }[];
    projects: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
    }[];
    coteries: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
    }[];
    blogs: string;
    githubs: string;
    projects2: string;
    books: string;
    prizes: string;
    cards: string;
    contestRanks: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
    }[];
    mobileSectionShow: boolean;
    mobileSections: string;
    switches: {
        colleaguesIgnore: boolean;
        surveyVoted88: boolean;
    };
}>;
export declare const UserProjectConfigHttp: import("../../http").TypeHTTP<{
    projects: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
    }[];
    useTags: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
    }[];
    coteries: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
    }[];
    blogs: string;
    githubs: string;
    projects2: string;
    books: string;
    prizes: string;
    cards: string;
    contestRanks: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
    }[];
    mobileSectionShow: boolean;
    mobileSections: string;
    switches: {
        colleaguesIgnore: boolean;
        surveyVoted88: boolean;
    };
}>;
export declare const User: {
    stats: {
        score: number;
        scoreLevel: string;
        ideaCount: number;
        answerCount: number;
        problemCount: number;
        agreeCount: number;
        coterieCount: number;
        projectStarCount: number;
        followerCount: number;
        followingCount: number;
        lastVisitAt: number;
        userPagePvCount: number;
        articleCount: number;
    };
    config: {
        contestRanks: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        mobileSectionShow: boolean;
        mobileSections: string;
        switches: {
            colleaguesIgnore: boolean;
            surveyVoted88: boolean;
        };
    };
    curStar: boolean;
    admin: boolean;
    id: number;
    avatar: string;
    username: string;
    type: string;
    nickname: string;
    name: string;
    title: string;
    sex: string;
    bg: string;
    org: string;
    post: string;
    levelType: string;
    scoreRank: number;
    positionName: string;
    organization: string;
    anonymous: boolean;
    createdAt: string;
    state: string;
};
export declare const UserHttp: import("../../http").TypeHTTP<{
    stats: {
        score: number;
        scoreLevel: string;
        ideaCount: number;
        answerCount: number;
        problemCount: number;
        agreeCount: number;
        coterieCount: number;
        projectStarCount: number;
        followerCount: number;
        followingCount: number;
        lastVisitAt: number;
        userPagePvCount: number;
        articleCount: number;
    };
    config: {
        contestRanks: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        mobileSectionShow: boolean;
        mobileSections: string;
        switches: {
            colleaguesIgnore: boolean;
            surveyVoted88: boolean;
        };
    };
    curStar: boolean;
    admin: boolean;
    id: number;
    avatar: string;
    username: string;
    type: string;
    nickname: string;
    name: string;
    title: string;
    sex: string;
    bg: string;
    org: string;
    post: string;
    levelType: string;
    scoreRank: number;
    positionName: string;
    organization: string;
    anonymous: boolean;
    createdAt: string;
    state: string;
}>;
export declare const UserShortInfo: {
    title: string;
    post: string;
    id: number;
    name: string;
    curStar: boolean;
    avatar: string;
    username: string;
    sex: string;
    bg: string;
    org: string;
    anonymous: boolean;
    createdAt: string;
    stats: {
        score: number;
        scoreLevel: string;
    };
};
export declare const UserExpert: {
    post: string;
    id: number;
    name: string;
    curStar: boolean;
    username: string;
    org: string;
};
export declare const UserOutboxBase: {
    user: {
        username: string;
    };
    title: string;
    data: string;
    createdAt: number;
    opType: string;
    rootableId: number;
    rootableType: string;
    linkableId: number;
    linkableType: string;
    entryType: string;
    entryId: number;
};
export declare const UserOutboxHttp: import("../../http").TypeHTTP<{
    user: {
        username: string;
    };
    title: string;
    data: string;
    createdAt: number;
    opType: string;
    rootableId: number;
    rootableType: string;
    linkableId: number;
    linkableType: string;
    entryType: string;
    entryId: number;
}>;
export declare const UserStar: {
    starInfo: {
        createdAt: number;
    };
    curStar: boolean;
    latest: {
        user: {
            username: string;
        };
        title: string;
        data: string;
        createdAt: number;
        opType: string;
        rootableId: number;
        rootableType: string;
        linkableId: number;
        linkableType: string;
        entryType: string;
        entryId: number;
    };
    starer?: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    } | undefined;
    follower?: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    } | undefined;
};
export declare const UserFollowingHttp: import("../../http").TypeHTTP<{
    curStar: boolean;
    starer: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    } | undefined;
    starInfo: {
        createdAt: number;
    };
    latest: {
        user: {
            username: string;
        };
        title: string;
        data: string;
        createdAt: number;
        opType: string;
        rootableId: number;
        rootableType: string;
        linkableId: number;
        linkableType: string;
        entryType: string;
        entryId: number;
    };
}>;
export declare const UserFollowerHttp: import("../../http").TypeHTTP<{
    curStar: boolean;
    follower: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    } | undefined;
    starInfo: {
        createdAt: number;
    };
    latest: {
        user: {
            username: string;
        };
        title: string;
        data: string;
        createdAt: number;
        opType: string;
        rootableId: number;
        rootableType: string;
        linkableId: number;
        linkableType: string;
        entryType: string;
        entryId: number;
    };
}>;
export declare const UserColleaguesHttp: import("../../http").TypeHTTP<{
    curStar: boolean;
    starer?: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    } | undefined;
    follower?: {
        title: string;
        post: string;
        id: number;
        name: string;
        curStar: boolean;
        avatar: string;
        username: string;
        sex: string;
        bg: string;
        org: string;
        anonymous: boolean;
        createdAt: string;
        stats: {
            score: number;
            scoreLevel: string;
        };
    } | undefined;
    starInfo: {
        createdAt: number;
    };
    latest: {
        user: {
            username: string;
        };
        title: string;
        data: string;
        createdAt: number;
        opType: string;
        rootableId: number;
        rootableType: string;
        linkableId: number;
        linkableType: string;
        entryType: string;
        entryId: number;
    };
}>;
export declare const CurrentUser: {
    current: {
        stats: {
            score: number;
            scoreLevel: string;
            ideaCount: number;
            answerCount: number;
            problemCount: number;
            agreeCount: number;
            coterieCount: number;
            projectStarCount: number;
            followerCount: number;
            followingCount: number;
            lastVisitAt: number;
            userPagePvCount: number;
            articleCount: number;
        };
        config: {
            contestRanks: {
                id: number;
                name: string;
                value: string;
                orderBy: number;
            }[];
            mobileSectionShow: boolean;
            mobileSections: string;
            switches: {
                colleaguesIgnore: boolean;
                surveyVoted88: boolean;
            };
        };
        curStar: boolean;
        admin: boolean;
        id: number;
        avatar: string;
        username: string;
        type: string;
        nickname: string;
        name: string;
        title: string;
        sex: string;
        bg: string;
        org: string;
        post: string;
        levelType: string;
        scoreRank: number;
        positionName: string;
        organization: string;
        anonymous: boolean;
        createdAt: string;
        state: string;
        noviceTask: boolean;
    };
    children: {
        admin: boolean;
        id: number;
        avatar: string;
        username: string;
        type: string;
        nickname: string;
        name: string;
        title: string;
        sex: string;
        bg: string;
        org: string;
        post: string;
        levelType: string;
        scoreRank: number;
        positionName: string;
        organization: string;
        anonymous: boolean;
        createdAt: string;
        state: string;
    }[];
    source: {
        admin: boolean;
        id: number;
        avatar: string;
        username: string;
        type: string;
        nickname: string;
        name: string;
        title: string;
        sex: string;
        bg: string;
        org: string;
        post: string;
        levelType: string;
        scoreRank: number;
        positionName: string;
        organization: string;
        anonymous: boolean;
        createdAt: string;
        state: string;
    };
    posts: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
        extend: string;
    }[];
};
export declare const CurrentUserHttp: import("../../http").TypeHTTP<{
    current: {
        stats: {
            score: number;
            scoreLevel: string;
            ideaCount: number;
            answerCount: number;
            problemCount: number;
            agreeCount: number;
            coterieCount: number;
            projectStarCount: number;
            followerCount: number;
            followingCount: number;
            lastVisitAt: number;
            userPagePvCount: number;
            articleCount: number;
        };
        config: {
            contestRanks: {
                id: number;
                name: string;
                value: string;
                orderBy: number;
            }[];
            mobileSectionShow: boolean;
            mobileSections: string;
            switches: {
                colleaguesIgnore: boolean;
                surveyVoted88: boolean;
            };
        };
        curStar: boolean;
        admin: boolean;
        id: number;
        avatar: string;
        username: string;
        type: string;
        nickname: string;
        name: string;
        title: string;
        sex: string;
        bg: string;
        org: string;
        post: string;
        levelType: string;
        scoreRank: number;
        positionName: string;
        organization: string;
        anonymous: boolean;
        createdAt: string;
        state: string;
        noviceTask: boolean;
    };
    children: {
        admin: boolean;
        id: number;
        avatar: string;
        username: string;
        type: string;
        nickname: string;
        name: string;
        title: string;
        sex: string;
        bg: string;
        org: string;
        post: string;
        levelType: string;
        scoreRank: number;
        positionName: string;
        organization: string;
        anonymous: boolean;
        createdAt: string;
        state: string;
    }[];
    source: {
        admin: boolean;
        id: number;
        avatar: string;
        username: string;
        type: string;
        nickname: string;
        name: string;
        title: string;
        sex: string;
        bg: string;
        org: string;
        post: string;
        levelType: string;
        scoreRank: number;
        positionName: string;
        organization: string;
        anonymous: boolean;
        createdAt: string;
        state: string;
    };
    posts: {
        id: number;
        name: string;
        value: string;
        orderBy: number;
        extend: string;
    }[];
}>;
export declare const UserTagStar: {
    tagId: number;
    tagName: number;
    notifications: string;
};
export declare const UserTagStarHttp: import("../../http").TypeHTTP<{
    tagId: number;
    tagName: number;
    notifications: string;
}>;
export declare const UserTop: {
    type: "problem";
    problemId: number;
    problemTitle: string;
    problemTitleMd: string;
    problemAgreeCount: number;
} | {
    type: "answer";
    answerId: number;
    answerContent: string;
    answerAgreeCount: string;
};
export declare const UserTopHttp: import("../../http").TypeHTTP<{
    type: "problem";
    problemId: number;
    problemTitle: string;
    problemTitleMd: string;
    problemAgreeCount: number;
} | {
    type: "answer";
    answerId: number;
    answerContent: string;
    answerAgreeCount: string;
}>;
interface ReportData {
    total: number;
    trend: number;
}
export interface UserReport {
    issue: {
        create: ReportData;
        comment: ReportData;
    };
    review: {
        create: ReportData;
        comment: ReportData;
    };
    langs: {
        [k: string]: number;
    };
    basic: {
        add: ReportData;
        edit: ReportData;
        delete: ReportData;
        push: ReportData;
    };
}
export declare const UserScoreRecord: {
    human: string;
    score: number;
    title: string;
    titleMd: string;
    createdAt: string;
    userId: number;
    username: string;
    rootableId: number;
    rootableType: string;
    linkableId: number;
    linkableType: string;
};
export declare const UserScoreRecordHttp: import("../../http").TypeHTTP<{
    human: string;
    score: number;
    title: string;
    titleMd: string;
    createdAt: string;
    userId: number;
    username: string;
    rootableId: number;
    rootableType: string;
    linkableId: number;
    linkableType: string;
}>;
export {};
