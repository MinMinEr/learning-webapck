import { KV, NumberDTO, StringDTO, BooleanDTO, BaseUser, Rootable, Linkable, } from '../../define/base';
import { TypeWrapper } from '../../http';
import { OutboxBase } from '../../define/outbox';
import { pick, extend, optional, omit, union, constant } from '../../define/helper';
import { StarBase } from '../../define/star';
export const UserInfo = {
    admin: BooleanDTO,
    id: NumberDTO,
    avatar: StringDTO,
    username: StringDTO,
    type: StringDTO,
    nickname: StringDTO,
    name: StringDTO,
    title: StringDTO,
    sex: StringDTO,
    bg: StringDTO,
    org: StringDTO,
    post: StringDTO,
    levelType: StringDTO,
    scoreRank: NumberDTO,
    positionName: StringDTO,
    organization: StringDTO,
    anonymous: BooleanDTO,
    createdAt: StringDTO,
    state: StringDTO,
};
export const UserStats = {
    score: NumberDTO,
    scoreLevel: StringDTO,
    ideaCount: NumberDTO,
    answerCount: NumberDTO,
    problemCount: NumberDTO,
    agreeCount: NumberDTO,
    coterieCount: NumberDTO,
    projectStarCount: NumberDTO,
    followerCount: NumberDTO,
    followingCount: NumberDTO,
    lastVisitAt: NumberDTO,
    userPagePvCount: NumberDTO,
    articleCount: NumberDTO,
};
export const UserConfig = {
    useTags: [KV],
    projects: [KV],
    coteries: [KV],
    blogs: StringDTO,
    githubs: StringDTO,
    projects2: StringDTO,
    books: StringDTO,
    prizes: StringDTO,
    cards: StringDTO,
    contestRanks: [KV],
    mobileSectionShow: BooleanDTO,
    mobileSections: StringDTO,
    switches: {
        colleaguesIgnore: BooleanDTO,
        surveyVoted88: BooleanDTO,
    },
};
export const UserConfigHttp = TypeWrapper(UserConfig);
export const UserProjectConfigHttp = TypeWrapper(pick(UserConfig, ['projects']));
export const User = extend({
    stats: UserStats,
    config: pick(UserConfig, ['mobileSectionShow', 'mobileSections', 'contestRanks', 'switches']),
    curStar: BooleanDTO,
}, UserInfo);
export const UserHttp = TypeWrapper(User);
export const UserShortInfo = extend(pick(User, [
    'id',
    'username',
    'name',
    'sex',
    'bg',
    'avatar',
    'org',
    'post',
    'anonymous',
    'title',
    'createdAt',
    'curStar',
]), {
    stats: pick(UserStats, ['score', 'scoreLevel']),
});
// 圈子大V
export const UserExpert = pick(User, [
    'id',
    'name',
    'username',
    'curStar',
    'org',
    'post',
]);
export const UserOutboxBase = extend({
    user: pick(UserShortInfo, ['username']),
    title: StringDTO,
    data: StringDTO,
}, pick(OutboxBase, [
    'createdAt',
    'linkableType',
    'rootableType',
    'opType',
    'rootableId',
    'linkableId',
]), {
    // 新增的层级, 评论回答用到
    entryType: StringDTO,
    entryId: NumberDTO,
});
export const UserOutboxHttp = TypeWrapper(UserOutboxBase);
export const UserStar = extend({
    starInfo: pick(StarBase, ['createdAt']),
    curStar: BooleanDTO,
    latest: UserOutboxBase,
}, optional({
    starer: UserShortInfo,
    follower: UserShortInfo,
}));
export const UserFollowingHttp = TypeWrapper(omit(UserStar, ['follower']));
export const UserFollowerHttp = TypeWrapper(omit(UserStar, ['starer']));
export const UserColleaguesHttp = TypeWrapper(pick(UserStar, ['curStar', 'starer']));
export const CurrentUser = {
    current: extend(User, {
        noviceTask: BooleanDTO,
    }),
    children: [UserInfo],
    source: UserInfo,
    posts: [extend(KV, {
            extend: StringDTO,
        })],
};
export const CurrentUserHttp = TypeWrapper(CurrentUser);
export const UserTagStar = {
    tagId: NumberDTO,
    tagName: NumberDTO,
    notifications: StringDTO,
};
export const UserTagStarHttp = TypeWrapper(UserTagStar);
export const UserTop = union({
    type: constant('problem'),
    problemId: NumberDTO,
    problemTitle: StringDTO,
    problemTitleMd: StringDTO,
    problemAgreeCount: NumberDTO,
}, {
    type: constant('answer'),
    answerId: NumberDTO,
    answerContent: StringDTO,
    answerAgreeCount: StringDTO,
});
export const UserTopHttp = TypeWrapper(UserTop);
export const UserScoreRecord = extend({
    human: StringDTO,
    score: NumberDTO,
    // content:StringDTO,
    title: StringDTO,
    titleMd: StringDTO,
    createdAt: StringDTO,
}, BaseUser, Rootable, Linkable);
export const UserScoreRecordHttp = TypeWrapper(UserScoreRecord);
