import { ArticleForm } from './interface';
import { PaginationParams, FullPaginationParams, SearchWithPaginationParams } from '../../types';
import { NoteForm } from '../../define/note';
export declare const MkArticleApi: {
    createArticle: ((body: Omit<ArticleForm, 'id'>) => Promise<import("axios").AxiosResponse<{
        id: number;
        uuid: number;
        coterieId: number;
        coterieName: number;
        contestId: number;
        contestName: number;
        title: string;
        readCount: number;
        starCount: number;
        likeCount: number;
        noteCount: number;
        detail: string;
        detailMd: string;
        likeUsers: string;
        data: string;
        imageField: string;
        sticked: boolean;
        selected: boolean;
        visibility: 10 | 5;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        createdAt: number;
        updatedAt: number;
        userId: number;
        username: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (body: Omit<ArticleForm, 'id'>) => Promise<import("axios").AxiosResponse<{
                id: number;
                uuid: number;
                coterieId: number;
                coterieName: number;
                contestId: number;
                contestName: number;
                title: string;
                readCount: number;
                starCount: number;
                likeCount: number;
                noteCount: number;
                detail: string;
                detailMd: string;
                likeUsers: string;
                data: string;
                imageField: string;
                sticked: boolean;
                selected: boolean;
                visibility: 10 | 5;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                createdAt: number;
                updatedAt: number;
                userId: number;
                username: string;
            }>>;
        };
    };
    updateArticle: ((articleId: number, body: ArticleForm) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number, body: ArticleForm) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    delArticle: ((articleId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    getArticle: ((articleId: number | string) => Promise<import("axios").AxiosResponse<{
        id: number;
        uuid: number;
        coterieId: number;
        coterieName: number;
        contestId: number;
        contestName: number;
        title: string;
        readCount: number;
        starCount: number;
        likeCount: number;
        noteCount: number;
        detail: string;
        detailMd: string;
        likeUsers: string;
        data: string;
        imageField: string;
        sticked: boolean;
        selected: boolean;
        visibility: 10 | 5;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        createdAt: number;
        updatedAt: number;
        userId: number;
        username: string;
        curStar: boolean;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        activity: {
            id: number;
            name: string;
            status: "running" | "finish" | "init";
        };
        articleLinks: {
            linkableId: number;
            linkableType: string;
            type: string;
        }[];
        watermarked: boolean;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number | string) => Promise<import("axios").AxiosResponse<{
                id: number;
                uuid: number;
                coterieId: number;
                coterieName: number;
                contestId: number;
                contestName: number;
                title: string;
                readCount: number;
                starCount: number;
                likeCount: number;
                noteCount: number;
                detail: string;
                detailMd: string;
                likeUsers: string;
                data: string;
                imageField: string;
                sticked: boolean;
                selected: boolean;
                visibility: 10 | 5;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                createdAt: number;
                updatedAt: number;
                userId: number;
                username: string;
                curStar: boolean;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                activity: {
                    id: number;
                    name: string;
                    status: "running" | "finish" | "init";
                };
                articleLinks: {
                    linkableId: number;
                    linkableType: string;
                    type: string;
                }[];
                watermarked: boolean;
            }>>;
        };
    };
    search: ((params?: (FullPaginationParams & {
        contestOnly: boolean;
        tagIds: number[];
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
        detailMd: string;
        detail: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: (FullPaginationParams & {
                contestOnly: boolean;
                tagIds: number[];
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
                detailMd: string;
                detail: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getUserArticles: ((params: FullPaginationParams & {
        visibility?: ArticleForm['visibility'];
        begin: number;
        end: number;
    }) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
        detailMd: string;
        detail: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: FullPaginationParams & {
                visibility?: ArticleForm['visibility'];
                begin: number;
                end: number;
            }) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
                detailMd: string;
                detail: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getNewestArticles: ((params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
        detailMd: string;
        detail: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
                detailMd: string;
                detail: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getSelectArticles: ((params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
        detailMd: string;
        detail: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
                detailMd: string;
                detail: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getTagsArticles: ((params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
        detailMd: string;
        detail: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
                detailMd: string;
                detail: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getCoterieTagArticles: ((params: SearchWithPaginationParams & {
        coterieId: number;
    }) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
        detailMd: string;
        detail: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: SearchWithPaginationParams & {
                coterieId: number;
            }) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
                detailMd: string;
                detail: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getHotsArticles: (() => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getAuthorRelatedArticles: ((articleId: number) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getTagsRelatedArticles: ((articleId: number) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getContestRelatedArticles: ((articleId: number) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    like: ((articleId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    unlike: ((articleId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    star: ((articleId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    unstar: ((articleId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    createNote: ((articleId: number, body: NoteForm) => Promise<import("axios").AxiosResponse<{
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        id: number;
        username: string;
        createdAt: number;
        rootableId: number;
        rootableType: string;
        linkableId: number;
        linkableType: string;
        updatedAt: number;
        userId: number;
        parentId: number;
        content: string;
        contentMd: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number, body: NoteForm) => Promise<import("axios").AxiosResponse<{
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                id: number;
                username: string;
                createdAt: number;
                rootableId: number;
                rootableType: string;
                linkableId: number;
                linkableType: string;
                updatedAt: number;
                userId: number;
                parentId: number;
                content: string;
                contentMd: string;
            }>>;
        };
    };
    updateNote: ((articleId: number, noteId: number, body: NoteForm) => Promise<import("axios").AxiosResponse<{
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        id: number;
        username: string;
        createdAt: number;
        rootableId: number;
        rootableType: string;
        linkableId: number;
        linkableType: string;
        updatedAt: number;
        userId: number;
        parentId: number;
        content: string;
        contentMd: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number, noteId: number, body: NoteForm) => Promise<import("axios").AxiosResponse<{
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                id: number;
                username: string;
                createdAt: number;
                rootableId: number;
                rootableType: string;
                linkableId: number;
                linkableType: string;
                updatedAt: number;
                userId: number;
                parentId: number;
                content: string;
                contentMd: string;
            }>>;
        };
    };
    delNote: ((articleId: number, noteId: number) => Promise<import("axios").AxiosResponse<{
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        id: number;
        username: string;
        createdAt: number;
        rootableId: number;
        rootableType: string;
        linkableId: number;
        linkableType: string;
        updatedAt: number;
        userId: number;
        parentId: number;
        content: string;
        contentMd: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number, noteId: number) => Promise<import("axios").AxiosResponse<{
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                id: number;
                username: string;
                createdAt: number;
                rootableId: number;
                rootableType: string;
                linkableId: number;
                linkableType: string;
                updatedAt: number;
                userId: number;
                parentId: number;
                content: string;
                contentMd: string;
            }>>;
        };
    };
    getArticleNotes: ((articleId: number) => Promise<import("axios").AxiosResponse<{
        note: {
            likeCount: number;
            likeUsers: string;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            id: number;
            username: string;
            createdAt: number;
            rootableId: number;
            rootableType: string;
            linkableId: number;
            linkableType: string;
            updatedAt: number;
            userId: number;
            parentId: number;
            content: string;
            contentMd: string;
        };
        children: {
            likeCount: number;
            likeUsers: string;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            id: number;
            username: string;
            createdAt: number;
            rootableId: number;
            rootableType: string;
            linkableId: number;
            linkableType: string;
            updatedAt: number;
            userId: number;
            parentId: number;
            content: string;
            contentMd: string;
        }[];
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number) => Promise<import("axios").AxiosResponse<{
                note: {
                    likeCount: number;
                    likeUsers: string;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    id: number;
                    username: string;
                    createdAt: number;
                    rootableId: number;
                    rootableType: string;
                    linkableId: number;
                    linkableType: string;
                    updatedAt: number;
                    userId: number;
                    parentId: number;
                    content: string;
                    contentMd: string;
                };
                children: {
                    likeCount: number;
                    likeUsers: string;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    id: number;
                    username: string;
                    createdAt: number;
                    rootableId: number;
                    rootableType: string;
                    linkableId: number;
                    linkableType: string;
                    updatedAt: number;
                    userId: number;
                    parentId: number;
                    content: string;
                    contentMd: string;
                }[];
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    likeNote: ((articleId: number, noteId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number, noteId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    unlikeNote: ((articleId: number, noteId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number, noteId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    checkRedPacketSent: (() => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    getCalendar: ((params: {
        begin: number;
        finish: number;
    }) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                begin: number;
                finish: number;
            }) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    getUserArticleStats: (() => Promise<import("axios").AxiosResponse<{
        articleCount: number;
        tagCount: number;
        articleDays: number;
        privateCount: number;
        publicCount: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                articleCount: number;
                tagCount: number;
                articleDays: number;
                privateCount: number;
                publicCount: number;
            }>>;
        };
    };
    exportArticlePv: ((articleId: number) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number) => void;
        };
    };
    exportNotes: ((articleId: number) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (articleId: number) => void;
        };
    };
};
