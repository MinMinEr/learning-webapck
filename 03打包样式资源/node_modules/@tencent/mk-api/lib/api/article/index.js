var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { ArticleDetailHTTP, ArticleListHTTP, ArticleBaseHTTP, ArticleListWithDetailHTTP, UserArticleStatsHttp } from './types';
import { Http } from '../../http';
import { HttpBaseConfig, injectDefaultParams } from '../../base';
import { NewNoteHTTP, NoteWithReplyHTTP } from '../../define/note';
import { injectAPIGroup } from '../../inject';
import { createDownload } from '../../utils';
export const MkArticleApi = injectAPIGroup({
    /**
     * 创建笔记
     *
     * @param {ArticleForm} body
     * @returns
     */
    createArticle(body) {
        return ArticleBaseHTTP.post('/articles', body);
    },
    /**
     * 更新笔记
     *
     * @param {number} articleId
     * @param {ArticleForm} body
     * @returns
     */
    updateArticle(articleId, body) {
        return Http.put(`/article/${articleId}`, body);
    },
    /**
     * 删除笔记
     *
     * @param {number} articleId
     * @returns
     */
    delArticle(articleId) {
        return Http.delete(`/article/${articleId}`);
    },
    /**
     * 获取笔记
     *
     * @param {(number | string)} articleId
     * @returns
     */
    getArticle(articleId) {
        return ArticleDetailHTTP.get(`/article/${articleId}/detail`);
    },
    /**
     * 搜索笔记列表
     * @param {(FullPaginationParams & {
     *     contestOnly: boolean // 是否为赛事笔记
     *     tagIds: number[] // 标签
     *   })} [params]
     * @returns
     */
    search(params) {
        const _a = params || {}, { tagIds } = _a, rst = __rest(_a, ["tagIds"]);
        return ArticleListWithDetailHTTP.list().get('/articles/search', {
            params: injectDefaultParams(Object.assign({ tag_id: tagIds }, rst)),
        });
    },
    /**
     * 笔记workspaces中根据用户笔记中的话题获取对应笔记列表
     * @param {(FullPaginationParams & { subjectId: number[] })} params
     * @returns
     */
    getUserArticles(params) {
        const { begin, end } = params, rst = __rest(params, ["begin", "end"]);
        return ArticleListWithDetailHTTP.list().get('/articles/user/search', {
            params: injectDefaultParams(Object.assign({ begin_date: begin, end_date: end }, rst)),
        });
    },
    /**
     * 获取最新笔记列表
     * @param {PaginationParams} [params]
     * @returns
     */
    getNewestArticles(params) {
        return ArticleListWithDetailHTTP.list().get('/articles/newest', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取每日锦囊(精选)笔记列表
     * @param {PaginationParams} [params]
     * @returns
     */
    getSelectArticles(params) {
        return ArticleListWithDetailHTTP.list().get('/articles/select', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 根据标签获取文章
     * 如果标签为空, 则根据用户订阅的标签获取文章
     *
     * @param {PaginationParams} [params]
     * @returns
     */
    getTagsArticles(params) {
        return ArticleListWithDetailHTTP.list().get('/articles/tags', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 根据圈子订阅的标签获取对应的标签文章
     * @param {(SearchWithPaginationParams & {
     *     coterieId: number
     *   })} params
     * @returns
     */
    getCoterieTagArticles(params) {
        const { coterieId } = params, rst = __rest(params, ["coterieId"]);
        return ArticleListWithDetailHTTP.list().get('/articles/coterie_tags', {
            params: injectDefaultParams(Object.assign(Object.assign({}, rst), { coterie_id: coterieId })),
        });
    },
    /**
     * 获取过去7天热门文章
     *
     * @returns
     */
    getHotsArticles() {
        return ArticleListHTTP.list().get('/articles/hottest10');
    },
    /**
     * 根据当前文章作者获取相关文章
     *
     * @param {number} articleId
     * @param {PaginationParams} [params]
     * @returns
     */
    getAuthorRelatedArticles(articleId) {
        return ArticleListHTTP.list().get(`/article/${articleId}/author_related`);
    },
    /**
     * 根据当前文章标签获取相关文章
     *
     * @param {number} articleId
     * @param {PaginationParams} [params]
     * @returns
     */
    getTagsRelatedArticles(articleId) {
        return ArticleListHTTP.list().get(`/article/${articleId}/tags_related`);
    },
    /**
     * 获取当前笔记中对应比赛的其他代码笔记
     *
     * @param {number} articleId
     * @returns
     */
    getContestRelatedArticles(articleId) {
        return ArticleListHTTP.list().get(`/article/${articleId}/contest_related`);
    },
    /**
     * 点赞
     *
     * @param {number} articleId
     * @returns
     */
    like(articleId) {
        return Http.post(`/article/${articleId}/like`);
    },
    /**
     * 取消点赞
     *
     * @param {number} articleId
     * @returns
     */
    unlike(articleId) {
        return Http.delete(`/article/${articleId}/like`);
    },
    /**
     * 关注
     *
     * @param {number} articleId
     * @returns
     */
    star(articleId) {
        return Http.post(`/article/${articleId}/star`);
    },
    /**
     * 取消关注
     *
     * @param {number} articleId
     * @returns
     */
    unstar(articleId) {
        return Http.delete(`/article/${articleId}/star`);
    },
    /**
     * 创建评论
     *
     * @param {number} articleId
     * @param {NoteForm} body
     * @returns
     */
    createNote(articleId, body) {
        return NewNoteHTTP.post(`/article/${articleId}/notes`, body);
    },
    /**
     * 更新评论
     *
     * @param {number} articleId
     * @param {number} noteId
     * @param {NoteForm} body
     * @returns
     */
    updateNote(articleId, noteId, body) {
        return NewNoteHTTP.put(`/article/${articleId}/${noteId}`, body);
    },
    /**
     * 删除评论
     *
     * @param {number} articleId
     * @param {number} noteId
     * @returns
     */
    delNote(articleId, noteId) {
        return NewNoteHTTP.delete(`/article/${articleId}/${noteId}`);
    },
    /**
     * 获取文章评论
     *
     * @param {number} articleId
     * @returns
     */
    getArticleNotes(articleId) {
        return NoteWithReplyHTTP.list().get(`/article/${articleId}/notes`);
    },
    /**
     * 点赞评论
     *
     * @param {number} articleId
     * @returns
     */
    likeNote(articleId, noteId) {
        return Http.post(`/article/${articleId}/note/${noteId}/like`);
    },
    /**
     * 取消点赞评论
     *
     * @param {number} articleId
     * @returns
     */
    unlikeNote(articleId, noteId) {
        return Http.delete(`/article/${articleId}/note/${noteId}/like`);
    },
    /**
     * 检查用户是否已经领取首发笔记红包
     *
     * @returns
     */
    checkRedPacketSent() {
        return Http.get('/articles/check_if_red_packet_sent');
    },
    /**
     * 获取笔记时间范围内有产生过笔记的日期以及数量
     *
     * @param {{ begin: number, finish: number }} params
     * @returns
     */
    getCalendar(params) {
        const { begin, finish } = params;
        return Http.get('/articles/calendar', {
            params: {
                begin_time: begin,
                finish_time: finish,
            },
        });
    },
    /**
     * 获取用户笔记相关数据
     * 笔记数, 标签数, 天数
     * @returns
     */
    getUserArticleStats() {
        return UserArticleStatsHttp.get('/articles/stats');
    },
    /**
     * 导出笔记PV记录
     * @param {number} articleId
     */
    exportArticlePv(articleId) {
        const url = `${HttpBaseConfig.API_BASE}/user/pv/record/export/article?article_id=${articleId}`;
        createDownload(url);
    },
    /**
     * 导出笔记评论
     *
     * @param {number} articleId
     */
    exportNotes(articleId) {
        const url = `${HttpBaseConfig.API_BASE}/article/${articleId}/export`;
        createDownload(url);
    },
});
