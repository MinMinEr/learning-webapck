import { PaginationParams, FullPaginationParams, SearchWithPaginationParams } from '../../types';
interface TagSearchParams extends FullPaginationParams {
    mine: Boolean;
}
export declare const MkTagApi: {
    get: ((tagId: number) => Promise<import("axios").AxiosResponse<{
        childTagList: {
            id: number;
            name: string;
            parentId: number;
        }[];
        id: number;
        name: string;
        type: string;
        subscribeCount: number;
        problemRefCount: number;
        articleRefCount: number;
        contributors: string;
        notifications: string;
        createdAt: number;
        curStar: boolean;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (tagId: number) => Promise<import("axios").AxiosResponse<{
                childTagList: {
                    id: number;
                    name: string;
                    parentId: number;
                }[];
                id: number;
                name: string;
                type: string;
                subscribeCount: number;
                problemRefCount: number;
                articleRefCount: number;
                contributors: string;
                notifications: string;
                createdAt: number;
                curStar: boolean;
            }>>;
        };
    };
    getRecommend: ((params: {
        contexts?: string[];
        selectedTags?: string[];
    }) => Promise<import("axios").AxiosResponse<{
        name: string;
        value: number;
        selected: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                contexts?: string[];
                selectedTags?: string[];
            }) => Promise<import("axios").AxiosResponse<{
                name: string;
                value: number;
                selected: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    search: ((params?: TagSearchParams | undefined) => Promise<import("axios").AxiosResponse<{
        childTagList: {
            id: number;
            name: string;
            parentId: number;
        }[];
        id: number;
        name: string;
        type: string;
        subscribeCount: number;
        problemRefCount: number;
        articleRefCount: number;
        contributors: string;
        notifications: string;
        createdAt: number;
        curStar: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: TagSearchParams | undefined) => Promise<import("axios").AxiosResponse<{
                childTagList: {
                    id: number;
                    name: string;
                    parentId: number;
                }[];
                id: number;
                name: string;
                type: string;
                subscribeCount: number;
                problemRefCount: number;
                articleRefCount: number;
                contributors: string;
                notifications: string;
                createdAt: number;
                curStar: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getQuestion: ((tagId: number, params: {
        type: 'not_answer' | 'all';
    } & PaginationParams) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (tagId: number, params: {
                type: 'not_answer' | 'all';
            } & PaginationParams) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getArticle: ((tagId: number, params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
        detailMd: string;
        detail: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (tagId: number, params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
                detailMd: string;
                detail: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getUserRecommendTags: (() => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string; /**
         * 搜索标签
         *
         * @param {TagSearchParams} [params]
         * @returns
         */
        positionTag: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string; /**
                 * 搜索标签
                 *
                 * @param {TagSearchParams} [params]
                 * @returns
                 */
                positionTag: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    create: ((params: {
        tagName: string;
        subscribed?: boolean;
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        type: string;
        subscribeCount: number;
        problemRefCount: number;
        articleRefCount: number;
        contributors: string;
        notifications: string;
        createdAt: number;
        curStar: boolean;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                tagName: string;
                subscribed?: boolean;
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                type: string;
                subscribeCount: number;
                problemRefCount: number;
                articleRefCount: number;
                contributors: string;
                notifications: string;
                createdAt: number;
                curStar: boolean;
            }>>;
        };
    };
};
export {};
