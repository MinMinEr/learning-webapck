import { injectDefaultParams } from '../../base';
import { TagForSelectHttp, TagForRecommendHttp, TagWithChildrenHttp, TagHttp } from './types';
import { QuestionListHttp } from '../question/types';
import { injectAPIGroup } from '../../inject';
import { ArticleListWithDetailHTTP } from '../article/types';
export const MkTagApi = injectAPIGroup({
    /**
     * 获取标签信息
     *
     * @param {number} tagId
     * @returns
     */
    get(tagId) {
        return TagWithChildrenHttp.get(`/tag/${tagId}`);
    },
    /**
     * 获取推荐标签
     * @param {{ contexts?: string[]; selectedTags?: string[] }} [params]
     * @returns
     */
    getRecommend(params) {
        return TagForSelectHttp.list().post('/tags/recommend', params);
    },
    /**
     * 搜索标签
     *
     * @param {TagSearchParams} [params]
     * @returns
     */
    search(params) {
        return TagWithChildrenHttp.list().get('/tags/search', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取标签下某种类型的问答
     *
     * not_answer: 等待回答
     * all: 所有
     * @param {number} tagId
     * @param {({
     *       type: 'not_answer' | 'all'
     *     } & PaginationParams)} params
     * @returns
     */
    getQuestion(tagId, params) {
        return QuestionListHttp.list().get(`/tag/${tagId}/problems/search`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取标签下的文章
     *
     * @param {number} tagId 标签id
     * @param {SearchWithPaginationParams} [params] 分页查询参数
     * @returns
     */
    getArticle(tagId, params) {
        return ArticleListWithDetailHTTP.list().get(`/tag/${tagId}/articles/search`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取首页弹窗推荐标签
     *
     *  @returns
     */
    getUserRecommendTags() {
        return TagForRecommendHttp.list().get('/tags/user_hot');
    },
    /**
     * 创建标签
     *
     *  @param {{ tagName: string; subscribed?: boolean }} params
     *  @returns
     */
    create(params) {
        return TagHttp.post('/tag/create', null, {
            params,
        });
    },
});
