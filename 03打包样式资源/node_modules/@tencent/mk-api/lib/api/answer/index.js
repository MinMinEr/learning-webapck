import { Http } from '../../http';
import { AnswerHttp, AnswerWithNoteHttp } from './types';
import { injectDefaultParams } from '../../base';
import { injectAPIGroup } from '../../inject';
export const MkAnswerApi = injectAPIGroup({
    /**
     * 获取用户在问题中的回答
     * 如果username为空则获取当前用户
     *
     * @param {number} questionId
     * @param {{
     *     username: string
     *   }} [params]
     * @returns
     */
    getAnswerByUser(questionId, params) {
        return AnswerHttp.get(`/problem/${questionId}/answer/user`, {
            params,
        });
    },
    /**
     * 获取全部回答列表
     *
     * @param {number} questionId
     * @param {FullPaginationParams} [params]
     * @returns
     */
    getByQuestion(questionId, params) {
        return AnswerWithNoteHttp.list().get(`/problem/${questionId}/answer`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取回答内容, 并带上评论
     *
     * @param {number} questionId
     * @param {number} answerId
     * @returns
     */
    getWithNote(questionId, answerId) {
        return AnswerWithNoteHttp.get(`/problem/${questionId}/answer/${answerId}/detail`);
    },
    /**
     * 获取回答, 无评论
     *
     * @param {number} questionId
     * @param {number} answerId
     * @returns
     */
    get(questionId, answerId) {
        return AnswerHttp.get(`/problem/${questionId}/answer/${answerId}`);
    },
    /**
     * 创建回答
     * 如果post不传则默认使用主岗
     *
     * @param {number} questionId
     * @param {AnswerForm} answerForm
     * @returns
     */
    create(questionId, answerForm) {
        return AnswerHttp.post(`/problem/${questionId}/answer`, answerForm);
    },
    /**
     * 更新回答
     * 如果post不传则维持现有post
     * @param {number} questionId
     * @param {number} answerId
     * @param {AnswerForm} answerForm
     * @returns
     */
    update(questionId, answerId, answerForm) {
        return AnswerHttp.put(`/problem/${questionId}/answer/${answerId}`, answerForm);
    },
    /**
     * 删除回答
     *
     * @param {number} questionId
     * @param {number} answerId
     * @returns
     */
    delete(questionId, answerId) {
        return Http.delete(`/problem/${questionId}/answer/${answerId}`);
    },
    /**
     * 赞同回答
     *
     * @param {number} questionId
     * @param {number} answerId
     * @returns
     */
    agree(questionId, answerId) {
        return Http.post(`/problem/${questionId}/answer/${answerId}/agree`);
    },
    /**
     * 取消回答赞同
     *
     * @param {number} questionId
     * @param {number} answerId
     * @returns
     */
    unAgree(questionId, answerId) {
        return Http.delete(`/problem/${questionId}/answer/${answerId}/agree`);
    },
    /**
     * 采纳回答
     *
     * @param {number} questionId
     * @param {number} answerId
     * @returns
     */
    accept(questionId, answerId) {
        return Http.put(`/problem/${questionId}/answer/${answerId}/accept`);
    },
    /**
     * 取消回答采纳
     *
     * @param {number} questionId
     * @param {number} answerId
     * @returns
     */
    unAccept(questionId, answerId) {
        return Http.put(`/problem/${questionId}/answer/${answerId}/unaccept`);
    },
});
