import { StrOrNum, FullPaginationParams } from '../../types';
interface AnswerForm {
    description: string;
    sourceId?: StrOrNum;
    sourceType?: string;
    post?: string;
}
export declare const MkAnswerApi: {
    getAnswerByUser: ((questionId: number, params?: {
        username: string;
    } | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        problemId: number;
        accepted: boolean;
        readCount: number;
        noteCount: number;
        imageField: string;
        videoField: string;
        contentPlain: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        source: string;
        post: string;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        disagreeUsernames: string;
        content: string;
        contentMd: string;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, params?: {
                username: string;
            } | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                problemId: number;
                accepted: boolean;
                readCount: number;
                noteCount: number;
                imageField: string;
                videoField: string;
                contentPlain: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                source: string;
                post: string;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                disagreeUsernames: string;
                content: string;
                contentMd: string;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    getByQuestion: ((questionId: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        answer: {
            id: number;
            problemId: number;
            accepted: boolean;
            readCount: number;
            noteCount: number;
            imageField: string;
            videoField: string;
            contentPlain: string;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            source: string;
            post: string;
            agreeCount: number;
            agreeUsernames: string;
            disagreeCount: number;
            disagreeUsernames: string;
            content: string;
            contentMd: string;
            createdAt: number;
            updatedAt: number;
        };
        notes: {
            id: number;
            rootableId: number;
            linkableId: number;
            source: string;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            createdAt: number;
            updatedAt: number;
            content: string;
            contentMd: string;
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                answer: {
                    id: number;
                    problemId: number;
                    accepted: boolean;
                    readCount: number;
                    noteCount: number;
                    imageField: string;
                    videoField: string;
                    contentPlain: string;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    source: string;
                    post: string;
                    agreeCount: number;
                    agreeUsernames: string;
                    disagreeCount: number;
                    disagreeUsernames: string;
                    content: string;
                    contentMd: string;
                    createdAt: number;
                    updatedAt: number;
                };
                notes: {
                    id: number;
                    rootableId: number;
                    linkableId: number;
                    source: string;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    createdAt: number;
                    updatedAt: number;
                    content: string;
                    contentMd: string;
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getWithNote: ((questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<{
        answer: {
            id: number;
            problemId: number;
            accepted: boolean;
            readCount: number;
            noteCount: number;
            imageField: string;
            videoField: string;
            contentPlain: string;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            source: string;
            post: string;
            agreeCount: number;
            agreeUsernames: string;
            disagreeCount: number;
            disagreeUsernames: string;
            content: string;
            contentMd: string;
            createdAt: number;
            updatedAt: number;
        };
        notes: {
            id: number;
            rootableId: number;
            linkableId: number;
            source: string;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            createdAt: number;
            updatedAt: number;
            content: string;
            contentMd: string;
        };
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<{
                answer: {
                    id: number;
                    problemId: number;
                    accepted: boolean;
                    readCount: number;
                    noteCount: number;
                    imageField: string;
                    videoField: string;
                    contentPlain: string;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    source: string;
                    post: string;
                    agreeCount: number;
                    agreeUsernames: string;
                    disagreeCount: number;
                    disagreeUsernames: string;
                    content: string;
                    contentMd: string;
                    createdAt: number;
                    updatedAt: number;
                };
                notes: {
                    id: number;
                    rootableId: number;
                    linkableId: number;
                    source: string;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    createdAt: number;
                    updatedAt: number;
                    content: string;
                    contentMd: string;
                };
            }>>;
        };
    };
    get: ((questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        problemId: number;
        accepted: boolean;
        readCount: number;
        noteCount: number;
        imageField: string;
        videoField: string;
        contentPlain: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        source: string;
        post: string;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        disagreeUsernames: string;
        content: string;
        contentMd: string;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                problemId: number;
                accepted: boolean;
                readCount: number;
                noteCount: number;
                imageField: string;
                videoField: string;
                contentPlain: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                source: string;
                post: string;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                disagreeUsernames: string;
                content: string;
                contentMd: string;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    create: ((questionId: number, answerForm: AnswerForm) => Promise<import("axios").AxiosResponse<{
        id: number;
        problemId: number;
        accepted: boolean;
        readCount: number;
        noteCount: number;
        imageField: string;
        videoField: string;
        contentPlain: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        source: string;
        post: string;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        disagreeUsernames: string;
        content: string;
        contentMd: string;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, answerForm: AnswerForm) => Promise<import("axios").AxiosResponse<{
                id: number;
                problemId: number;
                accepted: boolean;
                readCount: number;
                noteCount: number;
                imageField: string;
                videoField: string;
                contentPlain: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                source: string;
                post: string;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                disagreeUsernames: string;
                content: string;
                contentMd: string;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    update: ((questionId: number, answerId: number, answerForm: AnswerForm) => Promise<import("axios").AxiosResponse<{
        id: number;
        problemId: number;
        accepted: boolean;
        readCount: number;
        noteCount: number;
        imageField: string;
        videoField: string;
        contentPlain: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        source: string;
        post: string;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        disagreeUsernames: string;
        content: string;
        contentMd: string;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, answerId: number, answerForm: AnswerForm) => Promise<import("axios").AxiosResponse<{
                id: number;
                problemId: number;
                accepted: boolean;
                readCount: number;
                noteCount: number;
                imageField: string;
                videoField: string;
                contentPlain: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                source: string;
                post: string;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                disagreeUsernames: string;
                content: string;
                contentMd: string;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    delete: ((questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    agree: ((questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    unAgree: ((questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    accept: ((questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    unAccept: ((questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, answerId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
};
export {};
