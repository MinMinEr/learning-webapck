import { NumberDTO, BooleanDTO, StringDTO, BaseUser, BaseTime, Linkable, ShortKV, } from '../../define/base';
import { TypeWrapper } from '../../http';
import { UserShortInfo, UserExpert } from '../user/types';
import { CoterieBase, CoterieConfig, CoterieDetail, CoteriesListItem, } from './baseType';
import { QuestionListItem, QuestionBase } from '../question/types';
import { Idea } from '../idea/types';
import { pick, extend, union, constant, optional } from '../../define/helper';
import { AdvertBase } from '../banner/types';
import { Article, ArticleListWithDetail } from '../article/types';
export const SimpleCoteries = pick(CoterieBase, ['id', 'avatar', 'name']);
export const CoterieConfigHttp = TypeWrapper(CoterieConfig);
export const CoterieBaseHttp = TypeWrapper(CoterieBase);
export const CoterieDetailHttp = TypeWrapper(CoterieDetail);
export const CoteriesListHttp = TypeWrapper(CoteriesListItem);
// 获取用户管理的圈子
export const AdminCoteries = extend(SimpleCoteries, {
    config: pick(CoterieConfig, ['tapdEnabled']),
});
export const AdminCoteriesHttp = TypeWrapper(AdminCoteries);
// 获取圈子成员
export const CoterieMember = extend({
    id: NumberDTO,
    accessLevel: NumberDTO,
    author: UserShortInfo,
    ideaCount: NumberDTO,
    answerCount: NumberDTO,
    createdAt: NumberDTO,
    answerAgreeCount: NumberDTO,
    problemCount: NumberDTO,
    articleCount: NumberDTO,
    articleAgreeCount: NumberDTO,
}, BaseUser);
export const CoterieMemberHttp = TypeWrapper(CoterieMember);
// 获取圈子动态, 带置顶状态, 带来源字段(供图谱使用)
export const CoterieIdea = extend(Idea, optional({
    ideaLink: {
        sticked: BooleanDTO,
    },
}));
export const CoterieIdeaHttp = TypeWrapper(CoterieIdea);
// 获取圈子问答, 带圈子中相关的置顶状态
export const CoterieQuestion = extend(optional({
    problemLinks: [
        {
            sticked: BooleanDTO,
            classificationName: StringDTO,
        },
    ],
}), QuestionListItem);
export const CoterieQuestionHttp = TypeWrapper(CoterieQuestion);
// 不带圈子内部置顶状态
export const CoterieOutbox = union({
    id: NumberDTO,
    opType: NumberDTO,
    rootableType: constant('problem'),
    linkableType: constant('problem'),
    related: QuestionListItem,
    coterie: SimpleCoteries,
    author: UserShortInfo,
    createdAt: NumberDTO,
}, {
    id: NumberDTO,
    opType: NumberDTO,
    rootableType: constant('idea'),
    linkableType: constant('idea'),
    related: Idea,
    coterie: SimpleCoteries,
    author: UserShortInfo,
    createdAt: NumberDTO,
}, {
    id: NumberDTO,
    opType: NumberDTO,
    rootableType: constant('article'),
    linkableType: constant('article'),
    related: pick(Article, ['title', 'id', 'likeUsers', 'noteCount']),
    coterie: SimpleCoteries,
    author: UserShortInfo,
    createdAt: NumberDTO,
});
export const CoterieOutboxHttp = TypeWrapper(CoterieOutbox);
// 带圈子内部置顶状态
export const CoterieOutboxWithStick = union({
    id: NumberDTO,
    opType: NumberDTO,
    rootableType: constant('problem'),
    linkableType: constant('problem'),
    sticked: BooleanDTO,
    related: QuestionListItem,
    coterie: SimpleCoteries,
    author: UserShortInfo,
    createdAt: NumberDTO,
}, {
    id: NumberDTO,
    opType: NumberDTO,
    rootableType: constant('idea'),
    linkableType: constant('idea'),
    sticked: BooleanDTO,
    related: Idea,
    coterie: SimpleCoteries,
    author: UserShortInfo,
    createdAt: NumberDTO,
}, {
    id: NumberDTO,
    opType: NumberDTO,
    rootableType: constant('article'),
    linkableType: constant('article'),
    sticked: BooleanDTO,
    related: pick(Article, ['title', 'id', 'likeUsers', 'noteCount']),
    coterie: SimpleCoteries,
    author: UserShortInfo,
    createdAt: NumberDTO,
});
export const CoterieOutboxWithStickHttp = TypeWrapper(CoterieOutboxWithStick);
export const CoterieExpert = extend({
    id: NumberDTO,
    description: StringDTO,
    user: UserExpert,
    coteries: [SimpleCoteries],
}, BaseTime);
export const CoterieExpertAdvert = extend({
    related: CoterieExpert,
}, AdvertBase);
export const CoterieExpertAdvertHttp = TypeWrapper(CoterieExpertAdvert);
// 圈内成员数据
const CoterieMemberData = {
    username: StringDTO,
    bg: StringDTO,
    incrScore: NumberDTO,
    org: StringDTO,
    accessLevel: NumberDTO,
    createdAt: NumberDTO,
    score: NumberDTO,
    problemCount: NumberDTO,
    answerCount: NumberDTO,
    ideaCount: NumberDTO,
    articleCount: NumberDTO,
    problemAgreeCount: NumberDTO,
    answerAgreeCount: NumberDTO,
    articleAgreeCount: NumberDTO,
};
export const CoterieMemberDataHttp = TypeWrapper(CoterieMemberData);
// 圈内Feed流统计数据
const CoterieFeedData = {
    createdAt: NumberDTO,
    pvCount: NumberDTO,
    uvCount: NumberDTO,
    problemCount: NumberDTO,
    answerCount: NumberDTO,
    ideaCount: NumberDTO,
    articleCount: NumberDTO,
};
export const CoterieFeedDataHttp = TypeWrapper(CoterieFeedData);
const RobotLinkBase = extend({
    chatId: StringDTO,
    notifyNewProblem: BooleanDTO,
    notifyNewAnswer: BooleanDTO,
    notifyNewIdea: BooleanDTO,
    notifyNewArticle: BooleanDTO,
    dailyPush: BooleanDTO,
    tags: [ShortKV],
}, BaseUser, Linkable, BaseTime);
// 微信机器人
const Robot = {
    chat: extend({
        robotId: NumberDTO,
        charId: StringDTO,
        chatName: StringDTO,
        chatType: StringDTO,
        members: StringDTO,
        memberTotal: NumberDTO,
        receivePush: BooleanDTO,
    }, BaseTime),
    chatLink: RobotLinkBase,
};
const RobotLink = extend(RobotLinkBase, {
    coterie: pick(CoterieBase, ['id', 'name']),
});
export const CoterieRobotHttp = TypeWrapper(Robot);
export const CoterieRobotLinkHttp = TypeWrapper(RobotLink);
// 圈子指标基础数据
const CoterieIndicatorItem = {
    answerCount: NumberDTO,
    answeredProblemCount: NumberDTO,
    articleCount: NumberDTO,
    ideaCount: NumberDTO,
    memberCount: NumberDTO,
    problemCount: NumberDTO,
    pvCount: NumberDTO,
};
// 圈子指标基础数据 + 排名
const CoterieIndicatorItemWithRank = extend(CoterieIndicatorItem, {
    categoryRank: NumberDTO,
    rank: NumberDTO,
});
export const CoterieIndicator = {
    curWeek: CoterieIndicatorItem,
    lastMonth: CoterieIndicatorItemWithRank,
    lastWeek: CoterieIndicatorItemWithRank,
    total: CoterieIndicatorItem,
};
export const CoterieIndicatorHttp = TypeWrapper(CoterieIndicator);
// 圈子站内信发送历史
const CoterieMsgHistory = {
    id: NumberDTO,
    content: StringDTO,
    username: StringDTO,
    finalListCount: NumberDTO,
    readCount: NumberDTO,
    createdAt: NumberDTO,
    state: NumberDTO,
};
export const CoterieMsgHistoryHttp = TypeWrapper(CoterieMsgHistory);
export const CoterieTapd = extend({
    id: NumberDTO,
    coterieId: NumberDTO,
    linkableName: StringDTO,
    linkableUrl: StringDTO,
}, BaseUser, BaseTime, Linkable);
export const CoterieTapdHttp = TypeWrapper(CoterieTapd);
// 圈子与外部关联模型
export const CoterieExternalLink = extend({
    id: NumberDTO,
    innerId: NumberDTO,
    externalRootName: StringDTO,
    externalRootId: NumberDTO,
    externalLinkId: NumberDTO,
    externalLinkType: StringDTO,
    createdAt: NumberDTO,
}, BaseUser);
export const CoterieProblemWithTapdLink = {
    problem: pick(QuestionBase, ['id', 'titleMd', 'answerCount', 'answeredAt', 'createdAt']),
    link: CoterieExternalLink,
};
export const CoterieProblemWithTapdLinkHttp = TypeWrapper(CoterieProblemWithTapdLink);
export const CoterieContentCategory = {
    id: NumberDTO,
    name: StringDTO,
    order: NumberDTO,
    contentCount: NumberDTO,
};
export const CoterieContentCategoryHttp = TypeWrapper(CoterieContentCategory);
// 圈内笔记, 带详情, 带links
export const CoterieArticle = extend(ArticleListWithDetail, {
    articleLinks: {
        classificationName: StringDTO,
    },
});
export const CoterieArticleHttp = TypeWrapper(CoterieArticle);
