var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { HttpBaseConfig, injectDefaultParams } from '../../base';
import { Http } from '../../http';
import qs from 'qs';
import { createDownload } from '../../utils';
import { AdminCoteriesHttp, CoterieBaseHttp, CoterieDetailHttp, CoterieMemberHttp, CoteriesListHttp, CoterieConfigHttp, CoterieQuestionHttp, CoterieOutboxHttp, CoterieOutboxWithStickHttp, CoterieIdeaHttp, CoterieExpertAdvertHttp, CoterieMemberDataHttp, CoterieFeedDataHttp, CoterieIndicatorHttp, CoterieRobotHttp, CoterieRobotLinkHttp, CoterieMsgHistoryHttp, CoterieTapdHttp, CoterieProblemWithTapdLinkHttp, CoterieContentCategoryHttp, CoterieArticleHttp, } from './types';
import { QuestionListHttp } from '../question/types';
import { IdeaHttp, IdeaWithStickedHttp } from '../idea/types';
import { TagHttp } from '../tag/types';
import { SubjectHttp } from '../subject/types';
import { AdvertBaseHttp } from '../banner/types';
import { ArticleListHTTP } from '../article/types';
import { injectAPIGroup } from '../../inject';
import { TemplateHttp } from '../template/types';
export const MkCoterieApi = injectAPIGroup({
    /**
     * 创建圈子
     *
     * @param {CoterieForm} coterieForm
     * @returns
     */
    create(coterieForm) {
        return CoterieBaseHttp.post('/coteries', coterieForm);
    },
    /**
     * 更新圈子
     * @param {number} coterieId
     * @param {CoterieForm} coterieForm
     * @returns
     */
    update(coterieId, coterieForm) {
        return CoterieBaseHttp.put(`/coterie/${coterieId}`, coterieForm);
    },
    /**
     * 删除圈子
     *
     * @param {number} coterieId
     * @returns
     */
    delete(coterieId) {
        return Http.delete(`/coterie/${coterieId}`);
    },
    /**
     * 检查名字是否重名
     *
     * @param {{ coterieName: string }} { coterieName }
     * @returns
     */
    checkName(params) {
        return Http.get('/coteries/check_name', {
            params,
        });
    },
    /**
     * 获取圈子详情
     *
     * @param {number} coterieId
     * @returns
     */
    get(coterieId) {
        return CoterieDetailHttp.get(`/coterie/${coterieId}`);
    },
    /**
     * 根据类型获取问答
     * selected为圈内问答 tags为根据圈子订阅标签的问答
     * params.tagIds selected时可获取特定标签问答
     * @param {number} coterieId
     * @param {('selected' | 'tags')} [type='selected']
     * @param {({
     *       statsTotal?: boolean
     *       tagIds: StrOrNum[] // selected时可用
     *       stick?: boolean,
     *       userIds?: number[], // selected时可用
     *     } & SearchWithPaginationParams)} params
     * @returns
     */
    getQuestion(coterieId, type, params) {
        const { tagIds, userIds } = params, rst = __rest(params, ["tagIds", "userIds"]);
        console.warn('[MkCoterieApi.getQuestion] 即将废弃, 请根据使用情况改用searchQuestion或者getRecommendQuestionByTag');
        return CoterieQuestionHttp.list().get(`/coterie/${coterieId}/problems/${type}`, {
            params: injectDefaultParams(Object.assign({ statsTotal: false, tag_ids: tagIds, user_ids: userIds }, rst)),
        });
    },
    /**
     * 圈内问答搜索
     * @param {number} coterieId
     * @param {({
     *       statsTotal?: boolean;
     *       tagIds: StrOrNum[];
     *       stick?: boolean;
     *       userIds?: number[];
     *       categoryIds?: number[]; // 分类id
     *       noCategory?: boolean // 是否未分类, 需要搜未未分类时传true
     *     } & SearchWithPaginationParams)} params
     * @returns
     */
    searchQuestion(coterieId, params) {
        const { tagIds, userIds, categoryIds, noCategory } = params, rst = __rest(params, ["tagIds", "userIds", "categoryIds", "noCategory"]);
        return CoterieQuestionHttp.list().get(`/coterie/${coterieId}/problems/selected`, {
            params: injectDefaultParams(Object.assign({ statsTotal: false, tag_ids: tagIds, user_ids: userIds, classification_ids: categoryIds, none_classification: noCategory }, rst)),
        });
    },
    /**
     * 根据圈内标签拉取推荐的问答, 用于圈内收录
     * @param {number} coterieId
     * @param {SearchWithPaginationParams} params
     * @returns
     */
    getRecommendQuestionByTag(coterieId, params) {
        return CoterieQuestionHttp.list().get(`/coterie/${coterieId}/problems/tags`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取oteam热议
     *
     * @param {({ statsTotal?: boolean } & SearchWithPaginationParams)} [params]
     * @returns
     */
    getOteamHotQuestion(params) {
        return QuestionListHttp.list().get('/coteries/problems/v_selected', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取用户管理圈子列表
     *
     * @returns
     */
    getAdminCoteries() {
        return AdminCoteriesHttp.list().get('/coteries/user_admin/active');
    },
    /**
     * 获取当前圈子当前用户信息, 包括身份, 如果不存在则该用户未加入圈子
     * @param {number} coterieId
     * @param {number} userId
     * @returns
     */
    getMember(coterieId, userId) {
        return CoterieMemberHttp.get(`/coterie/${coterieId}/members/${userId}`);
    },
    /**
     * 获取热门圈子
     *
     * @param {{ categoryIds: number[] }} params
     * @returns
     */
    getHotCoteries(params) {
        return CoteriesListHttp.list().get('/coteries/hot', {
            params: params ? { category_ids: params.categoryIds } : undefined,
        });
    },
    /**
     * 获取oteam类的热门圈子
     * @returns
     */
    getOteamHotCoteries() {
        return CoteriesListHttp.list().get('/coteries/oteam/hot');
    },
    /**
     * 根据标签获取推荐圈子
     *
     * @param {{ tagIds: number[] }} params
     * @returns
     */
    getRecommendCoteries(params) {
        return CoteriesListHttp.list().get('/coteries/recommend_by_tag', {
            params: { tag_ids: params.tagIds },
        });
    },
    /**
     * 搜索圈子
     * tagIds 标签id, 用逗号分隔
     * categoryIds: 分类id, 用逗号分隔
     * v?: oteam圈子筛选，v=‘blue’或者不传
     * @param {SearchCoteriesParams} params
     * @returns
     */
    searchCoteries(params) {
        return CoteriesListHttp.list().get('/coteries', {
            params: injectDefaultParams(Object.assign({ sort: 'member_count desc' }, params)),
        });
    },
    /**
     * 获取圈内成员列表
     *
     * params.sort:
     *        active: 按活跃程度
     *        default: 按加入时间
     *        string: 按数据库自定义排序字段
     * @param {number} coterieId
     * @param {FullCoterieAdminDataParams} params
     * @returns
     */
    getMembers(coterieId, params) {
        const _a = params || {}, { beginTime, finishTime } = _a, rst = __rest(_a, ["beginTime", "finishTime"]);
        return CoterieMemberHttp.list().get(`/coterie/${coterieId}/members`, {
            params: injectDefaultParams(Object.assign(Object.assign({}, rst), { begin_time: beginTime, finish_time: finishTime })),
        });
    },
    /**
     * 获取圈子活跃成员
     * @param {number} coterieId
     * @returns
     */
    getMostActiveMembers(coterieId) {
        return CoterieMemberHttp.list().get(`/rank/coterie/${coterieId}/most_active`);
    },
    /**
     * 加入圈子
     *
     * @param {number} coterieId
     * @param {(number | null)} userId
     * @param {{ accessLevel: number }} { accessLevel }
     * @returns
     */
    join(coterieId, userId, { accessLevel } = {}) {
        let joinUrl = `/coterie/${coterieId}/members/join`;
        if (userId) {
            joinUrl = `/coterie/${coterieId}/members/${userId}/join`;
        }
        return CoterieMemberHttp.post(joinUrl, null, {
            params: {
                access_level: accessLevel || 10,
            },
        });
    },
    /**
     * 批量加入圈子
     *
     * @param {number} coterieId
     * @param {{ usernames: string[] }} body
     * @returns
     */
    multiJoin(coterieId, body) {
        return Http.post(`/coterie/${coterieId}/members/bulk_join`, body);
    },
    /**
     * 离开圈子
     *
     * @param {number} coterieId
     * @param {(number | null)} userId
     * @returns
     */
    leave(coterieId, userId) {
        const base = `/coterie/${coterieId}/members/`;
        if (userId) {
            return Http.delete(`${base}${userId}/leave`);
        }
        return Http.delete(`${base}leave`);
    },
    /**
     * 修改成员权限
     * @param {number} coterieId
     * @param {number} userId
     * @param {{accessLevel: number}} { accessLevel }
     * @returns
     */
    updateMemberRole(coterieId, userId, { accessLevel }) {
        return Http.put(`/coterie/${coterieId}/members/${userId}`, null, {
            params: {
                access_level: accessLevel,
            },
        });
    },
    /**
     * 绑定标签 -> 2020.04.01 PC圈子绑定标签已切换至bindTagWithCreate接口，待删除
     *
     * @param {number} coterieId
     * @param {{tagName: string}} {tagName}
     * @returns
     */
    bindTag(coterieId, { tagName }) {
        return Http.post(`/coterie/${coterieId}/tag/bind`, null, {
            params: {
                tag_name: tagName,
            },
        });
    },
    /**
     * 批量绑定标签（支持创建新标签）
     *
     * @param {number} coterieId
     * @param {{tags: string}} tags
     * @returns
     */
    bindTagWithCreate(coterieId, { tags }) {
        return Http.post(`/coterie/${coterieId}/tag/bulk_bind`, null, {
            params: {
                tags,
            },
        });
    },
    /**
     * 取消标签绑定
     * @param {number} coterieId
     * @param {{tagId: number}} {tagId}
     * @returns
     */
    unbindTag(coterieId, { tagId }) {
        return Http.delete(`/coterie/${coterieId}/tag/unbind`, {
            params: {
                tag_id: tagId,
            },
        });
    },
    /**
     * 圈子管理, 收录问答至圈子
     *
     * @param {number} coterieId
     * @param {{ questionId: number }} { questionId }
     * @returns
     */
    recordQuestion(coterieId, { questionId }) {
        return Http.post(`/coterie/${coterieId}/problems/record`, null, {
            params: {
                question_id: questionId,
            },
        });
    },
    /**
     * 圈子管理, 取消问答收录
     *
     * @param {number} coterieId
     * @param {{ questionId: number }} { questionId }
     * @returns
     */
    unRecordQuestion(coterieId, { questionId }) {
        return Http.delete(`/coterie/${coterieId}/problems/unrecord`, {
            params: {
                question_id: questionId,
            },
        });
    },
    /**
     * 获取圈子调用信息
     *
     * @param {number} coterieId
     * @returns
     */
    getConfig(coterieId) {
        return CoterieConfigHttp.get(`/coterie/${coterieId}/config`);
    },
    /**
     * 圈子绑定oteam
     * @param {number} coterieId
     * @param {OteamParams} { oteamName, oteamUrl }
     * @returns
     */
    bindOteam(coterieId, { oteamName, oteamUrl }) {
        return CoterieConfigHttp.post(`/coterie/${coterieId}/config/oteam/bind`, null, {
            params: {
                oteam_name: oteamName,
                oteam_url: oteamUrl,
            },
        });
    },
    /**
     * 取消圈子oteam绑定
     *
     * @param {number} coterieId
     * @param {OteamParams} { oteamName, oteamUrl }
     * @returns
     */
    unbindOteam(coterieId, { oteamName, oteamUrl }) {
        return CoterieConfigHttp.delete(`/coterie/${coterieId}/config/oteam/unbind`, {
            params: {
                oteam_name: oteamName,
                oteam_url: oteamUrl,
            },
        });
    },
    /**
     * 设置圈子oteam排序
     *
     * @param {number} coterieId
     * @param {({ oteams: [{ orderBy: number } & OteamParams] })} { oteams }
     * @returns
     */
    setOteamOrder(coterieId, { oteams }) {
        return CoterieConfigHttp.post(`/coterie/${coterieId}/config/oteam/sort`, oteams);
    },
    /**
     * 圈子绑定项目
     *
     * @param {number} coterieId
     * @param {ProjectParams} params
     * @returns
     */
    bindProject(coterieId, params) {
        return CoterieConfigHttp.post(`/coterie/${coterieId}/config/projects/bind`, null, {
            params,
        });
    },
    /**
     * 取消圈子绑定项目
     * @param {number} coterieId
     * @param {Pick<ProjectParams, 'gitUrl'>} params
     * @returns
     */
    unbindProject(coterieId, params) {
        return CoterieConfigHttp.delete(`/coterie/${coterieId}/config/projects/unbind`, {
            params,
        });
    },
    /**
     * 设置项目排序
     * @param {number} coterieId
     * @param {{ projects: SetProjectOrderParams[] }} { projects }
     * @returns
     */
    setProjectOrder(coterieId, { projects }) {
        return CoterieConfigHttp.post(`/coterie/${coterieId}/config/projects/sort`, projects);
    },
    /**
     * 圈内收录问题置顶/取消置顶
     *
     * @param {number} coterieId
     * @param {number} questionId
     * @param {{ stick: boolean}} { stick } 是否置顶
     * @returns
     */
    stickToTop(coterieId, questionId, { stick }) {
        return Http.post(`/coterie/${coterieId}/problems/stick/${questionId}`, null, {
            params: {
                stick,
            },
        });
    },
    /**
     * 获取圈子绑定的机器人信息
     *
     * @param {number} coterieId
     * @param {PaginationParams} [params]
     * @returns
     */
    getRobots(coterieId, params) {
        return CoterieRobotHttp.list().get(`/robot/coterie/${coterieId}/chats`, {
            params: injectDefaultParams(Object.assign({ statsTotal: true }, params)),
        });
    },
    /**
     * 获取企业微信群绑定的圈子信息
     *  @param {number} chatId
     * @param {({ statsTotal?: boolean } & PaginationParams)} [params]
     * @returns
     */
    getWeChatRobotsCoteries(chatId, params) {
        return CoterieRobotLinkHttp.list().get(`/robot/chat/${chatId}`, {
            params: injectDefaultParams(Object.assign({ statsTotal: true }, params)),
        });
    },
    /**
     * 获取企业微信群信息
     *
     * @param {{ chatId: number }} params
     * @returns
     */
    getWeChatRobotsInfo(params) {
        return Http.get('/robot/chat', {
            params,
        });
    },
    /**
     * 设置企业微信群每日推送订阅/退订
     * @param {{ chatId: number; receivePush: boolean }} params
     * @returns
     */
    setWeChatRobotsDaily(params) {
        return Http.post('/robot/chat/receive_push', null, {
            params,
        });
    },
    /**
     * 企业微信群更新机器人圈子日报开关
     *
     * @param {number} coterieId
     * @param {{ chatId: number; dailyPush: boolean }} params
     * @returns
     */
    setCoterieRobotDaily(coterieId, params) {
        return Http.post(`/robot/coterie/${coterieId}/robot/daily`, null, {
            params,
        });
    },
    /**
     * 圈子绑定机器人
     *
     * @param {number} coterieId
     * @param {{
     *       chatId: string 群ID
     *       notifyNewAnswer: boolean 是否新回答通知
     *       notifyNewIdea: boolean 是否新动态通知
     *       notifyNewProblem: boolean 是否新问题通知
     *       notifyNewAnswerNote: boolean, 是否新回答评论通知
     *       dailyPush: boolean 日报通知
     *     }} params
     * @returns
     */
    bindWeChatGroup(coterieId, params) {
        const { tagIds } = params, rst = __rest(params, ["tagIds"]);
        return Http.post(`/robot/coterie/${coterieId}/chat/bind`, null, {
            params: Object.assign(Object.assign({}, rst), { tag_id: tagIds }),
        });
    },
    /**
     * 取消圈子绑定微信群
     *
     * @param {number} coterieId
     * @param {{ chatId: number }} params
     * @returns
     */
    unbindWeChatGroup(coterieId, params) {
        return Http.delete(`/robot/coterie/${coterieId}/chat/unbind`, {
            params,
        });
    },
    /**
     * 更新机器人企业微信区通知方式
     *
     * @param {number} coterieId
     * @param {CoterieRobotParams} params
     * @returns
     */
    updateRobotNotice(coterieId, params) {
        const { tagIds } = params, rst = __rest(params, ["tagIds"]);
        return Http.post(`/robot/coterie/${coterieId}/robot/update`, null, {
            params: Object.assign(Object.assign({}, rst), { tag_id: tagIds }),
        });
    },
    /**
     * 判断微信群是否已经绑定圈子
     *
     * @param {number} coterieId
     * @param {{ chatId: number }} params
     * @returns
     */
    checkCoterieBindStatus(coterieId, params) {
        return Http.get(`/robot/coterie/${coterieId}/chat/bind_check`, {
            params,
        });
    },
    /**
     * 获取某个圈子内的feeds
     * @param {number} coterieId
     * @param {SearchWithPaginationParams} [params]
     * @returns
     */
    getCoterieFeed(coterieId, params) {
        return CoterieOutboxWithStickHttp.get(`/coterie/${coterieId}/outboxs`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取圈子的feeds
     * @param {SearchWithPaginationParams} [params]
     * @returns
     */
    getFeedByCoteries(params) {
        return CoterieOutboxHttp.get('/coteries/outboxs', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取我加入圈子的feeds
     * @param {SearchWithPaginationParams} [params]
     * @returns
     */
    getFeedByUserCoteries(params) {
        return CoterieOutboxHttp.get('/coteries/user/outboxs', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取广场idea
     * @param {(SearchWithPaginationParams & { stick?: boolean, types?: IdeaType[] })} [params]
     * @returns
     */
    getAllCoterieIdeas(params) {
        return IdeaWithStickedHttp.list().get('/coteries/ideas', {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 只获取圈子动态, 带圈子的置顶状态, 带来源相关信息(供图谱使用)
     * stick表示是否显示置顶动态, 默认为true
     * statsTotal表示是否需要汇总个数
     * @param {number} coterieId
     * @param {(SearchWithPaginationParams & { stick?: boolean, withProblem?: boolean, statsTotal?: boolean })} [params]
     * @returns
     */
    getIdeas(coterieId, params) {
        const _a = params || {}, { withProblem } = _a, rst = __rest(_a, ["withProblem"]);
        return CoterieIdeaHttp.list().get(`/coterie/${coterieId}/ideas`, {
            params: injectDefaultParams(Object.assign({ stick: true, with_problem: withProblem }, rst)),
        });
    },
    /**
     * 设置圈子动态置顶
     *
     * @param {number} coterieId
     * @param {number} ideaId
     * @param {{
     *     stick: boolean
     *   }} params
     * @returns
     */
    setIdeaStick(coterieId, ideaId, params) {
        return Http.post(`/coterie/${coterieId}/stick/${ideaId}`, null, {
            params,
        });
    },
    /**
     * 订阅圈子周报
     *
     * @param {number} coterieId
     * @returns
     */
    subscribeCoterie(coterieId) {
        return Http.post(`/coterie/${coterieId}/star`);
    },
    /**
     * 取消圈子周报订阅
     *
     * @param {number} coterieId
     * @returns
     */
    unsubscribeCoterie(coterieId) {
        return Http.delete(`/coterie/${coterieId}/unstar`);
    },
    /**
     * 获取用户订阅标签的相关圈子列表
     * 圈子推荐
     *
     * @param {string} username
     * @returns
     */
    getCoteriesByUserTags(username) {
        return CoteriesListHttp.list().get(`/coteries/${username}/user_tags`);
    },
    /**
     * 获取圈子运营数据指标
     *
     * @param {String|Number} coterieId
     * @returns
     */
    getCoteriesAdminIndicator(coterieId) {
        return CoterieIndicatorHttp.get(`/coterie/${coterieId}/data`);
    },
    /**
     * 获取圈子成员统计
     * @param {number} coterieId
     * @param {CoterieAdminDataParams} [params]
     * @returns
     */
    getCoteriesAdminMemberData(coterieId, params) {
        const { beginTime, finishTime } = params, rst = __rest(params, ["beginTime", "finishTime"]);
        return CoterieMemberDataHttp.list().get(`/coterie/${coterieId}/data/members`, {
            params: injectDefaultParams(Object.assign(Object.assign({}, rst), { begin_time: beginTime, finish_time: finishTime })),
        });
    },
    /**
     * 获取圈子成员统计
     * @param {number} coterieId
     * @param {CoterieAdminDataParams} [params]
     * @returns
     */
    getCoteriesAdminContentData(coterieId, params) {
        const { beginTime, finishTime } = params, rst = __rest(params, ["beginTime", "finishTime"]);
        return CoterieFeedDataHttp.list().get(`/coterie/${coterieId}/data/stats`, {
            params: injectDefaultParams(Object.assign(Object.assign({}, rst), { begin_time: beginTime, finish_time: finishTime })),
        });
    },
    /**
     * 导出圈子成员贡献
     * 由于接口直接返回blob, 因此直接通过a标签完成下载即可
     *
     * @param {number} coterieId
     * @param {(Pick<CoterieAdminDataParams, 'beginTime' | 'finishTime'>)} params
     */
    exportCoterieAdminMemberData(coterieId, params) {
        const href = `${HttpBaseConfig.API_BASE}/coterie/${coterieId}/data/members/excel?${qs.stringify({
            begin_time: params.beginTime,
            finish_time: params.finishTime,
        })}`;
        createDownload(href);
    },
    /**
     * 导出圈子流量统计
     * 由于接口直接返回blob, 因此直接通过a标签完成下载即可
     *
     * @param {number} coterieId
     * @param {(Pick<CoterieAdminDataParams, 'beginTime' | 'finishTime'>)} params
     */
    exportCoterieAdminContentData(coterieId, params) {
        const href = `${HttpBaseConfig.API_BASE}/coterie/${coterieId}/data/stats/excel?${qs.stringify({
            begin_time: params.beginTime,
            finish_time: params.finishTime,
        })}`;
        createDownload(href);
    },
    /**
     *获取圈子热门问答top10
     *
     * @param {number} coterieId
     * @returns
     */
    getHottestQuestions(coterieId) {
        return QuestionListHttp.list().get(`/coterie/${coterieId}/problems/hottest10`);
    },
    /**
     *获取圈子热门动态top5
     *
     * @param {number} coterieId
     * @returns
     */
    getHottestIdeas(coterieId) {
        return IdeaHttp.list().get(`/coterie/${coterieId}/ideas/hottest5`);
    },
    /**
     *获取圈子标签（分页）
     *
     * @param {number} coterieId
     * @param {PaginationParams} [params]
     * @returns
     */
    getCoterieTags(coterieId, params) {
        return TagHttp.list().get(`/coterie/${coterieId}/tags`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 保存圈子主页内容
     *
     * @param {number} coterieId
     * @param {{ homepage: string }} body
     */
    saveCoterieHomePage(coterieId, body) {
        return Http.post(`/coterie/${coterieId}/config/homepage`, body);
    },
    /**
     * 从圈子角度获取所有话题, 可以拿到圈子是否推荐该话题
     *
     * @param {number} coterieId
     * @param {SearchWithPaginationParams} [params]
     * @returns
     */
    searchSubject(coterieId, params) {
        return SubjectHttp.list().get(`/coterie/${coterieId}/subjects`, {
            params: injectDefaultParams(params),
        });
    },
    // 话题相关
    /**
     * 获取圈内推荐话题
     *
     * @param {number} coterieId
     * @param {FullPaginationParams} [params]
     * @returns
     */
    getRecommendSubjects(coterieId, params) {
        return SubjectHttp.list().get(`/coterie/${coterieId}/subjects/recommend`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 圈子推荐话题
     *
     * @param {number} coterieId
     * @param {{
     *       subjectId: number
     *     }} params
     * @returns
     */
    recommendSubject(coterieId, params) {
        return Http.post(`/coterie/${coterieId}/subjects/recommend`, null, {
            params: {
                subject_id: params.subjectId,
            },
        });
    },
    /**
     * 圈子取消推荐话题
     *
     * @param {number} coterieId
     * @param {{
     *       subjectId: number
     *     }} params
     * @returns
     */
    unrecommendSubject(coterieId, params) {
        return Http.delete(`/coterie/${coterieId}/subjects/recommend`, {
            params: {
                subject_id: params.subjectId,
            },
        });
    },
    /**
     * 获取圈子速看问答
     *
     * @param {FullPaginationParams} [params]
     * @returns
     */
    getCoterieBriefQuestions(params) {
        return QuestionListHttp.list().get('/coteries/problems/related/newest', {
            params,
        });
    },
    /**
     * 获取圈子大V数据
     *
     * @returns
     */
    getAllCoteriesExperts() {
        return CoterieExpertAdvertHttp.list().get('/posters/40/position', {
            params: {
                position: 402,
                group_by: 40,
                status: 'active',
            },
        });
    },
    /**
     * 获取单个圈子大V数据
     *
     * @param {number} id
     * @returns
     */
    getCoterieExperts(id) {
        return CoterieExpertAdvertHttp.list().get(`/coterie/${id}/members/v`);
    },
    /**
     * 获取圈子首页右侧广告
     *
     * @returns
     */
    getCoterieHomeRightBarAd() {
        return AdvertBaseHttp.list().get('/posters/40/position', {
            params: {
                position: 403,
                group_by: 40,
                status: 'active',
            },
        });
    },
    /**
     * 获取圈内文章
     *
     * @param {number} coterieId
     * @param {(FullPaginationParams & { tagIds?: number[]})} [params]
     * @returns
     */
    getCoterieArticles(coterieId, params) {
        const _a = params || {}, { tagIds, categoryIds, noCategory } = _a, rst = __rest(_a, ["tagIds", "categoryIds", "noCategory"]);
        return CoterieArticleHttp.list().get(`/coterie/${coterieId}/articles/selected`, {
            params: injectDefaultParams(Object.assign(Object.assign({}, rst), { tag_ids: tagIds, none_classification: noCategory, classification_ids: categoryIds })),
        });
    },
    /**
     * 获取圈内热门文章
     *
     * @param {number} coterieId
     * @returns
     */
    getCoterieHotArticles(coterieId) {
        return ArticleListHTTP.list().get(`/coterie/${coterieId}/articles/hottest10`);
    },
    /**
     * 置顶/取消置顶圈内文章
     *
     * @param {number} coterieId
     * @param {number} articleId
     * @param {{ stick: boolean }} params
     * @returns
     */
    toggleArticleSticked(coterieId, articleId, params) {
        return Http.post(`/coterie/${coterieId}/articles/stick/${articleId}`, null, { params });
    },
    /**
     * 发送圈子站内信
     *
     * @param {number} coterieId
     * @param {CoterieAdminMsgFormParams} body
     * @returns
     */
    sendCoterieMsg(coterieId, body) {
        return Http.post(`/coterie/${coterieId}/msg/send`, body);
    },
    /**
     * 获取圈子站内信的发送历史list
     *
     * @param {number} coterieId
     * @param {SearchWithPaginationParams} [params]
     * @returns
     */
    getMsgHistoryByCoterie(coterieId, params) {
        return CoterieMsgHistoryHttp.list().get(`/coterie/${coterieId}/msg/search`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 获取圈子站内信今日剩余次数
     *
     * @param {number} coterieId
     * @returns
     */
    getCoterieMsgRemaining(coterieId) {
        return Http.get(`/coterie/${coterieId}/msg/remaining`);
    },
    /**
     * 获取圈子绑定的tapd项目
     *
     * @param {number} id
     * @returns
     */
    getCoterieTapdWorkspaces(id) {
        return CoterieTapdHttp.get(`/coterie/${id}/tapd/workspace`);
    },
    /**
     * 解绑圈子绑定的tapd
     *
     * @param {number} id
     * @param {number} workspaceId
     * @returns
     */
    unbindCoterieTapd(id, workspaceId) {
        return CoterieTapdHttp.delete(`/coterie/${id}/tapd/workspace/${workspaceId}`);
    },
    /**
     * 问答转tapd需求单
     *
     * @param {number} coterieId
     * @param {number} workspaceId
     * @param {TapdStoryForm} form
     * @returns
     */
    createTapdStory(coterieId, workspaceId, form) {
        return Http.post(`/coterie/${coterieId}/tapd/workspace/${workspaceId}/story`, form);
    },
    /**
     * 问答转tapd缺陷单
     *
     * @param {number} coterieId
     * @param {number} workspaceId
     * @param {TapdBugForm} form
     * @returns
     */
    createTapdBug(coterieId, workspaceId, form) {
        return Http.post(`/coterie/${coterieId}/tapd/workspace/${workspaceId}/bug`, form);
    },
    /**
     * 获取圈内tapd相关工单
     *
     * @param {number} coterieId
     * @returns
     */
    getTapdWorkOrder(coterieId, params) {
        return CoterieProblemWithTapdLinkHttp.list().get(`/coterie/${coterieId}/tapd/workspace/stories_and_bugs`, {
            params: injectDefaultParams(params),
        });
    },
    /**
     * 导出圈子成员贡献
     * 由于接口直接返回blob, 因此直接通过a标签完成下载即可
     *
     * @param {number} coterieId
     * @param {(Pick<CoterieAdminDataParams, 'beginTime' | 'finishTime'>)} params
     */
    exportTapdWorkOrder(coterieId, params) {
        const href = `${HttpBaseConfig.API_BASE}/coterie/${coterieId}/tapd/workspace/stories_and_bugs/excel?${qs.stringify({
            search: (params || {}).search,
        })}`;
        createDownload(href);
    },
    /**
     *******
     * 圈子内容分类
     *******
     */
    /**
     * 获取圈子对应内容的分类
     *
     * @param {number} coterieId
     * @param {({ type: CategoryType})} params
     * @returns
     */
    searchCoterieCategory(coterieId, params) {
        const { type } = params;
        return CoterieContentCategoryHttp.list().get(`/coterie/${coterieId}/content/classifications`, {
            params: {
                content_type: type,
            },
        });
    },
    /**
     * 更新分类排序
     * @param {number} coterieId
     * @param {{
     *       orderList: { classificationId: number; order: number }[];
     *       type: CategoryType;
     *     }} params
     * @returns
     */
    updateCoterieCategoryOrder(coterieId, params) {
        const { type, orderList } = params;
        return Http.post(`/coterie/${coterieId}/content/classifications/order`, {
            orderList: orderList.map(each => ({
                order: each.order,
                classificationId: each.id,
            })),
        }, {
            params: {
                content_type: type,
            },
        });
    },
    /**
     * 创建内容分类
     * @param {number} coterieId
     * @param {{ name: string, type: CategoryType }} params
     * @returns
     */
    createCoterieCategory(coterieId, params) {
        const { type, name } = params;
        return Http.post(`/coterie/${coterieId}/content/classification`, null, {
            params: {
                content_type: type,
                name,
            },
        });
    },
    /**
     * 更新分类名称
     * @param {number} coterieId
     * @param {number} categoryId
     * @param {{ name: string }} params
     * @returns
     */
    updateCoterieCategory(coterieId, categoryId, params) {
        const { name } = params;
        return Http.post(`/coterie/${coterieId}/content/classification/${categoryId}`, null, {
            params: {
                new_name: name,
            },
        });
    },
    /**
     * 删除内容分类
     * @param {number} coterieId
     * @param {number} categoryId
     * @returns
     */
    delCoterieCategory(coterieId, categoryId) {
        return Http.delete(`/coterie/${coterieId}/content/classification/${categoryId}`);
    },
    /**
     * 设置内容分类
     *
     * @param {number} coterieId
     * @param {{ categoryId?: number, type: CategoryType, contentIds: [number] }} params
     * @returns
     */
    setContentCategory(coterieId, params) {
        const { type, contentIds, categoryId } = params;
        return Http.post(`/coterie/${coterieId}/content/classification/link`, null, {
            params: {
                content_type: type,
                content_ids: contentIds,
                classification_id: categoryId,
            },
        });
    },
    /**
     * 创建模板
     * @param {number} id 圈子ID
     * @param {TemplateForm & { linkableType: CoterieTemplateLinkableType }} params
     * @returns
     */
    createTemplate(id, params) {
        const { linkableType } = params, templateBody = __rest(params, ["linkableType"]);
        return TemplateHttp.post(`/coterie/${id}/template`, templateBody, {
            params: {
                linkable_type: linkableType,
            },
        });
    },
    /**
     * 更新模板
     * @param {number} coterieId
     * @param {number} templateId
     * @param {TemplateForm & { status: TemplateStatus }} params
     *
     * @returns
     */
    updateTemplate(coterieId, templateId, params) {
        return TemplateHttp.put(`/coterie/${coterieId}/template/${templateId}`, params);
    },
    /**
     * 获取圈子模板
     * @param {number} id 圈子ID
     * @param {{ linkableType: CoterieTemplateLinkableType, status: TemplateStatus }} params
     * @returns
     */
    getTemplates(id, params) {
        const { linkableType, status } = params;
        return TemplateHttp.list().get(`/coterie/${id}/template/query`, {
            params: {
                linkable_type: linkableType,
                status,
            },
        });
    },
});
