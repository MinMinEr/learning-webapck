import { PaginationParams, SearchWithPaginationParams, FullPaginationParams, StrOrNum } from '../../types';
import { CoterieForm, CoterieAdminDataParams, CoterieAdminMsgFormParams, CoterieRobotParams, SearchCoteriesParams, OteamParams, ProjectParams, SetProjectOrderParams, FullCoterieAdminDataParams, TapdStoryForm, TapdBugForm, CategoryType, CoterieTemplateLinkableType } from './interface';
import { TemplateForm, TemplateStatus } from '../template/interface';
export declare const MkCoterieApi: {
    create: ((coterieForm: CoterieForm) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        avatar: string;
        status: string;
        v: string;
        categories: {
            id: number;
            name: string;
        }[];
        description: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
        };
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieForm: CoterieForm) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                avatar: string;
                status: string;
                v: string;
                categories: {
                    id: number;
                    name: string;
                }[];
                description: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                };
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    update: ((coterieId: number, coterieForm: CoterieForm) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        avatar: string;
        status: string;
        v: string;
        categories: {
            id: number;
            name: string;
        }[];
        description: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
        };
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, coterieForm: CoterieForm) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                avatar: string;
                status: string;
                v: string;
                categories: {
                    id: number;
                    name: string;
                }[];
                description: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                };
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    delete: ((coterieId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    checkName: ((params: {
        name: string;
    }) => Promise<import("axios").AxiosResponse<boolean>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                name: string;
            }) => Promise<import("axios").AxiosResponse<boolean>>;
        };
    };
    get: ((coterieId: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        avatar: string;
        status: string;
        v: string;
        categories: {
            id: number;
            name: string;
        }[];
        description: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            articleCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
            answeredProblemCount: number;
        };
        createdAt: number;
        updatedAt: number;
        curJoin: boolean;
        curStar: boolean;
        config: {
            projects: {
                id: number;
                name: string;
                value: string;
                orderBy: number;
                extend: string;
            }[];
            tags: {
                id: number;
                name: string;
                value: string;
                orderBy: number;
            }[];
            oteams: {
                id: number;
                name: string;
                value: string;
                orderBy: number;
            }[];
            showInHomePage: boolean;
            homepageMd: string;
            homepage: string;
            monthlyHonors: {
                id: number;
                name: string;
                value: string;
                orderBy: number;
            }[];
            msgEnabled: boolean;
            tapdEnabled: boolean;
        };
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                avatar: string;
                status: string;
                v: string;
                categories: {
                    id: number;
                    name: string;
                }[];
                description: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    articleCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                    answeredProblemCount: number;
                };
                createdAt: number;
                updatedAt: number;
                curJoin: boolean;
                curStar: boolean;
                config: {
                    projects: {
                        id: number;
                        name: string;
                        value: string;
                        orderBy: number;
                        extend: string;
                    }[];
                    tags: {
                        id: number;
                        name: string;
                        value: string;
                        orderBy: number;
                    }[];
                    oteams: {
                        id: number;
                        name: string;
                        value: string;
                        orderBy: number;
                    }[];
                    showInHomePage: boolean;
                    homepageMd: string;
                    homepage: string;
                    monthlyHonors: {
                        id: number;
                        name: string;
                        value: string;
                        orderBy: number;
                    }[];
                    msgEnabled: boolean;
                    tapdEnabled: boolean;
                };
            }>>;
        };
    };
    getQuestion: ((coterieId: number, type: 'selected' | 'tags', params: {
        statsTotal?: boolean;
        tagIds: StrOrNum[];
        stick?: boolean;
        userIds?: number[];
    } & SearchWithPaginationParams) => Promise<import("axios").AxiosResponse<{
        problemLinks?: {
            sticked: boolean;
            classificationName: string;
        }[] | undefined;
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, type: 'selected' | 'tags', params: {
                statsTotal?: boolean;
                tagIds: StrOrNum[];
                stick?: boolean;
                userIds?: number[];
            } & SearchWithPaginationParams) => Promise<import("axios").AxiosResponse<{
                problemLinks?: {
                    sticked: boolean;
                    classificationName: string;
                }[] | undefined;
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    searchQuestion: ((coterieId: number, params: {
        statsTotal?: boolean;
        tagIds: StrOrNum[];
        stick?: boolean;
        userIds?: number[];
        categoryIds?: number[];
        noCategory?: boolean;
    } & SearchWithPaginationParams) => Promise<import("axios").AxiosResponse<{
        problemLinks?: {
            sticked: boolean;
            classificationName: string;
        }[] | undefined;
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: {
                statsTotal?: boolean;
                tagIds: StrOrNum[];
                stick?: boolean;
                userIds?: number[];
                categoryIds?: number[];
                noCategory?: boolean;
            } & SearchWithPaginationParams) => Promise<import("axios").AxiosResponse<{
                problemLinks?: {
                    sticked: boolean;
                    classificationName: string;
                }[] | undefined;
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getRecommendQuestionByTag: ((coterieId: number, params: SearchWithPaginationParams) => Promise<import("axios").AxiosResponse<{
        problemLinks?: {
            sticked: boolean;
            classificationName: string;
        }[] | undefined;
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: SearchWithPaginationParams) => Promise<import("axios").AxiosResponse<{
                problemLinks?: {
                    sticked: boolean;
                    classificationName: string;
                }[] | undefined;
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getOteamHotQuestion: ((params?: ({
        statsTotal?: boolean | undefined;
    } & SearchWithPaginationParams) | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: ({
                statsTotal?: boolean | undefined;
            } & SearchWithPaginationParams) | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getAdminCoteries: (() => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        avatar: string;
        config: {
            tapdEnabled: boolean;
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                avatar: string;
                config: {
                    tapdEnabled: boolean;
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getMember: ((coterieId: number, userId: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        accessLevel: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        ideaCount: number;
        answerCount: number;
        createdAt: number;
        answerAgreeCount: number;
        problemCount: number;
        articleCount: number;
        articleAgreeCount: number;
        userId: number;
        username: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, userId: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                accessLevel: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                ideaCount: number;
                answerCount: number;
                createdAt: number;
                answerAgreeCount: number;
                problemCount: number;
                articleCount: number;
                articleAgreeCount: number;
                userId: number;
                username: string;
            }>>;
        };
    };
    getHotCoteries: ((params?: {
        categoryIds?: number[] | undefined;
    } | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            articleCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
            answeredProblemCount: number;
        };
        curStar: boolean;
        avatar: string;
        createdAt: number;
        description: string;
        v: string;
        curJoin: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: {
                categoryIds?: number[] | undefined;
            } | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    articleCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                    answeredProblemCount: number;
                };
                curStar: boolean;
                avatar: string;
                createdAt: number;
                description: string;
                v: string;
                curJoin: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getOteamHotCoteries: (() => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            articleCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
            answeredProblemCount: number;
        };
        curStar: boolean;
        avatar: string;
        createdAt: number;
        description: string;
        v: string;
        curJoin: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    articleCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                    answeredProblemCount: number;
                };
                curStar: boolean;
                avatar: string;
                createdAt: number;
                description: string;
                v: string;
                curJoin: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getRecommendCoteries: ((params: {
        tagIds: number[];
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            articleCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
            answeredProblemCount: number;
        };
        curStar: boolean;
        avatar: string;
        createdAt: number;
        description: string;
        v: string;
        curJoin: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                tagIds: number[];
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    articleCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                    answeredProblemCount: number;
                };
                curStar: boolean;
                avatar: string;
                createdAt: number;
                description: string;
                v: string;
                curJoin: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    searchCoteries: ((params?: SearchCoteriesParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            articleCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
            answeredProblemCount: number;
        };
        curStar: boolean;
        avatar: string;
        createdAt: number;
        description: string;
        v: string;
        curJoin: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: SearchCoteriesParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    articleCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                    answeredProblemCount: number;
                };
                curStar: boolean;
                avatar: string;
                createdAt: number;
                description: string;
                v: string;
                curJoin: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getMembers: ((coterieId: number, params?: FullCoterieAdminDataParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        accessLevel: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        ideaCount: number;
        answerCount: number;
        createdAt: number;
        answerAgreeCount: number;
        problemCount: number;
        articleCount: number;
        articleAgreeCount: number;
        userId: number;
        username: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params?: FullCoterieAdminDataParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                accessLevel: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                ideaCount: number;
                answerCount: number;
                createdAt: number;
                answerAgreeCount: number;
                problemCount: number;
                articleCount: number;
                articleAgreeCount: number;
                userId: number;
                username: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getMostActiveMembers: ((coterieId: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        accessLevel: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        ideaCount: number;
        answerCount: number;
        createdAt: number;
        answerAgreeCount: number;
        problemCount: number;
        articleCount: number;
        articleAgreeCount: number;
        userId: number;
        username: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                accessLevel: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                ideaCount: number;
                answerCount: number;
                createdAt: number;
                answerAgreeCount: number;
                problemCount: number;
                articleCount: number;
                articleAgreeCount: number;
                userId: number;
                username: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    join: ((coterieId: number, userId: number | null, { accessLevel }?: {
        accessLevel?: number | undefined;
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        accessLevel: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        ideaCount: number;
        answerCount: number;
        createdAt: number;
        answerAgreeCount: number;
        problemCount: number;
        articleCount: number;
        articleAgreeCount: number;
        userId: number;
        username: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, userId: number | null, { accessLevel }?: {
                accessLevel?: number | undefined;
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                accessLevel: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                ideaCount: number;
                answerCount: number;
                createdAt: number;
                answerAgreeCount: number;
                problemCount: number;
                articleCount: number;
                articleAgreeCount: number;
                userId: number;
                username: string;
            }>>;
        };
    };
    multiJoin: ((coterieId: number, body: {
        usernames: string[];
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, body: {
                usernames: string[];
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    leave: ((coterieId: number, userId: number | null) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, userId: number | null) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    updateMemberRole: ((coterieId: number, userId: number, { accessLevel }: {
        accessLevel: number;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, userId: number, { accessLevel }: {
                accessLevel: number;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    bindTag: ((coterieId: number, { tagName }: {
        tagName: string;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, { tagName }: {
                tagName: string;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    bindTagWithCreate: ((coterieId: number, { tags }: {
        tags: string;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, { tags }: {
                tags: string;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    unbindTag: ((coterieId: number, { tagId }: {
        tagId: number;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, { tagId }: {
                tagId: number;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    recordQuestion: ((coterieId: number, { questionId }: {
        questionId: number;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, { questionId }: {
                questionId: number;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    unRecordQuestion: ((coterieId: number, { questionId }: {
        questionId: number;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, { questionId }: {
                questionId: number;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    getConfig: ((coterieId: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        showInHomePage: boolean;
        projects: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
            extend: string;
        }[];
        oteams: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        homepageMd: string;
        homepage: string;
        monthlyHonors: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        msgEnabled: boolean;
        tapdEnabled: boolean;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                showInHomePage: boolean;
                projects: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                    extend: string;
                }[];
                oteams: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                homepageMd: string;
                homepage: string;
                monthlyHonors: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                msgEnabled: boolean;
                tapdEnabled: boolean;
            }>>;
        };
    };
    bindOteam: ((coterieId: number, { oteamName, oteamUrl }: OteamParams) => Promise<import("axios").AxiosResponse<{
        id: number;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        showInHomePage: boolean;
        projects: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
            extend: string;
        }[];
        oteams: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        homepageMd: string;
        homepage: string;
        monthlyHonors: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        msgEnabled: boolean;
        tapdEnabled: boolean;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, { oteamName, oteamUrl }: OteamParams) => Promise<import("axios").AxiosResponse<{
                id: number;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                showInHomePage: boolean;
                projects: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                    extend: string;
                }[];
                oteams: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                homepageMd: string;
                homepage: string;
                monthlyHonors: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                msgEnabled: boolean;
                tapdEnabled: boolean;
            }>>;
        };
    };
    unbindOteam: ((coterieId: number, { oteamName, oteamUrl }: OteamParams) => Promise<import("axios").AxiosResponse<{
        id: number;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        showInHomePage: boolean;
        projects: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
            extend: string;
        }[];
        oteams: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        homepageMd: string;
        homepage: string;
        monthlyHonors: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        msgEnabled: boolean;
        tapdEnabled: boolean;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, { oteamName, oteamUrl }: OteamParams) => Promise<import("axios").AxiosResponse<{
                id: number;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                showInHomePage: boolean;
                projects: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                    extend: string;
                }[];
                oteams: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                homepageMd: string;
                homepage: string;
                monthlyHonors: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                msgEnabled: boolean;
                tapdEnabled: boolean;
            }>>;
        };
    };
    setOteamOrder: ((coterieId: number, { oteams }: {
        oteams: ({
            orderBy: number;
        } & OteamParams)[];
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        showInHomePage: boolean;
        projects: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
            extend: string;
        }[];
        oteams: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        homepageMd: string;
        homepage: string;
        monthlyHonors: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        msgEnabled: boolean;
        tapdEnabled: boolean;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, { oteams }: {
                oteams: ({
                    orderBy: number;
                } & OteamParams)[];
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                showInHomePage: boolean;
                projects: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                    extend: string;
                }[];
                oteams: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                homepageMd: string;
                homepage: string;
                monthlyHonors: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                msgEnabled: boolean;
                tapdEnabled: boolean;
            }>>;
        };
    };
    bindProject: ((coterieId: number, params: ProjectParams) => Promise<import("axios").AxiosResponse<{
        id: number;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        showInHomePage: boolean;
        projects: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
            extend: string;
        }[];
        oteams: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        homepageMd: string;
        homepage: string;
        monthlyHonors: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        msgEnabled: boolean;
        tapdEnabled: boolean;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: ProjectParams) => Promise<import("axios").AxiosResponse<{
                id: number;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                showInHomePage: boolean;
                projects: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                    extend: string;
                }[];
                oteams: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                homepageMd: string;
                homepage: string;
                monthlyHonors: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                msgEnabled: boolean;
                tapdEnabled: boolean;
            }>>;
        };
    };
    unbindProject: ((coterieId: number, params: Pick<ProjectParams, 'gitUrl'>) => Promise<import("axios").AxiosResponse<{
        id: number;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        showInHomePage: boolean;
        projects: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
            extend: string;
        }[];
        oteams: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        homepageMd: string;
        homepage: string;
        monthlyHonors: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        msgEnabled: boolean;
        tapdEnabled: boolean;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: Pick<ProjectParams, 'gitUrl'>) => Promise<import("axios").AxiosResponse<{
                id: number;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                showInHomePage: boolean;
                projects: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                    extend: string;
                }[];
                oteams: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                homepageMd: string;
                homepage: string;
                monthlyHonors: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                msgEnabled: boolean;
                tapdEnabled: boolean;
            }>>;
        };
    };
    setProjectOrder: ((coterieId: number, { projects }: {
        projects: SetProjectOrderParams[];
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        showInHomePage: boolean;
        projects: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
            extend: string;
        }[];
        oteams: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        homepageMd: string;
        homepage: string;
        monthlyHonors: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        msgEnabled: boolean;
        tapdEnabled: boolean;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, { projects }: {
                projects: SetProjectOrderParams[];
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                showInHomePage: boolean;
                projects: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                    extend: string;
                }[];
                oteams: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                homepageMd: string;
                homepage: string;
                monthlyHonors: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                msgEnabled: boolean;
                tapdEnabled: boolean;
            }>>;
        };
    };
    stickToTop: ((coterieId: number, questionId: number, { stick }: {
        stick: boolean;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, questionId: number, { stick }: {
                stick: boolean;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    getRobots: ((coterieId: number, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        chat: {
            robotId: number;
            charId: string;
            chatName: string;
            chatType: string;
            members: string;
            memberTotal: number;
            receivePush: boolean;
            createdAt: number;
            updatedAt: number;
        };
        chatLink: {
            chatId: string;
            notifyNewProblem: boolean;
            notifyNewAnswer: boolean;
            notifyNewIdea: boolean;
            notifyNewArticle: boolean;
            dailyPush: boolean;
            tags: {
                id: number;
                name: string;
            }[];
            userId: number;
            username: string;
            linkableId: number;
            linkableType: string;
            createdAt: number;
            updatedAt: number;
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                chat: {
                    robotId: number;
                    charId: string;
                    chatName: string;
                    chatType: string;
                    members: string;
                    memberTotal: number;
                    receivePush: boolean;
                    createdAt: number;
                    updatedAt: number;
                };
                chatLink: {
                    chatId: string;
                    notifyNewProblem: boolean;
                    notifyNewAnswer: boolean;
                    notifyNewIdea: boolean;
                    notifyNewArticle: boolean;
                    dailyPush: boolean;
                    tags: {
                        id: number;
                        name: string;
                    }[];
                    userId: number;
                    username: string;
                    linkableId: number;
                    linkableType: string;
                    createdAt: number;
                    updatedAt: number;
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getWeChatRobotsCoteries: ((chatId: number, params?: ({
        statsTotal?: boolean | undefined;
    } & PaginationParams) | undefined) => Promise<import("axios").AxiosResponse<{
        chatId: string;
        notifyNewProblem: boolean;
        notifyNewAnswer: boolean;
        notifyNewIdea: boolean;
        notifyNewArticle: boolean;
        dailyPush: boolean;
        tags: {
            id: number;
            name: string;
        }[];
        userId: number;
        username: string;
        linkableId: number;
        linkableType: string;
        createdAt: number;
        updatedAt: number;
        coterie: {
            id: number;
            name: string;
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (chatId: number, params?: ({
                statsTotal?: boolean | undefined;
            } & PaginationParams) | undefined) => Promise<import("axios").AxiosResponse<{
                chatId: string;
                notifyNewProblem: boolean;
                notifyNewAnswer: boolean;
                notifyNewIdea: boolean;
                notifyNewArticle: boolean;
                dailyPush: boolean;
                tags: {
                    id: number;
                    name: string;
                }[];
                userId: number;
                username: string;
                linkableId: number;
                linkableType: string;
                createdAt: number;
                updatedAt: number;
                coterie: {
                    id: number;
                    name: string;
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getWeChatRobotsInfo: ((params: {
        chatId: number;
    }) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                chatId: number;
            }) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    setWeChatRobotsDaily: ((params: {
        chatId: number;
        receivePush: boolean;
    }) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: {
                chatId: number;
                receivePush: boolean;
            }) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    setCoterieRobotDaily: ((coterieId: number, params: {
        chatId: number;
        dailyPush: boolean;
    }) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: {
                chatId: number;
                dailyPush: boolean;
            }) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    bindWeChatGroup: ((coterieId: number, params: {
        dailyPush: boolean;
    } & CoterieRobotParams) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: {
                dailyPush: boolean;
            } & CoterieRobotParams) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    unbindWeChatGroup: ((coterieId: number, params: {
        chatId: number;
    }) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: {
                chatId: number;
            }) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    updateRobotNotice: ((coterieId: number, params: CoterieRobotParams) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: CoterieRobotParams) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    checkCoterieBindStatus: ((coterieId: number, params: {
        chatId: number;
    }) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: {
                chatId: number;
            }) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    getCoterieFeed: ((coterieId: number, params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        opType: number;
        rootableType: "problem";
        linkableType: "problem";
        sticked: boolean;
        related: {
            title: string;
            id: number;
            coteries: {
                id: number;
                name: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                };
                avatar: string;
            }[];
            type: string;
            createdAt: number;
            answerCount: number;
            agreeCount: number;
            updatedAt: number;
            titleMd: string;
            agreeUsernames: string;
            likeCount: number;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            readCount: number;
            imageField: string;
            videoField: string;
            tags: {
                id: number;
                name: string;
            }[];
            starCount: number;
            resolved: boolean;
            replyType: string;
        };
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        createdAt: number;
    } | {
        id: number;
        opType: number;
        rootableType: "idea";
        linkableType: "idea";
        sticked: boolean;
        related: {
            id: number;
            type: "link" | "video" | "image" | "text" | "vote";
            readCount: number;
            starCount: number;
            noteCount: number;
            shareCount: number;
            agreeCount: number;
            agreeUsernames: string;
            disagreeCount: number;
            linkUrl: string;
            videoUrl: string;
            videoState: 0 | 2 | 1;
            linkContent: {
                url: string;
                title: string;
                description: string;
                logo: string;
            };
            imageUrls: string;
            source: string;
            sourceType: string;
            sourceId: number;
            sourceName: string;
            sourceSubType: string;
            sourceSubId: number;
            sourceSubName: string;
            coteries: {
                id: number;
                name: string;
                avatar: string;
            }[];
            userId: number;
            username: string;
            content: string;
            contentMd: string;
            createdAt: number;
            updatedAt: number;
            curStar: boolean;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            vote: {
                id: number;
                title: string;
                type: string;
                totalCount: number;
                totalUserCount: number;
                curUserVote: boolean;
                voteItems: {
                    id: number;
                    voteId: number;
                    content: string;
                    voteCount: number;
                    curUserVote: boolean;
                    voteUsernames: string;
                }[];
            };
        };
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        createdAt: number;
    } | {
        id: number;
        opType: number;
        rootableType: "article";
        linkableType: "article";
        sticked: boolean;
        related: {
            title: string;
            id: number;
            likeUsers: string;
            noteCount: number;
        };
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        createdAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                opType: number;
                rootableType: "problem";
                linkableType: "problem";
                sticked: boolean;
                related: {
                    title: string;
                    id: number;
                    coteries: {
                        id: number;
                        name: string;
                        stats: {
                            ideaCount: number;
                            problemCount: number;
                            memberCount: number;
                            lastWeekWeight: number;
                            lastWeekRanking: number;
                            lastWeekPv: number;
                            pv: number;
                        };
                        avatar: string;
                    }[];
                    type: string;
                    createdAt: number;
                    answerCount: number;
                    agreeCount: number;
                    updatedAt: number;
                    titleMd: string;
                    agreeUsernames: string;
                    likeCount: number;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    readCount: number;
                    imageField: string;
                    videoField: string;
                    tags: {
                        id: number;
                        name: string;
                    }[];
                    starCount: number;
                    resolved: boolean;
                    replyType: string;
                };
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                createdAt: number;
            } | {
                id: number;
                opType: number;
                rootableType: "idea";
                linkableType: "idea";
                sticked: boolean;
                related: {
                    id: number;
                    type: "link" | "video" | "image" | "text" | "vote";
                    readCount: number;
                    starCount: number;
                    noteCount: number;
                    shareCount: number;
                    agreeCount: number;
                    agreeUsernames: string;
                    disagreeCount: number;
                    linkUrl: string;
                    videoUrl: string;
                    videoState: 0 | 2 | 1;
                    linkContent: {
                        url: string;
                        title: string;
                        description: string;
                        logo: string;
                    };
                    imageUrls: string;
                    source: string;
                    sourceType: string;
                    sourceId: number;
                    sourceName: string;
                    sourceSubType: string;
                    sourceSubId: number;
                    sourceSubName: string;
                    coteries: {
                        id: number;
                        name: string;
                        avatar: string;
                    }[];
                    userId: number;
                    username: string;
                    content: string;
                    contentMd: string;
                    createdAt: number;
                    updatedAt: number;
                    curStar: boolean;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    vote: {
                        id: number;
                        title: string;
                        type: string;
                        totalCount: number;
                        totalUserCount: number;
                        curUserVote: boolean;
                        voteItems: {
                            id: number;
                            voteId: number;
                            content: string;
                            voteCount: number;
                            curUserVote: boolean;
                            voteUsernames: string;
                        }[];
                    };
                };
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                createdAt: number;
            } | {
                id: number;
                opType: number;
                rootableType: "article";
                linkableType: "article";
                sticked: boolean;
                related: {
                    title: string;
                    id: number;
                    likeUsers: string;
                    noteCount: number;
                };
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                createdAt: number;
            }>>;
        };
    };
    getFeedByCoteries: ((params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        opType: number;
        rootableType: "problem";
        linkableType: "problem";
        related: {
            title: string;
            id: number;
            coteries: {
                id: number;
                name: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                };
                avatar: string;
            }[];
            type: string;
            createdAt: number;
            answerCount: number;
            agreeCount: number;
            updatedAt: number;
            titleMd: string;
            agreeUsernames: string;
            likeCount: number;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            readCount: number;
            imageField: string;
            videoField: string;
            tags: {
                id: number;
                name: string;
            }[];
            starCount: number;
            resolved: boolean;
            replyType: string;
        };
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        createdAt: number;
    } | {
        id: number;
        opType: number;
        rootableType: "idea";
        linkableType: "idea";
        related: {
            id: number;
            type: "link" | "video" | "image" | "text" | "vote";
            readCount: number;
            starCount: number;
            noteCount: number;
            shareCount: number;
            agreeCount: number;
            agreeUsernames: string;
            disagreeCount: number;
            linkUrl: string;
            videoUrl: string;
            videoState: 0 | 2 | 1;
            linkContent: {
                url: string;
                title: string;
                description: string;
                logo: string;
            };
            imageUrls: string;
            source: string;
            sourceType: string;
            sourceId: number;
            sourceName: string;
            sourceSubType: string;
            sourceSubId: number;
            sourceSubName: string;
            coteries: {
                id: number;
                name: string;
                avatar: string;
            }[];
            userId: number;
            username: string;
            content: string;
            contentMd: string;
            createdAt: number;
            updatedAt: number;
            curStar: boolean;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            vote: {
                id: number;
                title: string;
                type: string;
                totalCount: number;
                totalUserCount: number;
                curUserVote: boolean;
                voteItems: {
                    id: number;
                    voteId: number;
                    content: string;
                    voteCount: number;
                    curUserVote: boolean;
                    voteUsernames: string;
                }[];
            };
        };
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        createdAt: number;
    } | {
        id: number;
        opType: number;
        rootableType: "article";
        linkableType: "article";
        related: {
            title: string;
            id: number;
            likeUsers: string;
            noteCount: number;
        };
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        createdAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                opType: number;
                rootableType: "problem";
                linkableType: "problem";
                related: {
                    title: string;
                    id: number;
                    coteries: {
                        id: number;
                        name: string;
                        stats: {
                            ideaCount: number;
                            problemCount: number;
                            memberCount: number;
                            lastWeekWeight: number;
                            lastWeekRanking: number;
                            lastWeekPv: number;
                            pv: number;
                        };
                        avatar: string;
                    }[];
                    type: string;
                    createdAt: number;
                    answerCount: number;
                    agreeCount: number;
                    updatedAt: number;
                    titleMd: string;
                    agreeUsernames: string;
                    likeCount: number;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    readCount: number;
                    imageField: string;
                    videoField: string;
                    tags: {
                        id: number;
                        name: string;
                    }[];
                    starCount: number;
                    resolved: boolean;
                    replyType: string;
                };
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                createdAt: number;
            } | {
                id: number;
                opType: number;
                rootableType: "idea";
                linkableType: "idea";
                related: {
                    id: number;
                    type: "link" | "video" | "image" | "text" | "vote";
                    readCount: number;
                    starCount: number;
                    noteCount: number;
                    shareCount: number;
                    agreeCount: number;
                    agreeUsernames: string;
                    disagreeCount: number;
                    linkUrl: string;
                    videoUrl: string;
                    videoState: 0 | 2 | 1;
                    linkContent: {
                        url: string;
                        title: string;
                        description: string;
                        logo: string;
                    };
                    imageUrls: string;
                    source: string;
                    sourceType: string;
                    sourceId: number;
                    sourceName: string;
                    sourceSubType: string;
                    sourceSubId: number;
                    sourceSubName: string;
                    coteries: {
                        id: number;
                        name: string;
                        avatar: string;
                    }[];
                    userId: number;
                    username: string;
                    content: string;
                    contentMd: string;
                    createdAt: number;
                    updatedAt: number;
                    curStar: boolean;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    vote: {
                        id: number;
                        title: string;
                        type: string;
                        totalCount: number;
                        totalUserCount: number;
                        curUserVote: boolean;
                        voteItems: {
                            id: number;
                            voteId: number;
                            content: string;
                            voteCount: number;
                            curUserVote: boolean;
                            voteUsernames: string;
                        }[];
                    };
                };
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                createdAt: number;
            } | {
                id: number;
                opType: number;
                rootableType: "article";
                linkableType: "article";
                related: {
                    title: string;
                    id: number;
                    likeUsers: string;
                    noteCount: number;
                };
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                createdAt: number;
            }>>;
        };
    };
    getFeedByUserCoteries: ((params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        opType: number;
        rootableType: "problem";
        linkableType: "problem";
        related: {
            title: string;
            id: number;
            coteries: {
                id: number;
                name: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                };
                avatar: string;
            }[];
            type: string;
            createdAt: number;
            answerCount: number;
            agreeCount: number;
            updatedAt: number;
            titleMd: string;
            agreeUsernames: string;
            likeCount: number;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            readCount: number;
            imageField: string;
            videoField: string;
            tags: {
                id: number;
                name: string;
            }[];
            starCount: number;
            resolved: boolean;
            replyType: string;
        };
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        createdAt: number;
    } | {
        id: number;
        opType: number;
        rootableType: "idea";
        linkableType: "idea";
        related: {
            id: number;
            type: "link" | "video" | "image" | "text" | "vote";
            readCount: number;
            starCount: number;
            noteCount: number;
            shareCount: number;
            agreeCount: number;
            agreeUsernames: string;
            disagreeCount: number;
            linkUrl: string;
            videoUrl: string;
            videoState: 0 | 2 | 1;
            linkContent: {
                url: string;
                title: string;
                description: string;
                logo: string;
            };
            imageUrls: string;
            source: string;
            sourceType: string;
            sourceId: number;
            sourceName: string;
            sourceSubType: string;
            sourceSubId: number;
            sourceSubName: string;
            coteries: {
                id: number;
                name: string;
                avatar: string;
            }[];
            userId: number;
            username: string;
            content: string;
            contentMd: string;
            createdAt: number;
            updatedAt: number;
            curStar: boolean;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            vote: {
                id: number;
                title: string;
                type: string;
                totalCount: number;
                totalUserCount: number;
                curUserVote: boolean;
                voteItems: {
                    id: number;
                    voteId: number;
                    content: string;
                    voteCount: number;
                    curUserVote: boolean;
                    voteUsernames: string;
                }[];
            };
        };
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        createdAt: number;
    } | {
        id: number;
        opType: number;
        rootableType: "article";
        linkableType: "article";
        related: {
            title: string;
            id: number;
            likeUsers: string;
            noteCount: number;
        };
        coterie: {
            id: number;
            name: string;
            avatar: string;
        };
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        createdAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                opType: number;
                rootableType: "problem";
                linkableType: "problem";
                related: {
                    title: string;
                    id: number;
                    coteries: {
                        id: number;
                        name: string;
                        stats: {
                            ideaCount: number;
                            problemCount: number;
                            memberCount: number;
                            lastWeekWeight: number;
                            lastWeekRanking: number;
                            lastWeekPv: number;
                            pv: number;
                        };
                        avatar: string;
                    }[];
                    type: string;
                    createdAt: number;
                    answerCount: number;
                    agreeCount: number;
                    updatedAt: number;
                    titleMd: string;
                    agreeUsernames: string;
                    likeCount: number;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    readCount: number;
                    imageField: string;
                    videoField: string;
                    tags: {
                        id: number;
                        name: string;
                    }[];
                    starCount: number;
                    resolved: boolean;
                    replyType: string;
                };
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                createdAt: number;
            } | {
                id: number;
                opType: number;
                rootableType: "idea";
                linkableType: "idea";
                related: {
                    id: number;
                    type: "link" | "video" | "image" | "text" | "vote";
                    readCount: number;
                    starCount: number;
                    noteCount: number;
                    shareCount: number;
                    agreeCount: number;
                    agreeUsernames: string;
                    disagreeCount: number;
                    linkUrl: string;
                    videoUrl: string;
                    videoState: 0 | 2 | 1;
                    linkContent: {
                        url: string;
                        title: string;
                        description: string;
                        logo: string;
                    };
                    imageUrls: string;
                    source: string;
                    sourceType: string;
                    sourceId: number;
                    sourceName: string;
                    sourceSubType: string;
                    sourceSubId: number;
                    sourceSubName: string;
                    coteries: {
                        id: number;
                        name: string;
                        avatar: string;
                    }[];
                    userId: number;
                    username: string;
                    content: string;
                    contentMd: string;
                    createdAt: number;
                    updatedAt: number;
                    curStar: boolean;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    vote: {
                        id: number;
                        title: string;
                        type: string;
                        totalCount: number;
                        totalUserCount: number;
                        curUserVote: boolean;
                        voteItems: {
                            id: number;
                            voteId: number;
                            content: string;
                            voteCount: number;
                            curUserVote: boolean;
                            voteUsernames: string;
                        }[];
                    };
                };
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                createdAt: number;
            } | {
                id: number;
                opType: number;
                rootableType: "article";
                linkableType: "article";
                related: {
                    title: string;
                    id: number;
                    likeUsers: string;
                    noteCount: number;
                };
                coterie: {
                    id: number;
                    name: string;
                    avatar: string;
                };
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                createdAt: number;
            }>>;
        };
    };
    getAllCoterieIdeas: ((params?: (SearchWithPaginationParams & {
        stick?: boolean | undefined;
        types?: ("link" | "video" | "image" | "text" | "vote")[] | undefined;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        type: "link" | "video" | "image" | "text" | "vote";
        readCount: number;
        starCount: number;
        noteCount: number;
        shareCount: number;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        linkUrl: string;
        videoUrl: string;
        videoState: 0 | 2 | 1;
        linkContent: {
            url: string;
            title: string;
            description: string;
            logo: string;
        };
        imageUrls: string;
        source: string;
        sourceType: string;
        sourceId: number;
        sourceName: string;
        sourceSubType: string;
        sourceSubId: number;
        sourceSubName: string;
        coteries: {
            id: number;
            name: string;
            avatar: string;
        }[];
        userId: number;
        username: string;
        content: string;
        contentMd: string;
        createdAt: number;
        updatedAt: number;
        curStar: boolean;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        vote: {
            id: number;
            title: string;
            type: string;
            totalCount: number;
            totalUserCount: number;
            curUserVote: boolean;
            voteItems: {
                id: number;
                voteId: number;
                content: string;
                voteCount: number;
                curUserVote: boolean;
                voteUsernames: string;
            }[];
        };
        sticked: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: (SearchWithPaginationParams & {
                stick?: boolean | undefined;
                types?: ("link" | "video" | "image" | "text" | "vote")[] | undefined;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                type: "link" | "video" | "image" | "text" | "vote";
                readCount: number;
                starCount: number;
                noteCount: number;
                shareCount: number;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                linkUrl: string;
                videoUrl: string;
                videoState: 0 | 2 | 1;
                linkContent: {
                    url: string;
                    title: string;
                    description: string;
                    logo: string;
                };
                imageUrls: string;
                source: string;
                sourceType: string;
                sourceId: number;
                sourceName: string;
                sourceSubType: string;
                sourceSubId: number;
                sourceSubName: string;
                coteries: {
                    id: number;
                    name: string;
                    avatar: string;
                }[];
                userId: number;
                username: string;
                content: string;
                contentMd: string;
                createdAt: number;
                updatedAt: number;
                curStar: boolean;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                vote: {
                    id: number;
                    title: string;
                    type: string;
                    totalCount: number;
                    totalUserCount: number;
                    curUserVote: boolean;
                    voteItems: {
                        id: number;
                        voteId: number;
                        content: string;
                        voteCount: number;
                        curUserVote: boolean;
                        voteUsernames: string;
                    }[];
                };
                sticked: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getIdeas: ((coterieId: number, params?: (SearchWithPaginationParams & {
        stick?: boolean | undefined;
        withProblem?: boolean | undefined;
        statsTotal?: boolean | undefined;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        type: "link" | "video" | "image" | "text" | "vote";
        readCount: number;
        starCount: number;
        noteCount: number;
        shareCount: number;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        linkUrl: string;
        videoUrl: string;
        videoState: 0 | 2 | 1;
        linkContent: {
            url: string;
            title: string;
            description: string;
            logo: string;
        };
        imageUrls: string;
        source: string;
        sourceType: string;
        sourceId: number;
        sourceName: string;
        sourceSubType: string;
        sourceSubId: number;
        sourceSubName: string;
        coteries: {
            id: number;
            name: string;
            avatar: string;
        }[];
        userId: number;
        username: string;
        content: string;
        contentMd: string;
        createdAt: number;
        updatedAt: number;
        curStar: boolean;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        vote: {
            id: number;
            title: string;
            type: string;
            totalCount: number;
            totalUserCount: number;
            curUserVote: boolean;
            voteItems: {
                id: number;
                voteId: number;
                content: string;
                voteCount: number;
                curUserVote: boolean;
                voteUsernames: string;
            }[];
        };
        ideaLink?: {
            sticked: boolean;
        } | undefined;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params?: (SearchWithPaginationParams & {
                stick?: boolean | undefined;
                withProblem?: boolean | undefined;
                statsTotal?: boolean | undefined;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                type: "link" | "video" | "image" | "text" | "vote";
                readCount: number;
                starCount: number;
                noteCount: number;
                shareCount: number;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                linkUrl: string;
                videoUrl: string;
                videoState: 0 | 2 | 1;
                linkContent: {
                    url: string;
                    title: string;
                    description: string;
                    logo: string;
                };
                imageUrls: string;
                source: string;
                sourceType: string;
                sourceId: number;
                sourceName: string;
                sourceSubType: string;
                sourceSubId: number;
                sourceSubName: string;
                coteries: {
                    id: number;
                    name: string;
                    avatar: string;
                }[];
                userId: number;
                username: string;
                content: string;
                contentMd: string;
                createdAt: number;
                updatedAt: number;
                curStar: boolean;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                vote: {
                    id: number;
                    title: string;
                    type: string;
                    totalCount: number;
                    totalUserCount: number;
                    curUserVote: boolean;
                    voteItems: {
                        id: number;
                        voteId: number;
                        content: string;
                        voteCount: number;
                        curUserVote: boolean;
                        voteUsernames: string;
                    }[];
                };
                ideaLink?: {
                    sticked: boolean;
                } | undefined;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    setIdeaStick: ((coterieId: number, ideaId: number, params: {
        stick: boolean;
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, ideaId: number, params: {
                stick: boolean;
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    subscribeCoterie: ((coterieId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    unsubscribeCoterie: ((coterieId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    getCoteriesByUserTags: ((username: string) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        stats: {
            ideaCount: number;
            problemCount: number;
            articleCount: number;
            memberCount: number;
            lastWeekWeight: number;
            lastWeekRanking: number;
            lastWeekPv: number;
            pv: number;
            answeredProblemCount: number;
        };
        curStar: boolean;
        avatar: string;
        createdAt: number;
        description: string;
        v: string;
        curJoin: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    articleCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                    answeredProblemCount: number;
                };
                curStar: boolean;
                avatar: string;
                createdAt: number;
                description: string;
                v: string;
                curJoin: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getCoteriesAdminIndicator: ((coterieId: number) => Promise<import("axios").AxiosResponse<{
        curWeek: {
            answerCount: number;
            answeredProblemCount: number;
            articleCount: number;
            ideaCount: number;
            memberCount: number;
            problemCount: number;
            pvCount: number;
        };
        lastMonth: {
            answerCount: number;
            answeredProblemCount: number;
            articleCount: number;
            ideaCount: number;
            memberCount: number;
            problemCount: number;
            pvCount: number;
            categoryRank: number;
            rank: number;
        };
        lastWeek: {
            answerCount: number;
            answeredProblemCount: number;
            articleCount: number;
            ideaCount: number;
            memberCount: number;
            problemCount: number;
            pvCount: number;
            categoryRank: number;
            rank: number;
        };
        total: {
            answerCount: number;
            answeredProblemCount: number;
            articleCount: number;
            ideaCount: number;
            memberCount: number;
            problemCount: number;
            pvCount: number;
        };
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number) => Promise<import("axios").AxiosResponse<{
                curWeek: {
                    answerCount: number;
                    answeredProblemCount: number;
                    articleCount: number;
                    ideaCount: number;
                    memberCount: number;
                    problemCount: number;
                    pvCount: number;
                };
                lastMonth: {
                    answerCount: number;
                    answeredProblemCount: number;
                    articleCount: number;
                    ideaCount: number;
                    memberCount: number;
                    problemCount: number;
                    pvCount: number;
                    categoryRank: number;
                    rank: number;
                };
                lastWeek: {
                    answerCount: number;
                    answeredProblemCount: number;
                    articleCount: number;
                    ideaCount: number;
                    memberCount: number;
                    problemCount: number;
                    pvCount: number;
                    categoryRank: number;
                    rank: number;
                };
                total: {
                    answerCount: number;
                    answeredProblemCount: number;
                    articleCount: number;
                    ideaCount: number;
                    memberCount: number;
                    problemCount: number;
                    pvCount: number;
                };
            }>>;
        };
    };
    getCoteriesAdminMemberData: ((coterieId: number, params: CoterieAdminDataParams) => Promise<import("axios").AxiosResponse<{
        username: string;
        bg: string;
        incrScore: number;
        org: string;
        accessLevel: number;
        createdAt: number;
        score: number;
        problemCount: number;
        answerCount: number;
        ideaCount: number;
        articleCount: number;
        problemAgreeCount: number;
        answerAgreeCount: number;
        articleAgreeCount: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: CoterieAdminDataParams) => Promise<import("axios").AxiosResponse<{
                username: string;
                bg: string;
                incrScore: number;
                org: string;
                accessLevel: number;
                createdAt: number;
                score: number;
                problemCount: number;
                answerCount: number;
                ideaCount: number;
                articleCount: number;
                problemAgreeCount: number;
                answerAgreeCount: number;
                articleAgreeCount: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getCoteriesAdminContentData: ((coterieId: number, params: CoterieAdminDataParams) => Promise<import("axios").AxiosResponse<{
        createdAt: number;
        pvCount: number;
        uvCount: number;
        problemCount: number;
        answerCount: number; /**
         * 根据圈内标签拉取推荐的问答, 用于圈内收录
         * @param {number} coterieId
         * @param {SearchWithPaginationParams} params
         * @returns
         */
        ideaCount: number;
        articleCount: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: CoterieAdminDataParams) => Promise<import("axios").AxiosResponse<{
                createdAt: number;
                pvCount: number;
                uvCount: number;
                problemCount: number;
                answerCount: number; /**
                 * 根据圈内标签拉取推荐的问答, 用于圈内收录
                 * @param {number} coterieId
                 * @param {SearchWithPaginationParams} params
                 * @returns
                 */
                ideaCount: number;
                articleCount: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    exportCoterieAdminMemberData: ((coterieId: number, params: Pick<CoterieAdminDataParams, 'beginTime' | 'finishTime'>) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: Pick<CoterieAdminDataParams, 'beginTime' | 'finishTime'>) => void;
        };
    };
    exportCoterieAdminContentData: ((coterieId: number, params: Pick<CoterieAdminDataParams, 'beginTime' | 'finishTime'>) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: Pick<CoterieAdminDataParams, 'beginTime' | 'finishTime'>) => void;
        };
    };
    getHottestQuestions: ((coterieId: number) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getHottestIdeas: ((coterieId: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        type: "link" | "video" | "image" | "text" | "vote";
        readCount: number;
        starCount: number;
        noteCount: number;
        shareCount: number;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        linkUrl: string;
        videoUrl: string;
        videoState: 0 | 2 | 1;
        linkContent: {
            url: string;
            title: string;
            description: string;
            logo: string;
        };
        imageUrls: string;
        source: string;
        sourceType: string;
        sourceId: number;
        sourceName: string;
        sourceSubType: string;
        sourceSubId: number;
        sourceSubName: string;
        coteries: {
            id: number;
            name: string;
            avatar: string;
        }[];
        userId: number;
        username: string;
        content: string;
        contentMd: string;
        createdAt: number;
        updatedAt: number;
        curStar: boolean;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        vote: {
            id: number;
            title: string;
            type: string;
            totalCount: number;
            totalUserCount: number;
            curUserVote: boolean;
            voteItems: {
                id: number;
                voteId: number;
                content: string;
                voteCount: number;
                curUserVote: boolean;
                voteUsernames: string;
            }[];
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                type: "link" | "video" | "image" | "text" | "vote";
                readCount: number;
                starCount: number;
                noteCount: number;
                shareCount: number;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                linkUrl: string;
                videoUrl: string;
                videoState: 0 | 2 | 1;
                linkContent: {
                    url: string;
                    title: string;
                    description: string;
                    logo: string;
                };
                imageUrls: string;
                source: string;
                sourceType: string;
                sourceId: number;
                sourceName: string;
                sourceSubType: string;
                sourceSubId: number;
                sourceSubName: string;
                coteries: {
                    id: number;
                    name: string;
                    avatar: string;
                }[];
                userId: number;
                username: string;
                content: string;
                contentMd: string;
                createdAt: number;
                updatedAt: number;
                curStar: boolean;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                vote: {
                    id: number;
                    title: string;
                    type: string;
                    totalCount: number;
                    totalUserCount: number;
                    curUserVote: boolean;
                    voteItems: {
                        id: number;
                        voteId: number;
                        content: string;
                        voteCount: number;
                        curUserVote: boolean;
                        voteUsernames: string;
                    }[];
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getCoterieTags: ((coterieId: number, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        type: string;
        subscribeCount: number;
        problemRefCount: number;
        articleRefCount: number;
        contributors: string;
        notifications: string;
        createdAt: number;
        curStar: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                type: string;
                subscribeCount: number;
                problemRefCount: number;
                articleRefCount: number;
                contributors: string;
                notifications: string;
                createdAt: number;
                curStar: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    saveCoterieHomePage: ((coterieId: number, body: {
        homepage: string;
    }) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, body: {
                homepage: string;
            }) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
    searchSubject: ((coterieId: number, params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        curStar: boolean;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        subjectLink?: {
            linkableId: number;
        } | undefined;
        id: number;
        title: string;
        description: string;
        referCount: number;
        starCount: number;
        pv: number;
        source: string;
        sticked: boolean;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                curStar: boolean;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                subjectLink?: {
                    linkableId: number;
                } | undefined;
                id: number;
                title: string;
                description: string;
                referCount: number;
                starCount: number;
                pv: number;
                source: string;
                sticked: boolean;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getRecommendSubjects: ((coterieId: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        curStar: boolean;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        subjectLink?: {
            linkableId: number;
        } | undefined;
        id: number;
        title: string;
        description: string;
        referCount: number;
        starCount: number;
        pv: number;
        source: string;
        sticked: boolean;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                curStar: boolean;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                subjectLink?: {
                    linkableId: number;
                } | undefined;
                id: number;
                title: string;
                description: string;
                referCount: number;
                starCount: number;
                pv: number;
                source: string;
                sticked: boolean;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    recommendSubject: ((coterieId: number, params: {
        subjectId: number;
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: {
                subjectId: number;
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    unrecommendSubject: ((coterieId: number, params: {
        subjectId: number;
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: {
                subjectId: number;
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    getCoterieBriefQuestions: ((params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
            };
            avatar: string;
        }[];
        type: string;
        createdAt: number;
        answerCount: number;
        agreeCount: number;
        updatedAt: number;
        titleMd: string;
        agreeUsernames: string;
        likeCount: number;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        readCount: number;
        imageField: string;
        videoField: string;
        tags: {
            id: number;
            name: string;
        }[];
        starCount: number;
        resolved: boolean;
        replyType: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                    };
                    avatar: string;
                }[];
                type: string;
                createdAt: number;
                answerCount: number;
                agreeCount: number;
                updatedAt: number;
                titleMd: string;
                agreeUsernames: string;
                likeCount: number;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                readCount: number;
                imageField: string;
                videoField: string;
                tags: {
                    id: number;
                    name: string;
                }[];
                starCount: number;
                resolved: boolean;
                replyType: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getAllCoteriesExperts: (() => Promise<import("axios").AxiosResponse<{
        related: {
            id: number;
            description: string;
            user: {
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                username: string;
                org: string;
            };
            coteries: {
                id: number;
                name: string;
                avatar: string;
            }[];
            createdAt: number;
            updatedAt: number;
        };
        id: string;
        type: string;
        url: string;
        title: string;
        banner: string;
        data1: string;
        data2: string;
        createdAt: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                related: {
                    id: number;
                    description: string;
                    user: {
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        username: string;
                        org: string;
                    };
                    coteries: {
                        id: number;
                        name: string;
                        avatar: string;
                    }[];
                    createdAt: number;
                    updatedAt: number;
                };
                id: string;
                type: string;
                url: string;
                title: string;
                banner: string;
                data1: string;
                data2: string;
                createdAt: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getCoterieExperts: ((id: number) => Promise<import("axios").AxiosResponse<{
        related: {
            id: number;
            description: string;
            user: {
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                username: string;
                org: string;
            };
            coteries: {
                id: number;
                name: string;
                avatar: string;
            }[];
            createdAt: number;
            updatedAt: number;
        };
        id: string;
        type: string;
        url: string;
        title: string;
        banner: string;
        data1: string;
        data2: string;
        createdAt: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => Promise<import("axios").AxiosResponse<{
                related: {
                    id: number;
                    description: string;
                    user: {
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        username: string;
                        org: string;
                    };
                    coteries: {
                        id: number;
                        name: string;
                        avatar: string;
                    }[];
                    createdAt: number;
                    updatedAt: number;
                };
                id: string;
                type: string;
                url: string;
                title: string;
                banner: string;
                data1: string;
                data2: string;
                createdAt: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getCoterieHomeRightBarAd: (() => Promise<import("axios").AxiosResponse<{
        id: string;
        type: string;
        url: string;
        title: string;
        banner: string;
        data1: string;
        data2: string;
        createdAt: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                id: string;
                type: string;
                url: string;
                title: string;
                banner: string;
                data1: string;
                data2: string;
                createdAt: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getCoterieArticles: ((coterieId: number, params?: (FullPaginationParams & {
        tagIds?: number[] | undefined;
        stick?: boolean | undefined;
        categoryIds?: number[] | undefined;
        noCategory?: boolean | undefined;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
        detailMd: string;
        detail: string;
        articleLinks: {
            classificationName: string;
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params?: (FullPaginationParams & {
                tagIds?: number[] | undefined;
                stick?: boolean | undefined;
                categoryIds?: number[] | undefined;
                noCategory?: boolean | undefined;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
                detailMd: string;
                detail: string;
                articleLinks: {
                    classificationName: string;
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getCoterieHotArticles: ((coterieId: number) => Promise<import("axios").AxiosResponse<{
        title: string;
        id: number;
        createdAt: number;
        updatedAt: number;
        likeCount: number;
        likeUsers: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
                answerCount: number;
                problemCount: number;
                agreeCount: number;
                articleCount: number;
            };
        };
        readCount: number;
        noteCount: number;
        imageField: string;
        tags: {
            id: number;
            name: string;
            value: string;
            orderBy: number;
        }[];
        starCount: number;
        coterieId: number;
        sticked: boolean;
        coterieName: number;
        uuid: number;
        contestId: number;
        contestName: number;
        visibility: 10 | 5;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number) => Promise<import("axios").AxiosResponse<{
                title: string;
                id: number;
                createdAt: number;
                updatedAt: number;
                likeCount: number;
                likeUsers: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                        answerCount: number;
                        problemCount: number;
                        agreeCount: number;
                        articleCount: number;
                    };
                };
                readCount: number;
                noteCount: number;
                imageField: string;
                tags: {
                    id: number;
                    name: string;
                    value: string;
                    orderBy: number;
                }[];
                starCount: number;
                coterieId: number;
                sticked: boolean;
                coterieName: number;
                uuid: number;
                contestId: number;
                contestName: number;
                visibility: 10 | 5;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    toggleArticleSticked: ((coterieId: number, articleId: number, params: {
        stick: boolean;
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, articleId: number, params: {
                stick: boolean;
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    sendCoterieMsg: ((coterieId: number, body: CoterieAdminMsgFormParams) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, body: CoterieAdminMsgFormParams) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    getMsgHistoryByCoterie: ((coterieId: number, params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        content: string;
        username: string;
        finalListCount: number;
        readCount: number;
        createdAt: number;
        state: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params?: SearchWithPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                content: string;
                username: string;
                finalListCount: number;
                readCount: number;
                createdAt: number;
                state: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getCoterieMsgRemaining: ((coterieId: number) => Promise<import("axios").AxiosResponse<number>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number) => Promise<import("axios").AxiosResponse<number>>;
        };
    };
    getCoterieTapdWorkspaces: ((id: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        coterieId: number;
        linkableName: string;
        linkableUrl: string;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        linkableId: number;
        linkableType: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                coterieId: number;
                linkableName: string;
                linkableUrl: string;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                linkableId: number;
                linkableType: string;
            }>>;
        };
    };
    unbindCoterieTapd: ((id: number, workspaceId: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        coterieId: number;
        linkableName: string;
        linkableUrl: string;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
        linkableId: number;
        linkableType: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, workspaceId: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                coterieId: number;
                linkableName: string;
                linkableUrl: string;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
                linkableId: number;
                linkableType: string;
            }>>;
        };
    };
    createTapdStory: ((coterieId: number, workspaceId: number, form: TapdStoryForm) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, workspaceId: number, form: TapdStoryForm) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    createTapdBug: ((coterieId: number, workspaceId: number, form: TapdBugForm) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, workspaceId: number, form: TapdBugForm) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    getTapdWorkOrder: ((coterieId: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        problem: {
            id: number;
            createdAt: number;
            answerCount: number;
            titleMd: string;
            answeredAt: number;
        };
        link: {
            id: number;
            innerId: number;
            externalRootName: string;
            externalRootId: number;
            externalLinkId: number;
            externalLinkType: string;
            createdAt: number;
            userId: number;
            username: string;
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                problem: {
                    id: number;
                    createdAt: number;
                    answerCount: number;
                    titleMd: string;
                    answeredAt: number;
                };
                link: {
                    id: number;
                    innerId: number;
                    externalRootName: string;
                    externalRootId: number;
                    externalLinkId: number;
                    externalLinkType: string;
                    createdAt: number;
                    userId: number;
                    username: string;
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    exportTapdWorkOrder: ((coterieId: number, params?: {
        search?: string | undefined;
    } | undefined) => void) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params?: {
                search?: string | undefined;
            } | undefined) => void;
        };
    };
    searchCoterieCategory: ((coterieId: number, params: {
        type: CategoryType;
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        order: number;
        contentCount: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: {
                type: CategoryType;
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                order: number;
                contentCount: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    updateCoterieCategoryOrder: ((coterieId: number, params: {
        orderList: {
            id: number;
            order: number;
        }[];
        type: CategoryType;
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: {
                orderList: {
                    id: number;
                    order: number;
                }[];
                type: CategoryType;
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    createCoterieCategory: ((coterieId: number, params: {
        name: string;
        type: CategoryType;
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: {
                name: string;
                type: CategoryType;
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    updateCoterieCategory: ((coterieId: number, categoryId: number, params: {
        name: string;
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, categoryId: number, params: {
                name: string;
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    delCoterieCategory: ((coterieId: number, categoryId: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, categoryId: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    setContentCategory: ((coterieId: number, params: {
        categoryId?: number;
        type: CategoryType;
        contentIds: [number];
    }) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, params: {
                categoryId?: number;
                type: CategoryType;
                contentIds: [number];
            }) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    createTemplate: ((id: number, params: TemplateForm & {
        linkableType: CoterieTemplateLinkableType;
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        linkableId: number;
        linkableType: string;
        type: string;
        content: string;
        status: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, params: TemplateForm & {
                linkableType: CoterieTemplateLinkableType;
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                linkableId: number;
                linkableType: string;
                type: string;
                content: string;
                status: string;
            }>>;
        };
    };
    updateTemplate: ((coterieId: number, templateId: number, params: TemplateForm & {
        status?: TemplateStatus;
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        linkableId: number;
        linkableType: string;
        type: string;
        content: string;
        status: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (coterieId: number, templateId: number, params: TemplateForm & {
                status?: TemplateStatus;
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                linkableId: number;
                linkableType: string;
                type: string;
                content: string;
                status: string;
            }>>;
        };
    };
    getTemplates: ((id: number, params: {
        linkableType: CoterieTemplateLinkableType;
        status?: TemplateStatus;
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        name: string;
        linkableId: number;
        linkableType: string;
        type: string;
        content: string;
        status: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, params: {
                linkableType: CoterieTemplateLinkableType;
                status?: TemplateStatus;
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                name: string;
                linkableId: number;
                linkableType: string;
                type: string;
                content: string;
                status: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
};
