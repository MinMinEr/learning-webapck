import { PaginationParams } from '../../types';
export declare const MkMessageApi: {
    getByType: ((type: 'all' | 'comment' | 'system' | 'action', params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        type: string;
        content: string;
        contentMd: string;
        operator: string;
        status: string;
        createdAt: string;
        url: string;
        related: {
            id: number;
            amount: number;
            status: string;
            userId: number;
            username: string;
            rootableId: number;
            rootableType: string;
            linkableId: number;
            linkableType: string;
        };
        rootableId: number;
        rootableType: string;
        linkableId: number;
        linkableType: string;
        title: string;
        titleMd: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (type: 'all' | 'comment' | 'system' | 'action', params?: PaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                type: string;
                content: string;
                contentMd: string;
                operator: string;
                status: string;
                createdAt: string;
                url: string;
                related: {
                    id: number;
                    amount: number;
                    status: string;
                    userId: number;
                    username: string;
                    rootableId: number;
                    rootableType: string;
                    linkableId: number;
                    linkableType: string;
                };
                rootableId: number;
                rootableType: string;
                linkableId: number;
                linkableType: string;
                title: string;
                titleMd: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getStats: (() => Promise<import("axios").AxiosResponse<{
        comment: number;
        system: number;
        action: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                comment: number;
                system: number;
                action: number;
            }>>;
        };
    };
    getMobileStats: (() => Promise<import("axios").AxiosResponse<{
        comment: number;
        system: number;
        action: number;
        marker: number;
        redpacket: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                comment: number;
                system: number;
                action: number;
                marker: number;
                redpacket: number;
            }>>;
        };
    };
    getUnreadCount: (() => Promise<import("axios").AxiosResponse<number>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<number>>;
        };
    };
    setRead: ((id: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    setReadAll: (() => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<null>>;
        };
    };
};
