import { PaginationParams } from '../../types';
declare type ISearchType = 'mixed' | 'qa' | 'idea' | 'article' | 'problem';
interface ISearchParams extends PaginationParams {
    channel?: 'web_search' | 'web_ask_question';
    searchType: ISearchType;
    query: string;
    coterieId?: number;
    sortType?: 'similarity' | 'time-desc' | 'time-asc' | 'default';
}
declare type SimpleSearchType = 'coterie' | 'note' | 'problem';
export declare const MkSearchApi: {
    simpleSearchByType: (({ type, search }: {
        type: SimpleSearchType;
        search?: string | undefined;
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        title: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: ({ type, search }: {
                type: SimpleSearchType;
                search?: string | undefined;
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                title: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    iSearch: ((params: ISearchParams) => Promise<import("axios").AxiosResponse<{
        coteries: {
            id: number;
            name: string;
            stats: {
                ideaCount: number;
                problemCount: number;
                articleCount: number;
                memberCount: number;
                lastWeekWeight: number;
                lastWeekRanking: number;
                lastWeekPv: number;
                pv: number;
                answeredProblemCount: number;
            };
            avatar: string;
            createdAt: number;
        }[];
        isearchResponse: {
            contents: {
                author: string;
                content_type: string;
                count_collection: number;
                count_comment: number;
                count_like: number;
                count_view: number;
                create_time: string;
                modify_time: string;
                fragment: string;
                href: string;
                id: string;
                title: string;
            }[];
            total: number;
        };
        users: {
            name: string;
            username: string;
            org: string;
        }[];
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: ISearchParams) => Promise<import("axios").AxiosResponse<{
                coteries: {
                    id: number;
                    name: string;
                    stats: {
                        ideaCount: number;
                        problemCount: number;
                        articleCount: number;
                        memberCount: number;
                        lastWeekWeight: number;
                        lastWeekRanking: number;
                        lastWeekPv: number;
                        pv: number;
                        answeredProblemCount: number;
                    };
                    avatar: string;
                    createdAt: number;
                }[];
                isearchResponse: {
                    contents: {
                        author: string;
                        content_type: string;
                        count_collection: number;
                        count_comment: number;
                        count_like: number;
                        count_view: number;
                        create_time: string;
                        modify_time: string;
                        fragment: string;
                        href: string;
                        id: string;
                        title: string;
                    }[];
                    total: number;
                };
                users: {
                    name: string;
                    username: string;
                    org: string;
                }[];
            }>>;
        };
    };
};
export {};
