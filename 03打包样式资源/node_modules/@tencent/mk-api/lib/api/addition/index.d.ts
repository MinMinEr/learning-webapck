import { StrOrNum } from '../../types';
interface AdditionForm {
    description: string;
    sourceId?: StrOrNum;
    sourceType?: string;
}
export declare const MkAdditionApi: {
    getByQuestion: ((questionId: number) => Promise<import("axios").AxiosResponse<{
        source: string;
        id: number;
        createdAt: number;
        rootableId: number;
        updatedAt: number;
        parentId: number;
        content: string;
        contentMd: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number) => Promise<import("axios").AxiosResponse<{
                source: string;
                id: number;
                createdAt: number;
                rootableId: number;
                updatedAt: number;
                parentId: number;
                content: string;
                contentMd: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
            }>>;
        };
    };
    get: ((questionId: number, noteId: number) => Promise<import("axios").AxiosResponse<{
        source: string;
        id: number;
        createdAt: number;
        rootableId: number;
        updatedAt: number;
        parentId: number;
        content: string;
        contentMd: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, noteId: number) => Promise<import("axios").AxiosResponse<{
                source: string;
                id: number;
                createdAt: number;
                rootableId: number;
                updatedAt: number;
                parentId: number;
                content: string;
                contentMd: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
            }>>;
        };
    };
    create: ((questionId: number, additionForm: AdditionForm) => Promise<import("axios").AxiosResponse<{
        source: string;
        id: number;
        createdAt: number;
        rootableId: number;
        updatedAt: number;
        parentId: number;
        content: string;
        contentMd: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, additionForm: AdditionForm) => Promise<import("axios").AxiosResponse<{
                source: string;
                id: number;
                createdAt: number;
                rootableId: number;
                updatedAt: number;
                parentId: number;
                content: string;
                contentMd: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
            }>>;
        };
    };
    update: ((questionId: number, additionId: number, additionForm: AdditionForm) => Promise<import("axios").AxiosResponse<{
        source: string;
        id: number;
        createdAt: number;
        rootableId: number;
        updatedAt: number;
        parentId: number;
        content: string;
        contentMd: string;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, additionId: number, additionForm: AdditionForm) => Promise<import("axios").AxiosResponse<{
                source: string;
                id: number;
                createdAt: number;
                rootableId: number;
                updatedAt: number;
                parentId: number;
                content: string;
                contentMd: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
            }>>;
        };
    };
    delete: ((questionId: number, additionId: number) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (questionId: number, additionId: number) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
};
export {};
