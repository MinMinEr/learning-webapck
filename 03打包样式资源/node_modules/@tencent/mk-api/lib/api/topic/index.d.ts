import { PaginationParams } from '../../types';
declare type TopicType = '' | 'influencer_qa' | 'code_culture_award' | 'insight_10' | 'tech_topic';
export declare const MkTopicApi: {
    getTopicList: ((params?: {
        groupType?: TopicType;
        type?: 'problem' | 'banner';
    } & PaginationParams) => Promise<import("axios").AxiosResponse<{
        id: number;
        type: string;
        banner: string;
        url: string;
        title: string;
        readCount: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: {
                groupType?: TopicType;
                type?: 'problem' | 'banner';
            } & PaginationParams) => Promise<import("axios").AxiosResponse<{
                id: number;
                type: string;
                banner: string;
                url: string;
                title: string;
                readCount: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getById: ((id: number) => Promise<import("axios").AxiosResponse<{
        related: {
            title: string;
            id: number;
            coteries: {
                id: number;
                name: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                };
                avatar: string;
            }[];
            type: string;
            createdAt: number;
            answerCount: number;
            agreeCount: number;
            updatedAt: number;
            titleMd: string;
            agreeUsernames: string;
            likeCount: number;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            readCount: number;
            imageField: string;
            videoField: string;
            tags: {
                id: number;
                name: string;
            }[];
            starCount: number;
            resolved: boolean;
            replyType: string;
            answers?: {
                id: number;
                createdAt: number;
                agreeCount: number;
                updatedAt: number;
                contentMd: string;
                agreeUsernames: string;
                problemId: number;
                accepted: boolean;
                noteCount: number;
                imageField: string;
                videoField: string;
                contentPlain: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
            }[] | undefined;
        }[];
        status: boolean;
        id: number;
        type: string;
        banner: string;
        url: string;
        title: string;
        readCount: number;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => Promise<import("axios").AxiosResponse<{
                related: {
                    title: string;
                    id: number;
                    coteries: {
                        id: number;
                        name: string;
                        stats: {
                            ideaCount: number;
                            problemCount: number;
                            memberCount: number;
                            lastWeekWeight: number;
                            lastWeekRanking: number;
                            lastWeekPv: number;
                            pv: number;
                        };
                        avatar: string;
                    }[];
                    type: string;
                    createdAt: number;
                    answerCount: number;
                    agreeCount: number;
                    updatedAt: number;
                    titleMd: string;
                    agreeUsernames: string;
                    likeCount: number;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    readCount: number;
                    imageField: string;
                    videoField: string;
                    tags: {
                        id: number;
                        name: string;
                    }[];
                    starCount: number;
                    resolved: boolean;
                    replyType: string;
                    answers?: {
                        id: number;
                        createdAt: number;
                        agreeCount: number;
                        updatedAt: number;
                        contentMd: string;
                        agreeUsernames: string;
                        problemId: number;
                        accepted: boolean;
                        noteCount: number;
                        imageField: string;
                        videoField: string;
                        contentPlain: string;
                        author: {
                            title: string;
                            post: string;
                            id: number;
                            name: string;
                            curStar: boolean;
                            avatar: string;
                            username: string;
                            sex: string;
                            bg: string;
                            org: string;
                            anonymous: boolean;
                            createdAt: string;
                            stats: {
                                score: number;
                                scoreLevel: string;
                            };
                        };
                    }[] | undefined;
                }[];
                status: boolean;
                id: number;
                type: string;
                banner: string;
                url: string;
                title: string;
                readCount: number;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    getNewest: (({ offset }?: {
        offset?: number | undefined;
    }) => Promise<import("axios").AxiosResponse<{
        related: {
            title: string;
            id: number;
            coteries: {
                id: number;
                name: string;
                stats: {
                    ideaCount: number;
                    problemCount: number;
                    memberCount: number;
                    lastWeekWeight: number;
                    lastWeekRanking: number;
                    lastWeekPv: number;
                    pv: number;
                };
                avatar: string;
            }[];
            type: string;
            createdAt: number;
            answerCount: number;
            agreeCount: number;
            updatedAt: number;
            titleMd: string;
            agreeUsernames: string;
            likeCount: number;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
            readCount: number;
            imageField: string;
            videoField: string;
            tags: {
                id: number;
                name: string;
            }[];
            starCount: number;
            resolved: boolean;
            replyType: string;
            answers?: {
                id: number;
                createdAt: number;
                agreeCount: number;
                updatedAt: number;
                contentMd: string;
                agreeUsernames: string;
                problemId: number;
                accepted: boolean;
                noteCount: number;
                imageField: string;
                videoField: string;
                contentPlain: string;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
            }[] | undefined;
        }[];
        status: boolean;
        id: number;
        type: string;
        banner: string;
        url: string;
        title: string;
        readCount: number;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: ({ offset }?: {
                offset?: number | undefined;
            }) => Promise<import("axios").AxiosResponse<{
                related: {
                    title: string;
                    id: number;
                    coteries: {
                        id: number;
                        name: string;
                        stats: {
                            ideaCount: number;
                            problemCount: number;
                            memberCount: number;
                            lastWeekWeight: number;
                            lastWeekRanking: number;
                            lastWeekPv: number;
                            pv: number;
                        };
                        avatar: string;
                    }[];
                    type: string;
                    createdAt: number;
                    answerCount: number;
                    agreeCount: number;
                    updatedAt: number;
                    titleMd: string;
                    agreeUsernames: string;
                    likeCount: number;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                    readCount: number;
                    imageField: string;
                    videoField: string;
                    tags: {
                        id: number;
                        name: string;
                    }[];
                    starCount: number;
                    resolved: boolean;
                    replyType: string;
                    answers?: {
                        id: number;
                        createdAt: number;
                        agreeCount: number;
                        updatedAt: number;
                        contentMd: string;
                        agreeUsernames: string;
                        problemId: number;
                        accepted: boolean;
                        noteCount: number;
                        imageField: string;
                        videoField: string;
                        contentPlain: string;
                        author: {
                            title: string;
                            post: string;
                            id: number;
                            name: string;
                            curStar: boolean;
                            avatar: string;
                            username: string;
                            sex: string;
                            bg: string;
                            org: string;
                            anonymous: boolean;
                            createdAt: string;
                            stats: {
                                score: number;
                                scoreLevel: string;
                            };
                        };
                    }[] | undefined;
                }[];
                status: boolean;
                id: number;
                type: string;
                banner: string;
                url: string;
                title: string;
                readCount: number;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    getTopicAdvert: (() => Promise<import("axios").AxiosResponse<{
        related?: {
            id: number;
            type: string;
            banner: string;
            url: string;
            title: string;
            readCount: number;
            createdAt: number;
            updatedAt: number;
        } | undefined;
        id: string;
        type: string;
        url: string;
        title: string;
        banner: string;
        data1: string;
        data2: string;
        createdAt: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                related?: {
                    id: number;
                    type: string;
                    banner: string;
                    url: string;
                    title: string;
                    readCount: number;
                    createdAt: number;
                    updatedAt: number;
                } | undefined;
                id: string;
                type: string;
                url: string;
                title: string;
                banner: string;
                data1: string;
                data2: string;
                createdAt: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getNearList: ((id: number) => Promise<import("axios").AxiosResponse<{
        id: number;
        type: string;
        banner: string;
        url: string;
        title: string;
        readCount: number;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => Promise<import("axios").AxiosResponse<{
                id: number;
                type: string;
                banner: string;
                url: string;
                title: string;
                readCount: number;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
};
export {};
