import { FullPaginationParams, PaginationParams } from '../../types';
export declare const MkSubjectApi: {
    getById: ((id: number) => Promise<import("axios").AxiosResponse<{
        curStar: boolean;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        subjectLink?: {
            linkableId: number;
        } | undefined;
        id: number;
        title: string;
        description: string;
        referCount: number;
        starCount: number;
        pv: number;
        source: string;
        sticked: boolean;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => Promise<import("axios").AxiosResponse<{
                curStar: boolean;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                subjectLink?: {
                    linkableId: number;
                } | undefined;
                id: number;
                title: string;
                description: string;
                referCount: number;
                starCount: number;
                pv: number;
                source: string;
                sticked: boolean;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    search: ((params?: (FullPaginationParams & {
        statsTotal?: boolean | undefined;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        title: string;
        description: string;
        referCount: number;
        starCount: number;
        pv: number;
        source: string;
        sticked: boolean;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: (FullPaginationParams & {
                statsTotal?: boolean | undefined;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                title: string;
                description: string;
                referCount: number;
                starCount: number;
                pv: number;
                source: string;
                sticked: boolean;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getHot: ((params: PaginationParams & {
        statsTotal?: boolean;
        afterAt: string;
    }) => Promise<import("axios").AxiosResponse<{
        id: number;
        title: string;
        description: string;
        referCount: number;
        starCount: number;
        pv: number;
        source: string;
        sticked: boolean;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params: PaginationParams & {
                statsTotal?: boolean;
                afterAt: string;
            }) => Promise<import("axios").AxiosResponse<{
                id: number;
                title: string;
                description: string;
                referCount: number;
                starCount: number;
                pv: number;
                source: string;
                sticked: boolean;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getRecommend: (() => Promise<import("axios").AxiosResponse<{
        id: number;
        title: string;
        description: string;
        referCount: number;
        starCount: number;
        pv: number;
        source: string;
        sticked: boolean;
        userId: number;
        username: string;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                id: number;
                title: string;
                description: string;
                referCount: number;
                starCount: number;
                pv: number;
                source: string;
                sticked: boolean;
                userId: number;
                username: string;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getIdeas: ((id: number, params?: (FullPaginationParams & {
        activityId?: number | undefined;
    }) | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        type: "link" | "video" | "image" | "text" | "vote";
        readCount: number;
        starCount: number;
        noteCount: number;
        shareCount: number;
        agreeCount: number;
        agreeUsernames: string;
        disagreeCount: number;
        linkUrl: string;
        videoUrl: string;
        videoState: 0 | 2 | 1;
        linkContent: {
            url: string;
            title: string;
            description: string;
            logo: string;
        };
        imageUrls: string;
        source: string;
        sourceType: string;
        sourceId: number;
        sourceName: string;
        sourceSubType: string;
        sourceSubId: number;
        sourceSubName: string;
        coteries: {
            id: number;
            name: string;
            avatar: string;
        }[];
        userId: number;
        username: string;
        content: string;
        contentMd: string;
        createdAt: number;
        updatedAt: number;
        curStar: boolean;
        author: {
            title: string;
            post: string;
            id: number;
            name: string;
            curStar: boolean;
            avatar: string;
            username: string;
            sex: string;
            bg: string;
            org: string;
            anonymous: boolean;
            createdAt: string;
            stats: {
                score: number;
                scoreLevel: string;
            };
        };
        vote: {
            id: number;
            title: string;
            type: string;
            totalCount: number;
            totalUserCount: number;
            curUserVote: boolean;
            voteItems: {
                id: number;
                voteId: number;
                content: string; /**
                 * 根据id获取话题详情
                 *
                 * @param {number} id
                 * @returns
                 */
                voteCount: number;
                curUserVote: boolean;
                voteUsernames: string;
            }[];
        };
        curSubjectStick: boolean;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number, params?: (FullPaginationParams & {
                activityId?: number | undefined;
            }) | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                type: "link" | "video" | "image" | "text" | "vote";
                readCount: number;
                starCount: number;
                noteCount: number;
                shareCount: number;
                agreeCount: number;
                agreeUsernames: string;
                disagreeCount: number;
                linkUrl: string;
                videoUrl: string;
                videoState: 0 | 2 | 1;
                linkContent: {
                    url: string;
                    title: string;
                    description: string;
                    logo: string;
                };
                imageUrls: string;
                source: string;
                sourceType: string;
                sourceId: number;
                sourceName: string;
                sourceSubType: string;
                sourceSubId: number;
                sourceSubName: string;
                coteries: {
                    id: number;
                    name: string;
                    avatar: string;
                }[];
                userId: number;
                username: string;
                content: string;
                contentMd: string;
                createdAt: number;
                updatedAt: number;
                curStar: boolean;
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                vote: {
                    id: number;
                    title: string;
                    type: string;
                    totalCount: number;
                    totalUserCount: number;
                    curUserVote: boolean;
                    voteItems: {
                        id: number;
                        voteId: number;
                        content: string; /**
                         * 根据id获取话题详情
                         *
                         * @param {number} id
                         * @returns
                         */
                        voteCount: number;
                        curUserVote: boolean;
                        voteUsernames: string;
                    }[];
                };
                curSubjectStick: boolean;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    star: ((id: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    unstar: ((id: number) => Promise<import("axios").AxiosResponse<void>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (id: number) => Promise<import("axios").AxiosResponse<void>>;
        };
    };
    getRewardSubjectAd: (() => Promise<import("axios").AxiosResponse<{
        related: {
            id: number;
            title: string;
            description: string;
            referCount: number;
            starCount: number;
            pv: number;
            source: string;
            sticked: boolean;
            userId: number;
            username: string;
            createdAt: number;
            updatedAt: number;
        };
        id: string;
        type: string;
        url: string;
        title: string;
        banner: string;
        data1: string;
        data2: string;
        createdAt: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                related: {
                    id: number;
                    title: string;
                    description: string;
                    referCount: number;
                    starCount: number;
                    pv: number;
                    source: string;
                    sticked: boolean;
                    userId: number;
                    username: string;
                    createdAt: number;
                    updatedAt: number;
                };
                id: string;
                type: string;
                url: string;
                title: string;
                banner: string;
                data1: string;
                data2: string;
                createdAt: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getHomeSubjectAd: (() => Promise<import("axios").AxiosResponse<{
        related: {
            id: number;
            title: string;
            description: string;
            referCount: number;
            starCount: number;
            pv: number;
            source: string;
            sticked: boolean;
            userId: number;
            username: string;
            createdAt: number;
            updatedAt: number;
        };
        id: string;
        type: string;
        url: string;
        title: string;
        banner: string;
        data1: string;
        data2: string;
        createdAt: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                related: {
                    id: number;
                    title: string;
                    description: string;
                    referCount: number;
                    starCount: number;
                    pv: number;
                    source: string;
                    sticked: boolean;
                    userId: number;
                    username: string;
                    createdAt: number;
                    updatedAt: number;
                };
                id: string;
                type: string;
                url: string;
                title: string;
                banner: string;
                data1: string;
                data2: string;
                createdAt: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getDiscussSubjectAd: (() => Promise<import("axios").AxiosResponse<{
        related: {
            id: number;
            title: string;
            description: string;
            referCount: number;
            starCount: number;
            pv: number;
            source: string;
            sticked: boolean;
            userId: number;
            username: string;
            createdAt: number;
            updatedAt: number;
        };
        id: string;
        type: string;
        url: string;
        title: string;
        banner: string;
        data1: string;
        data2: string;
        createdAt: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                related: {
                    id: number;
                    title: string;
                    description: string;
                    referCount: number;
                    starCount: number;
                    pv: number;
                    source: string;
                    sticked: boolean;
                    userId: number;
                    username: string;
                    createdAt: number;
                    updatedAt: number;
                };
                id: string;
                type: string;
                url: string;
                title: string;
                banner: string;
                data1: string;
                data2: string;
                createdAt: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    setIdeaStick: ((subjectId: number, ideaId: number, { stick }: {
        stick: boolean;
    }) => Promise<import("axios").AxiosResponse<any>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (subjectId: number, ideaId: number, { stick }: {
                stick: boolean;
            }) => Promise<import("axios").AxiosResponse<any>>;
        };
    };
};
