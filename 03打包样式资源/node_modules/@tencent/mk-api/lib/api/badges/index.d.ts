import { FullPaginationParams } from '../../types';
export declare const MkBadgeApi: {
    getUserBadge: ((username: string, params?: {
        obtained: boolean;
    } | undefined) => Promise<import("axios").AxiosResponse<{
        userObtained: boolean;
        userObtainedCount: number;
        userObtainedAt: string;
        condition: {
            currentNum: number;
            targetNum: number;
        };
        badgeMissionId: number;
        id: number;
        type: string;
        level: string;
        avatar: string;
        title: string;
        description: string;
        obtainCount: number;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: {
                obtained: boolean;
            } | undefined) => Promise<import("axios").AxiosResponse<{
                userObtained: boolean;
                userObtainedCount: number;
                userObtainedAt: string;
                condition: {
                    currentNum: number;
                    targetNum: number;
                };
                badgeMissionId: number;
                id: number;
                type: string;
                level: string;
                avatar: string;
                title: string;
                description: string;
                obtainCount: number;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    getUserBestBadge: ((username: string, params?: {
        limit: number;
    } | undefined) => Promise<import("axios").AxiosResponse<{
        userObtained: boolean;
        userObtainedCount: number;
        userObtainedAt: string;
        condition: {
            currentNum: number;
            targetNum: number;
        };
        badgeMissionId: number;
        id: number;
        type: string;
        level: string;
        avatar: string;
        title: string;
        description: string;
        obtainCount: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params?: {
                limit: number;
            } | undefined) => Promise<import("axios").AxiosResponse<{
                userObtained: boolean;
                userObtainedCount: number;
                userObtainedAt: string;
                condition: {
                    currentNum: number;
                    targetNum: number;
                };
                badgeMissionId: number;
                id: number;
                type: string;
                level: string;
                avatar: string;
                title: string;
                description: string;
                obtainCount: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getAllBadge: ((params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
        id: number;
        type: string;
        level: string;
        avatar: string;
        title: string;
        description: string;
        obtainCount: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: FullPaginationParams | undefined) => Promise<import("axios").AxiosResponse<{
                id: number;
                type: string;
                level: string;
                avatar: string;
                title: string;
                description: string;
                obtainCount: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getUserNewestBadge: ((username: string) => Promise<import("axios").AxiosResponse<{
        id: number;
        type: string;
        level: string;
        avatar: string;
        title: string;
        description: string;
        obtainCount: number;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<{
                id: number;
                type: string;
                level: string;
                avatar: string;
                title: string;
                description: string;
                obtainCount: number;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    getUserNextBadge: ((username: string) => Promise<import("axios").AxiosResponse<{
        userObtained: boolean;
        userObtainedCount: number;
        userObtainedAt: string;
        condition: {
            currentNum: number;
            targetNum: number;
        };
        badgeMissionId: number;
        id: number;
        type: string;
        level: string;
        avatar: string;
        title: string;
        description: string;
        obtainCount: number;
        createdAt: number;
        updatedAt: number;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string) => Promise<import("axios").AxiosResponse<{
                userObtained: boolean;
                userObtainedCount: number;
                userObtainedAt: string;
                condition: {
                    currentNum: number;
                    targetNum: number;
                };
                badgeMissionId: number;
                id: number;
                type: string;
                level: string;
                avatar: string;
                title: string;
                description: string;
                obtainCount: number;
                createdAt: number;
                updatedAt: number;
            }>>;
        };
    };
    setUserNextBadge: ((username: string, params: {
        badgeId: number;
        badgeMissionId: number;
    }) => Promise<import("axios").AxiosResponse<null>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params: {
                badgeId: number;
                badgeMissionId: number;
            }) => Promise<import("axios").AxiosResponse<null>>;
        };
    };
    getUserBadgeSelected: ((username: string, params: {
        badgeIds: number[];
    }) => Promise<import("axios").AxiosResponse<{
        userObtained: boolean;
        userObtainedCount: number;
        userObtainedAt: string;
        condition: {
            currentNum: number;
            targetNum: number;
        };
        badgeMissionId: number;
        id: number;
        type: string;
        level: string;
        avatar: string;
        title: string;
        description: string;
        obtainCount: number;
        createdAt: number;
        updatedAt: number;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (username: string, params: {
                badgeIds: number[];
            }) => Promise<import("axios").AxiosResponse<{
                userObtained: boolean;
                userObtainedCount: number;
                userObtainedAt: string;
                condition: {
                    currentNum: number;
                    targetNum: number;
                };
                badgeMissionId: number;
                id: number;
                type: string;
                level: string;
                avatar: string;
                title: string;
                description: string;
                obtainCount: number;
                createdAt: number;
                updatedAt: number;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
};
