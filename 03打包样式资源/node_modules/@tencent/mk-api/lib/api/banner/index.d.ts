export declare const MkBannerApi: {
    getQaBanner: ((params?: {
        client?: string | undefined;
        timeValid?: boolean | undefined;
    } | undefined) => Promise<import("axios").AxiosResponse<{
        id: string;
        type: string;
        url: string;
        title: string;
        banner: string;
        data1: string;
        data2: string;
        createdAt: string;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: {
                client?: string | undefined;
                timeValid?: boolean | undefined;
            } | undefined) => Promise<import("axios").AxiosResponse<{
                id: string;
                type: string;
                url: string;
                title: string;
                banner: string;
                data1: string;
                data2: string;
                createdAt: string;
            }>>;
        };
    };
    getProjectBanner: ((params?: {
        client?: string | undefined;
        timeValid?: boolean | undefined;
    } | undefined) => Promise<import("axios").AxiosResponse<{
        id: string;
        type: string;
        url: string;
        title: string;
        banner: string;
        data1: string;
        data2: string;
        createdAt: string;
        related?: {
            path: string;
            id: number;
            name: string;
            avatar: string;
            description: string;
            sourceId: number;
            namespacePath: string;
            tags: {
                id: number;
                name: string;
            }[];
        } | undefined;
    }>>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: (params?: {
                client?: string | undefined;
                timeValid?: boolean | undefined;
            } | undefined) => Promise<import("axios").AxiosResponse<{
                id: string;
                type: string;
                url: string;
                title: string;
                banner: string;
                data1: string;
                data2: string;
                createdAt: string;
                related?: {
                    path: string;
                    id: number;
                    name: string;
                    avatar: string;
                    description: string;
                    sourceId: number;
                    namespacePath: string;
                    tags: {
                        id: number;
                        name: string;
                    }[];
                } | undefined;
            }>>;
        };
    };
    getHomeBanner: (() => Promise<import("axios").AxiosResponse<{
        id: string;
        type: string;
        url: string;
        title: string;
        banner: string;
        data1: string;
        data2: string;
        createdAt: string;
        related?: {
            id: number;
            title: number;
            answers?: {
                author: {
                    title: string;
                    post: string;
                    id: number;
                    name: string;
                    curStar: boolean;
                    avatar: string;
                    username: string;
                    sex: string;
                    bg: string;
                    org: string;
                    anonymous: boolean;
                    createdAt: string;
                    stats: {
                        score: number;
                        scoreLevel: string;
                    };
                };
                contentPlain: string;
            } | undefined;
        } | undefined;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                id: string;
                type: string;
                url: string;
                title: string;
                banner: string;
                data1: string;
                data2: string;
                createdAt: string;
                related?: {
                    id: number;
                    title: number;
                    answers?: {
                        author: {
                            title: string;
                            post: string;
                            id: number;
                            name: string;
                            curStar: boolean;
                            avatar: string;
                            username: string;
                            sex: string;
                            bg: string;
                            org: string;
                            anonymous: boolean;
                            createdAt: string;
                            stats: {
                                score: number;
                                scoreLevel: string;
                            };
                        };
                        contentPlain: string;
                    } | undefined;
                } | undefined;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getContestBanner: (() => Promise<import("axios").AxiosResponse<{
        id: string;
        type: string;
        url: string;
        title: string;
        banner: string;
        data1: string;
        data2: string;
        createdAt: string;
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                id: string;
                type: string;
                url: string;
                title: string;
                banner: string;
                data1: string;
                data2: string;
                createdAt: string;
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
    getArticleBanner: (() => Promise<import("axios").AxiosResponse<{
        id: string;
        type: string;
        url: string;
        title: string;
        banner: string;
        data1: string;
        data2: string;
        createdAt: string;
        related: {
            id: number;
            title: number;
            readCount: number;
            author: {
                title: string;
                post: string;
                id: number;
                name: string;
                curStar: boolean;
                avatar: string;
                username: string;
                sex: string;
                bg: string;
                org: string;
                anonymous: boolean;
                createdAt: string;
                stats: {
                    score: number;
                    scoreLevel: string;
                };
            };
        };
    }[]> & {
        paging: {
            page: number;
            total: number;
            perPage: number;
        };
    }>) & {
        config(config: import("axios").AxiosRequestConfig | ((config: import("axios").AxiosRequestConfig) => import("axios").AxiosRequestConfig) | null): {
            run: () => Promise<import("axios").AxiosResponse<{
                id: string;
                type: string;
                url: string;
                title: string;
                banner: string;
                data1: string;
                data2: string;
                createdAt: string;
                related: {
                    id: number;
                    title: number;
                    readCount: number;
                    author: {
                        title: string;
                        post: string;
                        id: number;
                        name: string;
                        curStar: boolean;
                        avatar: string;
                        username: string;
                        sex: string;
                        bg: string;
                        org: string;
                        anonymous: boolean;
                        createdAt: string;
                        stats: {
                            score: number;
                            scoreLevel: string;
                        };
                    };
                };
            }[]> & {
                paging: {
                    page: number;
                    total: number;
                    perPage: number;
                };
            }>;
        };
    };
};
