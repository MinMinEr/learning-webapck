export declare type Override<P, T0, T1> = P extends keyof T1 ? T1[P] : P extends keyof T0 ? T0[P] : never;
export declare type Override1<P, T0, T1, T2> = P extends keyof T2 ? T2[P] : P extends keyof T1 ? T1[P] : P extends keyof T0 ? T0[P] : never;
export declare type Override2<P, T0, T1, T2, T3> = P extends keyof T3 ? T3[P] : P extends keyof T2 ? T2[P] : P extends keyof T1 ? T1[P] : P extends keyof T0 ? T0[P] : never;
export declare type Override3<P, T0, T1, T2, T3, T4> = P extends keyof T4 ? T4[P] : P extends keyof T3 ? T3[P] : P extends keyof T2 ? T2[P] : P extends keyof T1 ? T1[P] : P extends keyof T0 ? T0[P] : never;
export declare type Override4<P, T0, T1, T2, T3, T4, T5> = P extends keyof T5 ? T5[P] : P extends keyof T4 ? T4[P] : P extends keyof T3 ? T3[P] : P extends keyof T2 ? T2[P] : P extends keyof T1 ? T1[P] : P extends keyof T0 ? T0[P] : never;
export declare type Override5<P, T0, T1, T2, T3, T4, T5, T6> = P extends keyof T6 ? T6[P] : P extends keyof T5 ? T5[P] : P extends keyof T4 ? T4[P] : P extends keyof T3 ? T3[P] : P extends keyof T2 ? T2[P] : P extends keyof T1 ? T1[P] : P extends keyof T0 ? T0[P] : never;
export declare type Override6<P, T0, T1, T2, T3, T4, T5, T6, T7> = P extends keyof T7 ? T7[P] : P extends keyof T6 ? T6[P] : P extends keyof T5 ? T5[P] : P extends keyof T4 ? T4[P] : P extends keyof T3 ? T3[P] : P extends keyof T2 ? T2[P] : P extends keyof T1 ? T1[P] : P extends keyof T0 ? T0[P] : never;
