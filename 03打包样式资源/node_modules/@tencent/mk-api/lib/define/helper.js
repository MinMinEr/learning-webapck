export function extend(t0, ...args) {
    return Object.assign({}, t0, ...args);
}
/**
 * 将对象类型改成可选, 无实际用处, 用于类型推导
 *
 * @export
 * @template T
 * @param {T} arg
 * @returns {Partial<T>}
 */
export function optional(arg) {
    return arg;
}
/**
 * 从对象中选择其中某几个属性
 * 这里的返回值声明不需要改, 主要是为了类型推导, 实际等同Pick
 * @export
 * @template T
 * @template K
 * @param {T} arg
 * @param {K[]} [keys]
 * @returns {Pick<T, K>}
 */
export function pick(arg, keys) {
    if (!keys)
        return arg;
    const ret = {};
    keys.forEach(each => {
        ret[each] = arg[each];
    });
    return ret;
}
/**
 * 从对象中剔除某几个属性
 * 这里的返回值声明不需要改, 主要是为了类型推导, 实际等同Pick
 * @export
 * @template T
 * @template K
 * @param {T} arg
 * @param {K[]} [keys]
 * @returns {Omit<T, K>}
 */
export function omit(arg, keys) {
    if (!keys)
        return arg;
    const ret = Object.assign({}, arg);
    keys.forEach(each => {
        delete ret[each];
    });
    return ret;
}
export function constant(...arg) {
    return arg;
}
export function union(...arg) {
    return arg;
}
