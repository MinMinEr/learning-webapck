var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// 单独设置的config, 使用后会reset
let inject = null;
/**
 * 设置injectConfig
 *
 * @param {InjectConfig} conf
 */
function injectConfig(conf) {
    inject = conf;
}
/**
 * 获取injectConfig
 *
 * @export
 * @returns
 */
export function getInject() {
    return inject;
}
/**
 * 重置injectConfig
 *
 * @export
 */
export function resetInject() {
    inject = null;
}
/**
 * 将api改成可配置形式
 * @export
 * @template T
 * @param {T} api
 * @returns {InjectAPI<T>}
 */
export function injectAPI(api) {
    // 在原可调用前提下增加config方法
    // 可修改当前请求的config
    // 返回{ run }
    api.config = function (config) {
        // 是否执行标记位
        let check = false;
        /**
         * 启用promise进行异步检查run方法是否被同步调用
         */
        function checkSync() {
            return __awaiter(this, void 0, void 0, function* () {
                yield Promise.resolve();
                if (!check)
                    throw new Error(`${api.name}.config().run must be called after ${api.name}.config()`);
            });
        }
        injectConfig(config);
        checkSync();
        return {
            run: function (...arg) {
                // 标记位设为已执行
                check = true;
                return api(...arg);
            },
        };
    };
    return api;
}
/**
 * 将APIGroup中所有api改成可配置形式
 *
 * @export
 * @template T
 * @param {T} group
 * @returns {InjectAPIGroup<T>}
 */
export function injectAPIGroup(group) {
    const keys = Object.keys(group);
    const ret = {};
    keys.forEach((key) => {
        ret[key] = injectAPI(group[key]);
    });
    return ret;
}
