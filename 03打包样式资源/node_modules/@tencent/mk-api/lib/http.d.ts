import { AxiosLike } from './types';
import { AxiosRequestConfig, AxiosResponse } from 'axios';
import { WalkParam } from './utils';
declare type Pagination = {
    page: number;
    total: number;
    perPage: number;
};
export declare const Http: (import("axios").AxiosInstance & {
    ins: AxiosLike;
}) | (Pick<import("axios").AxiosInstance, "get" | "delete" | "post" | "put" | "patch" | "request"> & {
    ins: AxiosLike;
});
/**
 * 设置当前发送http请求的实例
 * 要求:
 * 类似Axios, 有get, post, put, patch, delete, request方法
 *
 * @export
 * @param {AxiosLike} arg
 */
export declare function setHttp(arg: AxiosLike): void;
export interface TypeHTTP<T> {
    get<U = T>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<U>>;
    post<U = T>(url: string, body?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<U>>;
    patch<U = T>(url: string, body?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<U>>;
    put<U = T>(url: string, body?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<U>>;
    delete<U = T>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<U>>;
    request<U = T>(config?: AxiosRequestConfig): Promise<AxiosResponse<U>>;
    list<U = T>(): {
        [k in keyof Omit<TypeHTTP<any>, 'list'>]: (...args: Parameters<TypeHTTP<any>[k]>) => Promise<AxiosResponse<U[]> & {
            paging: Pagination;
        }>;
    };
}
/**
 * 封装Types, 返回的实例中可以进行http请求, 并且自动解析Types附加到headers中
 *
 * @export
 * @template T
 * @param {T} arg
 * @returns {TypeHTTP<T>}
 */
export declare function TypeWrapper<T extends WalkParam>(arg: T): TypeHTTP<T>;
export {};
