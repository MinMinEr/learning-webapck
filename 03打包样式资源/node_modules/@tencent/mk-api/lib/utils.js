function isObj(arg) {
    return arg && typeof arg === 'object';
}
/**
 * 数字转换
 *
 * @export
 * @param {*} v
 * @returns
 */
export function parseNumber(v) {
    return isNaN(v) ? v : +v;
}
/**
 * 创建一个a标签触发文件加载
 *
 * @export
 * @param {string} href
 */
export function createDownload(href) {
    const a = document.createElement('a');
    a.href = href;
    a.target = '_blank';
    document.body.appendChild(a);
    a.click();
    a.remove();
}
/**
 * 解析DTO, 转成字符串
 *
 * @export
 * @param {({ [k: string]: any } | { [k: string]: any} [])} obj
 * @param {string} [prefix='']
 * @returns {string}
 */
export function walk(obj, prefix = '') {
    // 数组的话遍历每一项进行递归
    if (Array.isArray(obj)) {
        return obj.map(each => walk(each)).join(',');
    }
    // 获取非__开头的私有属性
    const keys = Object.keys(obj).filter(each => !each.startsWith('__'));
    return keys
        .map(each => {
        const value = obj[each];
        const pre = prefix ? `${prefix}.${each}` : each;
        // 如果是数组
        // 只递归其中object项
        // 如果包含string, number, boolean, 则直接把pre加进去
        if (Array.isArray(value)) {
            const hasNative = value.some(arg => !isObj(arg));
            const child = value.filter(isObj).map(item => walk(item, pre))
                .join(',');
            return [hasNative ? pre : '', child].filter(Boolean).join(',');
        }
        if (typeof value === 'object') {
            // 递归
            return walk(value, pre);
        }
        return pre;
    })
        .join(',');
}
