import { walk, parseNumber } from './utils';
import { omit } from './define/helper';
import { getInject, resetInject } from './inject';
let httpInstance;
const functionKeys = [
    'get',
    'delete',
    'patch',
    'post',
    'put',
    'request',
];
export const Http = {};
/**
 *
 * 将传递的config与injectConfig合并
 * 如果是方法则直接覆盖
 * 否则两者中的headers和params将合并, 其余覆盖
 *
 * @param {AxiosRequestConfig} [config]
 * @returns
 */
function mergeConfig(config) {
    // 注入inject
    const injectConfig = getInject();
    if (!injectConfig) {
        return config;
    }
    let cfg = config || {};
    // 方法, 直接获取返回值
    if (typeof injectConfig === 'function') {
        cfg = injectConfig(cfg);
    }
    else {
        // 静态配置
        // 需要把params和headers单独合并, 防止被覆盖
        const params = {};
        const headers = {};
        Object.assign(params, cfg.params, injectConfig.params);
        Object.assign(headers, cfg.headers, injectConfig.headers);
        cfg = Object.assign({}, cfg, injectConfig, {
            params,
            headers,
        });
    }
    // 清空inject, 确保只使用一次
    resetInject();
    return cfg;
}
/**
 * 合并fields到headers中
 *
 * @param {string} filter
 * @param {AxiosRequestConfig} [config]
 * @returns
 */
function mergeFieldsToHeader(filter, config) {
    // 注入inject
    if (!filter)
        return config;
    // 单独合并header
    const headers = {};
    Object.assign(headers, (config || {}).headers, {
        fields: filter,
    });
    return Object.assign({}, config, {
        headers,
    });
}
/**
 * 设置当前发送http请求的实例
 * 要求:
 * 类似Axios, 有get, post, put, patch, delete, request方法
 *
 * @export
 * @param {AxiosLike} arg
 */
export function setHttp(arg) {
    // 确保只有一个axios实例, 否则会覆盖原有实例上的配置
    if (httpInstance)
        return;
    httpInstance = arg;
    // 这里要单独重新声明, 并且合并conf和injectConfig
    Http.get = function (url, conf) {
        return httpInstance.get(url, mergeConfig(conf));
    };
    Http.post = function (url, body, conf) {
        return httpInstance.post(url, body, mergeConfig(conf));
    };
    Http.put = function (url, body, conf) {
        return httpInstance.put(url, body, mergeConfig(conf));
    };
    Http.delete = function (url, conf) {
        return httpInstance.delete(url, mergeConfig(conf));
    };
    Http.patch = function (url, body, conf) {
        return httpInstance.patch(url, body, mergeConfig(conf));
    };
    Http.request = function (conf) {
        return httpInstance.request(mergeConfig(conf));
    };
    Http.ins = arg;
}
functionKeys.forEach((key) => {
    Http[key] = function () {
        throw new Error('Should set http instance before call Http methods');
    };
});
/**
 * 封装Types, 返回的实例中可以进行http请求, 并且自动解析Types附加到headers中
 *
 * @export
 * @template T
 * @param {T} arg
 * @returns {TypeHTTP<T>}
 */
export function TypeWrapper(arg) {
    let filter = '';
    // 延迟解析
    function lazy() {
        if (filter)
            return;
        const tmp = walk(arg);
        filter = Array.from(new Set(tmp.split(','))).join(',');
    }
    const http = {
        get(url, config) {
            lazy();
            return Http.get(url, mergeFieldsToHeader(filter, config));
        },
        post(url, body, config) {
            lazy();
            return Http.post(url, body, mergeFieldsToHeader(filter, config));
        },
        put(url, body, config) {
            lazy();
            return Http.put(url, body, mergeFieldsToHeader(filter, config));
        },
        patch(url, body, config) {
            lazy();
            return Http.patch(url, body, mergeFieldsToHeader(filter, config));
        },
        delete(url, config) {
            lazy();
            return Http.delete(url, mergeFieldsToHeader(filter, config));
        },
        request(config) {
            lazy();
            return Http.request(mergeFieldsToHeader(filter, config));
        },
        list: null,
    };
    // 构造list
    const list = {};
    // 遍历所有key, 并且赋值到list上
    Object.keys(omit(http, ['list'])).forEach(each => {
        list[each] = function (...args) {
            // 执行方法拿到结果
            return http[each](...args).then((res) => {
                const { headers } = res;
                // 将headers上的page信息赋值到page对象上
                const paging = {
                    page: parseNumber(headers['x-page']),
                    total: parseNumber(headers['x-total']),
                    perPage: parseNumber(headers['x-per-page']),
                };
                // 与res一起返回
                return Object.assign(Object.assign({}, res), { paging });
            });
        };
    });
    return Object.assign(http, {
        list() {
            return list;
        },
    });
}
